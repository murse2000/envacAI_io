
envac_io.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e54  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08009f90  08009f90  0000af90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6b8  0800a6b8  0000c068  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6b8  0800a6b8  0000b6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6c0  0800a6c0  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6c0  0800a6c0  0000b6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6c4  0800a6c4  0000b6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800a6c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e40  20000068  0800a730  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ea8  0800a730  0000cea8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119fd  00000000  00000000  0000c091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b1f  00000000  00000000  0001da8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  000205b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d51  00000000  00000000  000216b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a06  00000000  00000000  00022401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168e9  00000000  00000000  0003be07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009af21  00000000  00000000  000526f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed611  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c4  00000000  00000000  000ed654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000f2918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000068 	.word	0x20000068
 8000158:	00000000 	.word	0x00000000
 800015c:	08009f78 	.word	0x08009f78

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000006c 	.word	0x2000006c
 8000178:	08009f78 	.word	0x08009f78

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <__aeabi_dmul>:
 8000190:	b570      	push	{r4, r5, r6, lr}
 8000192:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000196:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800019a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800019e:	bf1d      	ittte	ne
 80001a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001a4:	ea94 0f0c 	teqne	r4, ip
 80001a8:	ea95 0f0c 	teqne	r5, ip
 80001ac:	f000 f8de 	bleq	800036c <__aeabi_dmul+0x1dc>
 80001b0:	442c      	add	r4, r5
 80001b2:	ea81 0603 	eor.w	r6, r1, r3
 80001b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001c2:	bf18      	it	ne
 80001c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001d0:	d038      	beq.n	8000244 <__aeabi_dmul+0xb4>
 80001d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001d6:	f04f 0500 	mov.w	r5, #0
 80001da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001e6:	f04f 0600 	mov.w	r6, #0
 80001ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ee:	f09c 0f00 	teq	ip, #0
 80001f2:	bf18      	it	ne
 80001f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000200:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000204:	d204      	bcs.n	8000210 <__aeabi_dmul+0x80>
 8000206:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800020a:	416d      	adcs	r5, r5
 800020c:	eb46 0606 	adc.w	r6, r6, r6
 8000210:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000214:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000218:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800021c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000220:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000224:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000228:	bf88      	it	hi
 800022a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800022e:	d81e      	bhi.n	800026e <__aeabi_dmul+0xde>
 8000230:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000234:	bf08      	it	eq
 8000236:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800023a:	f150 0000 	adcs.w	r0, r0, #0
 800023e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000242:	bd70      	pop	{r4, r5, r6, pc}
 8000244:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000248:	ea46 0101 	orr.w	r1, r6, r1
 800024c:	ea40 0002 	orr.w	r0, r0, r2
 8000250:	ea81 0103 	eor.w	r1, r1, r3
 8000254:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000258:	bfc2      	ittt	gt
 800025a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800025e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000262:	bd70      	popgt	{r4, r5, r6, pc}
 8000264:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000268:	f04f 0e00 	mov.w	lr, #0
 800026c:	3c01      	subs	r4, #1
 800026e:	f300 80ab 	bgt.w	80003c8 <__aeabi_dmul+0x238>
 8000272:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000276:	bfde      	ittt	le
 8000278:	2000      	movle	r0, #0
 800027a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800027e:	bd70      	pople	{r4, r5, r6, pc}
 8000280:	f1c4 0400 	rsb	r4, r4, #0
 8000284:	3c20      	subs	r4, #32
 8000286:	da35      	bge.n	80002f4 <__aeabi_dmul+0x164>
 8000288:	340c      	adds	r4, #12
 800028a:	dc1b      	bgt.n	80002c4 <__aeabi_dmul+0x134>
 800028c:	f104 0414 	add.w	r4, r4, #20
 8000290:	f1c4 0520 	rsb	r5, r4, #32
 8000294:	fa00 f305 	lsl.w	r3, r0, r5
 8000298:	fa20 f004 	lsr.w	r0, r0, r4
 800029c:	fa01 f205 	lsl.w	r2, r1, r5
 80002a0:	ea40 0002 	orr.w	r0, r0, r2
 80002a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	fa21 f604 	lsr.w	r6, r1, r4
 80002b4:	eb42 0106 	adc.w	r1, r2, r6
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 040c 	rsb	r4, r4, #12
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f304 	lsl.w	r3, r0, r4
 80002d0:	fa20 f005 	lsr.w	r0, r0, r5
 80002d4:	fa01 f204 	lsl.w	r2, r1, r4
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ec:	bf08      	it	eq
 80002ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	f1c4 0520 	rsb	r5, r4, #32
 80002f8:	fa00 f205 	lsl.w	r2, r0, r5
 80002fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000300:	fa20 f304 	lsr.w	r3, r0, r4
 8000304:	fa01 f205 	lsl.w	r2, r1, r5
 8000308:	ea43 0302 	orr.w	r3, r3, r2
 800030c:	fa21 f004 	lsr.w	r0, r1, r4
 8000310:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000314:	fa21 f204 	lsr.w	r2, r1, r4
 8000318:	ea20 0002 	bic.w	r0, r0, r2
 800031c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f094 0f00 	teq	r4, #0
 8000330:	d10f      	bne.n	8000352 <__aeabi_dmul+0x1c2>
 8000332:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000336:	0040      	lsls	r0, r0, #1
 8000338:	eb41 0101 	adc.w	r1, r1, r1
 800033c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000340:	bf08      	it	eq
 8000342:	3c01      	subeq	r4, #1
 8000344:	d0f7      	beq.n	8000336 <__aeabi_dmul+0x1a6>
 8000346:	ea41 0106 	orr.w	r1, r1, r6
 800034a:	f095 0f00 	teq	r5, #0
 800034e:	bf18      	it	ne
 8000350:	4770      	bxne	lr
 8000352:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000356:	0052      	lsls	r2, r2, #1
 8000358:	eb43 0303 	adc.w	r3, r3, r3
 800035c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000360:	bf08      	it	eq
 8000362:	3d01      	subeq	r5, #1
 8000364:	d0f7      	beq.n	8000356 <__aeabi_dmul+0x1c6>
 8000366:	ea43 0306 	orr.w	r3, r3, r6
 800036a:	4770      	bx	lr
 800036c:	ea94 0f0c 	teq	r4, ip
 8000370:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000374:	bf18      	it	ne
 8000376:	ea95 0f0c 	teqne	r5, ip
 800037a:	d00c      	beq.n	8000396 <__aeabi_dmul+0x206>
 800037c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000380:	bf18      	it	ne
 8000382:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000386:	d1d1      	bne.n	800032c <__aeabi_dmul+0x19c>
 8000388:	ea81 0103 	eor.w	r1, r1, r3
 800038c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800039a:	bf06      	itte	eq
 800039c:	4610      	moveq	r0, r2
 800039e:	4619      	moveq	r1, r3
 80003a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003a4:	d019      	beq.n	80003da <__aeabi_dmul+0x24a>
 80003a6:	ea94 0f0c 	teq	r4, ip
 80003aa:	d102      	bne.n	80003b2 <__aeabi_dmul+0x222>
 80003ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003b0:	d113      	bne.n	80003da <__aeabi_dmul+0x24a>
 80003b2:	ea95 0f0c 	teq	r5, ip
 80003b6:	d105      	bne.n	80003c4 <__aeabi_dmul+0x234>
 80003b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003bc:	bf1c      	itt	ne
 80003be:	4610      	movne	r0, r2
 80003c0:	4619      	movne	r1, r3
 80003c2:	d10a      	bne.n	80003da <__aeabi_dmul+0x24a>
 80003c4:	ea81 0103 	eor.w	r1, r1, r3
 80003c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
 80003da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003e2:	bd70      	pop	{r4, r5, r6, pc}

080003e4 <__aeabi_drsub>:
 80003e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e8:	e002      	b.n	80003f0 <__adddf3>
 80003ea:	bf00      	nop

080003ec <__aeabi_dsub>:
 80003ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003f0 <__adddf3>:
 80003f0:	b530      	push	{r4, r5, lr}
 80003f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003fa:	ea94 0f05 	teq	r4, r5
 80003fe:	bf08      	it	eq
 8000400:	ea90 0f02 	teqeq	r0, r2
 8000404:	bf1f      	itttt	ne
 8000406:	ea54 0c00 	orrsne.w	ip, r4, r0
 800040a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000412:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000416:	f000 80e2 	beq.w	80005de <__adddf3+0x1ee>
 800041a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000422:	bfb8      	it	lt
 8000424:	426d      	neglt	r5, r5
 8000426:	dd0c      	ble.n	8000442 <__adddf3+0x52>
 8000428:	442c      	add	r4, r5
 800042a:	ea80 0202 	eor.w	r2, r0, r2
 800042e:	ea81 0303 	eor.w	r3, r1, r3
 8000432:	ea82 0000 	eor.w	r0, r2, r0
 8000436:	ea83 0101 	eor.w	r1, r3, r1
 800043a:	ea80 0202 	eor.w	r2, r0, r2
 800043e:	ea81 0303 	eor.w	r3, r1, r3
 8000442:	2d36      	cmp	r5, #54	@ 0x36
 8000444:	bf88      	it	hi
 8000446:	bd30      	pophi	{r4, r5, pc}
 8000448:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800044c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000450:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000454:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000458:	d002      	beq.n	8000460 <__adddf3+0x70>
 800045a:	4240      	negs	r0, r0
 800045c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000460:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000464:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000468:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800046c:	d002      	beq.n	8000474 <__adddf3+0x84>
 800046e:	4252      	negs	r2, r2
 8000470:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000474:	ea94 0f05 	teq	r4, r5
 8000478:	f000 80a7 	beq.w	80005ca <__adddf3+0x1da>
 800047c:	f1a4 0401 	sub.w	r4, r4, #1
 8000480:	f1d5 0e20 	rsbs	lr, r5, #32
 8000484:	db0d      	blt.n	80004a2 <__adddf3+0xb2>
 8000486:	fa02 fc0e 	lsl.w	ip, r2, lr
 800048a:	fa22 f205 	lsr.w	r2, r2, r5
 800048e:	1880      	adds	r0, r0, r2
 8000490:	f141 0100 	adc.w	r1, r1, #0
 8000494:	fa03 f20e 	lsl.w	r2, r3, lr
 8000498:	1880      	adds	r0, r0, r2
 800049a:	fa43 f305 	asr.w	r3, r3, r5
 800049e:	4159      	adcs	r1, r3
 80004a0:	e00e      	b.n	80004c0 <__adddf3+0xd0>
 80004a2:	f1a5 0520 	sub.w	r5, r5, #32
 80004a6:	f10e 0e20 	add.w	lr, lr, #32
 80004aa:	2a01      	cmp	r2, #1
 80004ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004b0:	bf28      	it	cs
 80004b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b6:	fa43 f305 	asr.w	r3, r3, r5
 80004ba:	18c0      	adds	r0, r0, r3
 80004bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c4:	d507      	bpl.n	80004d6 <__adddf3+0xe6>
 80004c6:	f04f 0e00 	mov.w	lr, #0
 80004ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004da:	d31b      	bcc.n	8000514 <__adddf3+0x124>
 80004dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004e0:	d30c      	bcc.n	80004fc <__adddf3+0x10c>
 80004e2:	0849      	lsrs	r1, r1, #1
 80004e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ec:	f104 0401 	add.w	r4, r4, #1
 80004f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f8:	f080 809a 	bcs.w	8000630 <__adddf3+0x240>
 80004fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000500:	bf08      	it	eq
 8000502:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000506:	f150 0000 	adcs.w	r0, r0, #0
 800050a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050e:	ea41 0105 	orr.w	r1, r1, r5
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000518:	4140      	adcs	r0, r0
 800051a:	eb41 0101 	adc.w	r1, r1, r1
 800051e:	3c01      	subs	r4, #1
 8000520:	bf28      	it	cs
 8000522:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000526:	d2e9      	bcs.n	80004fc <__adddf3+0x10c>
 8000528:	f091 0f00 	teq	r1, #0
 800052c:	bf04      	itt	eq
 800052e:	4601      	moveq	r1, r0
 8000530:	2000      	moveq	r0, #0
 8000532:	fab1 f381 	clz	r3, r1
 8000536:	bf08      	it	eq
 8000538:	3320      	addeq	r3, #32
 800053a:	f1a3 030b 	sub.w	r3, r3, #11
 800053e:	f1b3 0220 	subs.w	r2, r3, #32
 8000542:	da0c      	bge.n	800055e <__adddf3+0x16e>
 8000544:	320c      	adds	r2, #12
 8000546:	dd08      	ble.n	800055a <__adddf3+0x16a>
 8000548:	f102 0c14 	add.w	ip, r2, #20
 800054c:	f1c2 020c 	rsb	r2, r2, #12
 8000550:	fa01 f00c 	lsl.w	r0, r1, ip
 8000554:	fa21 f102 	lsr.w	r1, r1, r2
 8000558:	e00c      	b.n	8000574 <__adddf3+0x184>
 800055a:	f102 0214 	add.w	r2, r2, #20
 800055e:	bfd8      	it	le
 8000560:	f1c2 0c20 	rsble	ip, r2, #32
 8000564:	fa01 f102 	lsl.w	r1, r1, r2
 8000568:	fa20 fc0c 	lsr.w	ip, r0, ip
 800056c:	bfdc      	itt	le
 800056e:	ea41 010c 	orrle.w	r1, r1, ip
 8000572:	4090      	lslle	r0, r2
 8000574:	1ae4      	subs	r4, r4, r3
 8000576:	bfa2      	ittt	ge
 8000578:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800057c:	4329      	orrge	r1, r5
 800057e:	bd30      	popge	{r4, r5, pc}
 8000580:	ea6f 0404 	mvn.w	r4, r4
 8000584:	3c1f      	subs	r4, #31
 8000586:	da1c      	bge.n	80005c2 <__adddf3+0x1d2>
 8000588:	340c      	adds	r4, #12
 800058a:	dc0e      	bgt.n	80005aa <__adddf3+0x1ba>
 800058c:	f104 0414 	add.w	r4, r4, #20
 8000590:	f1c4 0220 	rsb	r2, r4, #32
 8000594:	fa20 f004 	lsr.w	r0, r0, r4
 8000598:	fa01 f302 	lsl.w	r3, r1, r2
 800059c:	ea40 0003 	orr.w	r0, r0, r3
 80005a0:	fa21 f304 	lsr.w	r3, r1, r4
 80005a4:	ea45 0103 	orr.w	r1, r5, r3
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	f1c4 040c 	rsb	r4, r4, #12
 80005ae:	f1c4 0220 	rsb	r2, r4, #32
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 f304 	lsl.w	r3, r1, r4
 80005ba:	ea40 0003 	orr.w	r0, r0, r3
 80005be:	4629      	mov	r1, r5
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	fa21 f004 	lsr.w	r0, r1, r4
 80005c6:	4629      	mov	r1, r5
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	f094 0f00 	teq	r4, #0
 80005ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005d2:	bf06      	itte	eq
 80005d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d8:	3401      	addeq	r4, #1
 80005da:	3d01      	subne	r5, #1
 80005dc:	e74e      	b.n	800047c <__adddf3+0x8c>
 80005de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005e2:	bf18      	it	ne
 80005e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e8:	d029      	beq.n	800063e <__adddf3+0x24e>
 80005ea:	ea94 0f05 	teq	r4, r5
 80005ee:	bf08      	it	eq
 80005f0:	ea90 0f02 	teqeq	r0, r2
 80005f4:	d005      	beq.n	8000602 <__adddf3+0x212>
 80005f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005fa:	bf04      	itt	eq
 80005fc:	4619      	moveq	r1, r3
 80005fe:	4610      	moveq	r0, r2
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	ea91 0f03 	teq	r1, r3
 8000606:	bf1e      	ittt	ne
 8000608:	2100      	movne	r1, #0
 800060a:	2000      	movne	r0, #0
 800060c:	bd30      	popne	{r4, r5, pc}
 800060e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000612:	d105      	bne.n	8000620 <__adddf3+0x230>
 8000614:	0040      	lsls	r0, r0, #1
 8000616:	4149      	adcs	r1, r1
 8000618:	bf28      	it	cs
 800061a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061e:	bd30      	pop	{r4, r5, pc}
 8000620:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000624:	bf3c      	itt	cc
 8000626:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800062a:	bd30      	popcc	{r4, r5, pc}
 800062c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000630:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000634:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000638:	f04f 0000 	mov.w	r0, #0
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf1a      	itte	ne
 8000644:	4619      	movne	r1, r3
 8000646:	4610      	movne	r0, r2
 8000648:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800064c:	bf1c      	itt	ne
 800064e:	460b      	movne	r3, r1
 8000650:	4602      	movne	r2, r0
 8000652:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000656:	bf06      	itte	eq
 8000658:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800065c:	ea91 0f03 	teqeq	r1, r3
 8000660:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000664:	bd30      	pop	{r4, r5, pc}
 8000666:	bf00      	nop

08000668 <__aeabi_ui2d>:
 8000668:	f090 0f00 	teq	r0, #0
 800066c:	bf04      	itt	eq
 800066e:	2100      	moveq	r1, #0
 8000670:	4770      	bxeq	lr
 8000672:	b530      	push	{r4, r5, lr}
 8000674:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000678:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800067c:	f04f 0500 	mov.w	r5, #0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e750      	b.n	8000528 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_i2d>:
 8000688:	f090 0f00 	teq	r0, #0
 800068c:	bf04      	itt	eq
 800068e:	2100      	moveq	r1, #0
 8000690:	4770      	bxeq	lr
 8000692:	b530      	push	{r4, r5, lr}
 8000694:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000698:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800069c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006a0:	bf48      	it	mi
 80006a2:	4240      	negmi	r0, r0
 80006a4:	f04f 0100 	mov.w	r1, #0
 80006a8:	e73e      	b.n	8000528 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_f2d>:
 80006ac:	0042      	lsls	r2, r0, #1
 80006ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006ba:	bf1f      	itttt	ne
 80006bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c8:	4770      	bxne	lr
 80006ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ce:	bf08      	it	eq
 80006d0:	4770      	bxeq	lr
 80006d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d6:	bf04      	itt	eq
 80006d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006dc:	4770      	bxeq	lr
 80006de:	b530      	push	{r4, r5, lr}
 80006e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	e71c      	b.n	8000528 <__adddf3+0x138>
 80006ee:	bf00      	nop

080006f0 <__aeabi_ul2d>:
 80006f0:	ea50 0201 	orrs.w	r2, r0, r1
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	f04f 0500 	mov.w	r5, #0
 80006fe:	e00a      	b.n	8000716 <__aeabi_l2d+0x16>

08000700 <__aeabi_l2d>:
 8000700:	ea50 0201 	orrs.w	r2, r0, r1
 8000704:	bf08      	it	eq
 8000706:	4770      	bxeq	lr
 8000708:	b530      	push	{r4, r5, lr}
 800070a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070e:	d502      	bpl.n	8000716 <__aeabi_l2d+0x16>
 8000710:	4240      	negs	r0, r0
 8000712:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000716:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800071a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000722:	f43f aed8 	beq.w	80004d6 <__adddf3+0xe6>
 8000726:	f04f 0203 	mov.w	r2, #3
 800072a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072e:	bf18      	it	ne
 8000730:	3203      	addne	r2, #3
 8000732:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000736:	bf18      	it	ne
 8000738:	3203      	addne	r2, #3
 800073a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073e:	f1c2 0320 	rsb	r3, r2, #32
 8000742:	fa00 fc03 	lsl.w	ip, r0, r3
 8000746:	fa20 f002 	lsr.w	r0, r0, r2
 800074a:	fa01 fe03 	lsl.w	lr, r1, r3
 800074e:	ea40 000e 	orr.w	r0, r0, lr
 8000752:	fa21 f102 	lsr.w	r1, r1, r2
 8000756:	4414      	add	r4, r2
 8000758:	e6bd      	b.n	80004d6 <__adddf3+0xe6>
 800075a:	bf00      	nop

0800075c <__aeabi_d2uiz>:
 800075c:	004a      	lsls	r2, r1, #1
 800075e:	d211      	bcs.n	8000784 <__aeabi_d2uiz+0x28>
 8000760:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000764:	d211      	bcs.n	800078a <__aeabi_d2uiz+0x2e>
 8000766:	d50d      	bpl.n	8000784 <__aeabi_d2uiz+0x28>
 8000768:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800076c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000770:	d40e      	bmi.n	8000790 <__aeabi_d2uiz+0x34>
 8000772:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000776:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800077a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800077e:	fa23 f002 	lsr.w	r0, r3, r2
 8000782:	4770      	bx	lr
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	4770      	bx	lr
 800078a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800078e:	d102      	bne.n	8000796 <__aeabi_d2uiz+0x3a>
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	4770      	bx	lr
 8000796:	f04f 0000 	mov.w	r0, #0
 800079a:	4770      	bx	lr

0800079c <__aeabi_uldivmod>:
 800079c:	b953      	cbnz	r3, 80007b4 <__aeabi_uldivmod+0x18>
 800079e:	b94a      	cbnz	r2, 80007b4 <__aeabi_uldivmod+0x18>
 80007a0:	2900      	cmp	r1, #0
 80007a2:	bf08      	it	eq
 80007a4:	2800      	cmpeq	r0, #0
 80007a6:	bf1c      	itt	ne
 80007a8:	f04f 31ff 	movne.w	r1, #4294967295
 80007ac:	f04f 30ff 	movne.w	r0, #4294967295
 80007b0:	f000 b968 	b.w	8000a84 <__aeabi_idiv0>
 80007b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80007b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007bc:	f000 f806 	bl	80007cc <__udivmoddi4>
 80007c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007c8:	b004      	add	sp, #16
 80007ca:	4770      	bx	lr

080007cc <__udivmoddi4>:
 80007cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007d0:	9d08      	ldr	r5, [sp, #32]
 80007d2:	460c      	mov	r4, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14e      	bne.n	8000876 <__udivmoddi4+0xaa>
 80007d8:	4694      	mov	ip, r2
 80007da:	458c      	cmp	ip, r1
 80007dc:	4686      	mov	lr, r0
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	d962      	bls.n	80008aa <__udivmoddi4+0xde>
 80007e4:	b14a      	cbz	r2, 80007fa <__udivmoddi4+0x2e>
 80007e6:	f1c2 0320 	rsb	r3, r2, #32
 80007ea:	4091      	lsls	r1, r2
 80007ec:	fa20 f303 	lsr.w	r3, r0, r3
 80007f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f4:	4319      	orrs	r1, r3
 80007f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000802:	fb07 1114 	mls	r1, r7, r4, r1
 8000806:	fa1f f68c 	uxth.w	r6, ip
 800080a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800080e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000812:	fb04 f106 	mul.w	r1, r4, r6
 8000816:	4299      	cmp	r1, r3
 8000818:	d90a      	bls.n	8000830 <__udivmoddi4+0x64>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000822:	f080 8110 	bcs.w	8000a46 <__udivmoddi4+0x27a>
 8000826:	4299      	cmp	r1, r3
 8000828:	f240 810d 	bls.w	8000a46 <__udivmoddi4+0x27a>
 800082c:	3c02      	subs	r4, #2
 800082e:	4463      	add	r3, ip
 8000830:	1a59      	subs	r1, r3, r1
 8000832:	fbb1 f0f7 	udiv	r0, r1, r7
 8000836:	fb07 1110 	mls	r1, r7, r0, r1
 800083a:	fb00 f606 	mul.w	r6, r0, r6
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000846:	429e      	cmp	r6, r3
 8000848:	d90a      	bls.n	8000860 <__udivmoddi4+0x94>
 800084a:	eb1c 0303 	adds.w	r3, ip, r3
 800084e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000852:	f080 80fa 	bcs.w	8000a4a <__udivmoddi4+0x27e>
 8000856:	429e      	cmp	r6, r3
 8000858:	f240 80f7 	bls.w	8000a4a <__udivmoddi4+0x27e>
 800085c:	4463      	add	r3, ip
 800085e:	3802      	subs	r0, #2
 8000860:	2100      	movs	r1, #0
 8000862:	1b9b      	subs	r3, r3, r6
 8000864:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000868:	b11d      	cbz	r5, 8000872 <__udivmoddi4+0xa6>
 800086a:	40d3      	lsrs	r3, r2
 800086c:	2200      	movs	r2, #0
 800086e:	e9c5 3200 	strd	r3, r2, [r5]
 8000872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000876:	428b      	cmp	r3, r1
 8000878:	d905      	bls.n	8000886 <__udivmoddi4+0xba>
 800087a:	b10d      	cbz	r5, 8000880 <__udivmoddi4+0xb4>
 800087c:	e9c5 0100 	strd	r0, r1, [r5]
 8000880:	2100      	movs	r1, #0
 8000882:	4608      	mov	r0, r1
 8000884:	e7f5      	b.n	8000872 <__udivmoddi4+0xa6>
 8000886:	fab3 f183 	clz	r1, r3
 800088a:	2900      	cmp	r1, #0
 800088c:	d146      	bne.n	800091c <__udivmoddi4+0x150>
 800088e:	42a3      	cmp	r3, r4
 8000890:	d302      	bcc.n	8000898 <__udivmoddi4+0xcc>
 8000892:	4290      	cmp	r0, r2
 8000894:	f0c0 80ee 	bcc.w	8000a74 <__udivmoddi4+0x2a8>
 8000898:	1a86      	subs	r6, r0, r2
 800089a:	eb64 0303 	sbc.w	r3, r4, r3
 800089e:	2001      	movs	r0, #1
 80008a0:	2d00      	cmp	r5, #0
 80008a2:	d0e6      	beq.n	8000872 <__udivmoddi4+0xa6>
 80008a4:	e9c5 6300 	strd	r6, r3, [r5]
 80008a8:	e7e3      	b.n	8000872 <__udivmoddi4+0xa6>
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	f040 808f 	bne.w	80009ce <__udivmoddi4+0x202>
 80008b0:	eba1 040c 	sub.w	r4, r1, ip
 80008b4:	2101      	movs	r1, #1
 80008b6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008ba:	fa1f f78c 	uxth.w	r7, ip
 80008be:	fbb4 f6f8 	udiv	r6, r4, r8
 80008c2:	fb08 4416 	mls	r4, r8, r6, r4
 80008c6:	fb07 f006 	mul.w	r0, r7, r6
 80008ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d2:	4298      	cmp	r0, r3
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0x11c>
 80008d6:	eb1c 0303 	adds.w	r3, ip, r3
 80008da:	f106 34ff 	add.w	r4, r6, #4294967295
 80008de:	d202      	bcs.n	80008e6 <__udivmoddi4+0x11a>
 80008e0:	4298      	cmp	r0, r3
 80008e2:	f200 80cb 	bhi.w	8000a7c <__udivmoddi4+0x2b0>
 80008e6:	4626      	mov	r6, r4
 80008e8:	1a1c      	subs	r4, r3, r0
 80008ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ee:	fb08 4410 	mls	r4, r8, r0, r4
 80008f2:	fb00 f707 	mul.w	r7, r0, r7
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fe:	429f      	cmp	r7, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x148>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f100 34ff 	add.w	r4, r0, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x146>
 800090c:	429f      	cmp	r7, r3
 800090e:	f200 80ae 	bhi.w	8000a6e <__udivmoddi4+0x2a2>
 8000912:	4620      	mov	r0, r4
 8000914:	1bdb      	subs	r3, r3, r7
 8000916:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0x9c>
 800091c:	f1c1 0720 	rsb	r7, r1, #32
 8000920:	408b      	lsls	r3, r1
 8000922:	fa22 fc07 	lsr.w	ip, r2, r7
 8000926:	ea4c 0c03 	orr.w	ip, ip, r3
 800092a:	fa24 f607 	lsr.w	r6, r4, r7
 800092e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000932:	fbb6 f8f9 	udiv	r8, r6, r9
 8000936:	fa1f fe8c 	uxth.w	lr, ip
 800093a:	fb09 6618 	mls	r6, r9, r8, r6
 800093e:	fa20 f307 	lsr.w	r3, r0, r7
 8000942:	408c      	lsls	r4, r1
 8000944:	fa00 fa01 	lsl.w	sl, r0, r1
 8000948:	fb08 f00e 	mul.w	r0, r8, lr
 800094c:	431c      	orrs	r4, r3
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000954:	4298      	cmp	r0, r3
 8000956:	fa02 f201 	lsl.w	r2, r2, r1
 800095a:	d90a      	bls.n	8000972 <__udivmoddi4+0x1a6>
 800095c:	eb1c 0303 	adds.w	r3, ip, r3
 8000960:	f108 36ff 	add.w	r6, r8, #4294967295
 8000964:	f080 8081 	bcs.w	8000a6a <__udivmoddi4+0x29e>
 8000968:	4298      	cmp	r0, r3
 800096a:	d97e      	bls.n	8000a6a <__udivmoddi4+0x29e>
 800096c:	f1a8 0802 	sub.w	r8, r8, #2
 8000970:	4463      	add	r3, ip
 8000972:	1a1e      	subs	r6, r3, r0
 8000974:	fbb6 f3f9 	udiv	r3, r6, r9
 8000978:	fb09 6613 	mls	r6, r9, r3, r6
 800097c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000980:	b2a4      	uxth	r4, r4
 8000982:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000986:	45a6      	cmp	lr, r4
 8000988:	d908      	bls.n	800099c <__udivmoddi4+0x1d0>
 800098a:	eb1c 0404 	adds.w	r4, ip, r4
 800098e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000992:	d266      	bcs.n	8000a62 <__udivmoddi4+0x296>
 8000994:	45a6      	cmp	lr, r4
 8000996:	d964      	bls.n	8000a62 <__udivmoddi4+0x296>
 8000998:	3b02      	subs	r3, #2
 800099a:	4464      	add	r4, ip
 800099c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80009a0:	fba0 8302 	umull	r8, r3, r0, r2
 80009a4:	eba4 040e 	sub.w	r4, r4, lr
 80009a8:	429c      	cmp	r4, r3
 80009aa:	46c6      	mov	lr, r8
 80009ac:	461e      	mov	r6, r3
 80009ae:	d350      	bcc.n	8000a52 <__udivmoddi4+0x286>
 80009b0:	d04d      	beq.n	8000a4e <__udivmoddi4+0x282>
 80009b2:	b155      	cbz	r5, 80009ca <__udivmoddi4+0x1fe>
 80009b4:	ebba 030e 	subs.w	r3, sl, lr
 80009b8:	eb64 0406 	sbc.w	r4, r4, r6
 80009bc:	fa04 f707 	lsl.w	r7, r4, r7
 80009c0:	40cb      	lsrs	r3, r1
 80009c2:	431f      	orrs	r7, r3
 80009c4:	40cc      	lsrs	r4, r1
 80009c6:	e9c5 7400 	strd	r7, r4, [r5]
 80009ca:	2100      	movs	r1, #0
 80009cc:	e751      	b.n	8000872 <__udivmoddi4+0xa6>
 80009ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80009d2:	f1c2 0320 	rsb	r3, r2, #32
 80009d6:	40d9      	lsrs	r1, r3
 80009d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009dc:	fa20 f303 	lsr.w	r3, r0, r3
 80009e0:	fa00 fe02 	lsl.w	lr, r0, r2
 80009e4:	fbb1 f0f8 	udiv	r0, r1, r8
 80009e8:	fb08 1110 	mls	r1, r8, r0, r1
 80009ec:	4094      	lsls	r4, r2
 80009ee:	431c      	orrs	r4, r3
 80009f0:	fa1f f78c 	uxth.w	r7, ip
 80009f4:	0c23      	lsrs	r3, r4, #16
 80009f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009fa:	fb00 f107 	mul.w	r1, r0, r7
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x248>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a0a:	d22c      	bcs.n	8000a66 <__udivmoddi4+0x29a>
 8000a0c:	4299      	cmp	r1, r3
 8000a0e:	d92a      	bls.n	8000a66 <__udivmoddi4+0x29a>
 8000a10:	3802      	subs	r0, #2
 8000a12:	4463      	add	r3, ip
 8000a14:	1a5b      	subs	r3, r3, r1
 8000a16:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a1a:	fb08 3311 	mls	r3, r8, r1, r3
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a24:	fb01 f307 	mul.w	r3, r1, r7
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x272>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a34:	d213      	bcs.n	8000a5e <__udivmoddi4+0x292>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d911      	bls.n	8000a5e <__udivmoddi4+0x292>
 8000a3a:	3902      	subs	r1, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	1ae4      	subs	r4, r4, r3
 8000a40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a44:	e73b      	b.n	80008be <__udivmoddi4+0xf2>
 8000a46:	4604      	mov	r4, r0
 8000a48:	e6f2      	b.n	8000830 <__udivmoddi4+0x64>
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	e708      	b.n	8000860 <__udivmoddi4+0x94>
 8000a4e:	45c2      	cmp	sl, r8
 8000a50:	d2af      	bcs.n	80009b2 <__udivmoddi4+0x1e6>
 8000a52:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a56:	eb63 060c 	sbc.w	r6, r3, ip
 8000a5a:	3801      	subs	r0, #1
 8000a5c:	e7a9      	b.n	80009b2 <__udivmoddi4+0x1e6>
 8000a5e:	4631      	mov	r1, r6
 8000a60:	e7ed      	b.n	8000a3e <__udivmoddi4+0x272>
 8000a62:	4603      	mov	r3, r0
 8000a64:	e79a      	b.n	800099c <__udivmoddi4+0x1d0>
 8000a66:	4630      	mov	r0, r6
 8000a68:	e7d4      	b.n	8000a14 <__udivmoddi4+0x248>
 8000a6a:	46b0      	mov	r8, r6
 8000a6c:	e781      	b.n	8000972 <__udivmoddi4+0x1a6>
 8000a6e:	4463      	add	r3, ip
 8000a70:	3802      	subs	r0, #2
 8000a72:	e74f      	b.n	8000914 <__udivmoddi4+0x148>
 8000a74:	4606      	mov	r6, r0
 8000a76:	4623      	mov	r3, r4
 8000a78:	4608      	mov	r0, r1
 8000a7a:	e711      	b.n	80008a0 <__udivmoddi4+0xd4>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	e732      	b.n	80008e8 <__udivmoddi4+0x11c>
 8000a82:	bf00      	nop

08000a84 <__aeabi_idiv0>:
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <Uart1Queue_Initialize>:
		(* data_p) = 0;
	}
}

void Uart1Queue_Initialize(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	u1_rx_point_head = u1_rx_point_tail = 0;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <Uart1Queue_Initialize+0x1c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <Uart1Queue_Initialize+0x1c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <Uart1Queue_Initialize+0x20>)
 8000a98:	6013      	str	r3, [r2, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000088 	.word	0x20000088
 8000aa8:	20000084 	.word	0x20000084

08000aac <uart_putc>:


void uart_putc(uint8_t dat, UART_HandleTypeDef *huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(huart, &dat, sizeof(dat), 1);
 8000ab8:	1df9      	adds	r1, r7, #7
 8000aba:	2301      	movs	r3, #1
 8000abc:	2201      	movs	r2, #1
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	f007 fa9e 	bl	8008000 <HAL_UART_Transmit>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <usart_console>:
    usart_console(Uart1_DeQueue());
  }
}

void usart_console(uint8_t data)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	unsigned char i=0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	77fb      	strb	r3, [r7, #31]
	char *ptr = NULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]

	if((data == 0x08) && (inpd_len > 0)) {
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b08      	cmp	r3, #8
 8000ae2:	d11c      	bne.n	8000b1e <usart_console+0x52>
 8000ae4:	4b6e      	ldr	r3, [pc, #440]	@ (8000ca0 <usart_console+0x1d4>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d018      	beq.n	8000b1e <usart_console+0x52>
		uart_putc(0x08, &huart1);	//backspace
 8000aec:	496d      	ldr	r1, [pc, #436]	@ (8000ca4 <usart_console+0x1d8>)
 8000aee:	2008      	movs	r0, #8
 8000af0:	f7ff ffdc 	bl	8000aac <uart_putc>
		uart_putc(0x20, &huart1);	//space
 8000af4:	496b      	ldr	r1, [pc, #428]	@ (8000ca4 <usart_console+0x1d8>)
 8000af6:	2020      	movs	r0, #32
 8000af8:	f7ff ffd8 	bl	8000aac <uart_putc>
		uart_putc(0x08, &huart1);	//backspace
 8000afc:	4969      	ldr	r1, [pc, #420]	@ (8000ca4 <usart_console+0x1d8>)
 8000afe:	2008      	movs	r0, #8
 8000b00:	f7ff ffd4 	bl	8000aac <uart_putc>
		inpd_len= inpd_len -1;
 8000b04:	4b66      	ldr	r3, [pc, #408]	@ (8000ca0 <usart_console+0x1d4>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b64      	ldr	r3, [pc, #400]	@ (8000ca0 <usart_console+0x1d4>)
 8000b0e:	701a      	strb	r2, [r3, #0]
		inpd[inpd_len] = '\0';
 8000b10:	4b63      	ldr	r3, [pc, #396]	@ (8000ca0 <usart_console+0x1d4>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b64      	ldr	r3, [pc, #400]	@ (8000ca8 <usart_console+0x1dc>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	5499      	strb	r1, [r3, r2]
		return;
 8000b1c:	e0bc      	b.n	8000c98 <usart_console+0x1cc>
	}
	else if(data != 0x08) {
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	d004      	beq.n	8000b2e <usart_console+0x62>
		uart_putc(data, &huart1);
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	495f      	ldr	r1, [pc, #380]	@ (8000ca4 <usart_console+0x1d8>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ffbf 	bl	8000aac <uart_putc>
	}
	if(data == 0x0d)	//receive enter
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b0d      	cmp	r3, #13
 8000b32:	f040 80a4 	bne.w	8000c7e <usart_console+0x1b2>
	{
		ptr = strtok(inpd," ");
 8000b36:	495d      	ldr	r1, [pc, #372]	@ (8000cac <usart_console+0x1e0>)
 8000b38:	485b      	ldr	r0, [pc, #364]	@ (8000ca8 <usart_console+0x1dc>)
 8000b3a:	f008 fbb7 	bl	80092ac <strtok>
 8000b3e:	61b8      	str	r0, [r7, #24]
		if(!strcmp(inpd, "help")) {
 8000b40:	495b      	ldr	r1, [pc, #364]	@ (8000cb0 <usart_console+0x1e4>)
 8000b42:	4859      	ldr	r0, [pc, #356]	@ (8000ca8 <usart_console+0x1dc>)
 8000b44:	f7ff fb1a 	bl	800017c <strcmp>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d106      	bne.n	8000b5c <usart_console+0x90>
			printf("Supported Commands: \r\n");
 8000b4e:	4859      	ldr	r0, [pc, #356]	@ (8000cb4 <usart_console+0x1e8>)
 8000b50:	f008 fac4 	bl	80090dc <puts>
			printf("help\r\n\
 8000b54:	4858      	ldr	r0, [pc, #352]	@ (8000cb8 <usart_console+0x1ec>)
 8000b56:	f008 fac1 	bl	80090dc <puts>
 8000b5a:	e07c      	b.n	8000c56 <usart_console+0x18a>
			<light> <value:0 to 100>\r\n\
			<version>\r\n\
			<clock>\r\n\
			<reset>\r\n");
		}
		else if(inpd_len < 1) {
 8000b5c:	4b50      	ldr	r3, [pc, #320]	@ (8000ca0 <usart_console+0x1d4>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d110      	bne.n	8000b86 <usart_console+0xba>
			for(i=0;i<sizeof(inpd_len);i++) inpd[i] = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	77fb      	strb	r3, [r7, #31]
 8000b68:	e006      	b.n	8000b78 <usart_console+0xac>
 8000b6a:	7ffb      	ldrb	r3, [r7, #31]
 8000b6c:	4a4e      	ldr	r2, [pc, #312]	@ (8000ca8 <usart_console+0x1dc>)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	54d1      	strb	r1, [r2, r3]
 8000b72:	7ffb      	ldrb	r3, [r7, #31]
 8000b74:	3301      	adds	r3, #1
 8000b76:	77fb      	strb	r3, [r7, #31]
 8000b78:	7ffb      	ldrb	r3, [r7, #31]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0f5      	beq.n	8000b6a <usart_console+0x9e>
			inpd_len =0;
 8000b7e:	4b48      	ldr	r3, [pc, #288]	@ (8000ca0 <usart_console+0x1d4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	e067      	b.n	8000c56 <usart_console+0x18a>
		}
		else if(!strcmp(inpd, "version")) {
 8000b86:	494d      	ldr	r1, [pc, #308]	@ (8000cbc <usart_console+0x1f0>)
 8000b88:	4847      	ldr	r0, [pc, #284]	@ (8000ca8 <usart_console+0x1dc>)
 8000b8a:	f7ff faf7 	bl	800017c <strcmp>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d105      	bne.n	8000ba0 <usart_console+0xd4>
			printf("\r\nAuther : by Mr.CrazyOh %s %s",  __DATE__, __TIME__);
 8000b94:	4a4a      	ldr	r2, [pc, #296]	@ (8000cc0 <usart_console+0x1f4>)
 8000b96:	494b      	ldr	r1, [pc, #300]	@ (8000cc4 <usart_console+0x1f8>)
 8000b98:	484b      	ldr	r0, [pc, #300]	@ (8000cc8 <usart_console+0x1fc>)
 8000b9a:	f008 fa37 	bl	800900c <iprintf>
 8000b9e:	e05a      	b.n	8000c56 <usart_console+0x18a>
		}
		else if(!strcmp(inpd, "reset")) {
 8000ba0:	494a      	ldr	r1, [pc, #296]	@ (8000ccc <usart_console+0x200>)
 8000ba2:	4841      	ldr	r0, [pc, #260]	@ (8000ca8 <usart_console+0x1dc>)
 8000ba4:	f7ff faea 	bl	800017c <strcmp>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <usart_console+0xe8>
			HAL_NVIC_SystemReset();
 8000bae:	f001 fe3d 	bl	800282c <HAL_NVIC_SystemReset>
 8000bb2:	e050      	b.n	8000c56 <usart_console+0x18a>
		}
		else if(!strcmp(inpd, "clock")) {
 8000bb4:	4946      	ldr	r1, [pc, #280]	@ (8000cd0 <usart_console+0x204>)
 8000bb6:	483c      	ldr	r0, [pc, #240]	@ (8000ca8 <usart_console+0x1dc>)
 8000bb8:	f7ff fae0 	bl	800017c <strcmp>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <usart_console+0xfc>
			print_SystemClock();
 8000bc2:	f000 fc19 	bl	80013f8 <print_SystemClock>
 8000bc6:	e046      	b.n	8000c56 <usart_console+0x18a>
		}
		else if(!strcmp(inpd, "door")) {
 8000bc8:	4942      	ldr	r1, [pc, #264]	@ (8000cd4 <usart_console+0x208>)
 8000bca:	4837      	ldr	r0, [pc, #220]	@ (8000ca8 <usart_console+0x1dc>)
 8000bcc:	f7ff fad6 	bl	800017c <strcmp>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d110      	bne.n	8000bf8 <usart_console+0x12c>
			uint8_t gate_open_packet[11] = {0x02, 0x31, 0x30, 0x31, 0x32, 0x34, 0x35, 0x33, 0x37, 0x03, 0x36};
 8000bd6:	4a40      	ldr	r2, [pc, #256]	@ (8000cd8 <usart_console+0x20c>)
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bde:	c303      	stmia	r3!, {r0, r1}
 8000be0:	801a      	strh	r2, [r3, #0]
 8000be2:	3302      	adds	r3, #2
 8000be4:	0c12      	lsrs	r2, r2, #16
 8000be6:	701a      	strb	r2, [r3, #0]
        	uart_tx(&huart3, 11, gate_open_packet);
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	461a      	mov	r2, r3
 8000bee:	210b      	movs	r1, #11
 8000bf0:	483a      	ldr	r0, [pc, #232]	@ (8000cdc <usart_console+0x210>)
 8000bf2:	f001 f90b 	bl	8001e0c <uart_tx>
 8000bf6:	e02e      	b.n	8000c56 <usart_console+0x18a>
		}
		else if(!strcmp(inpd, "light")) {
 8000bf8:	4939      	ldr	r1, [pc, #228]	@ (8000ce0 <usart_console+0x214>)
 8000bfa:	482b      	ldr	r0, [pc, #172]	@ (8000ca8 <usart_console+0x1dc>)
 8000bfc:	f7ff fabe 	bl	800017c <strcmp>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d116      	bne.n	8000c34 <usart_console+0x168>
			ptr = strtok(NULL, " ");
 8000c06:	4929      	ldr	r1, [pc, #164]	@ (8000cac <usart_console+0x1e0>)
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f008 fb4f 	bl	80092ac <strtok>
 8000c0e:	61b8      	str	r0, [r7, #24]
			int dimmer = atoi(ptr);
 8000c10:	69b8      	ldr	r0, [r7, #24]
 8000c12:	f008 f8b1 	bl	8008d78 <atoi>
 8000c16:	6178      	str	r0, [r7, #20]
			if(dimmer != 0) {
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <usart_console+0x15a>
				SetLightBright(dimmer);
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f000 fc0a 	bl	8001438 <SetLightBright>
 8000c24:	e017      	b.n	8000c56 <usart_console+0x18a>
			}
			else {
				printf("Invalid command\r\n");
 8000c26:	482f      	ldr	r0, [pc, #188]	@ (8000ce4 <usart_console+0x218>)
 8000c28:	f008 fa58 	bl	80090dc <puts>
				SetLightBright(0);
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f000 fc03 	bl	8001438 <SetLightBright>
 8000c32:	e010      	b.n	8000c56 <usart_console+0x18a>
			}
		}
		else if(!strcmp(inpd, "temp")) {
 8000c34:	492c      	ldr	r1, [pc, #176]	@ (8000ce8 <usart_console+0x21c>)
 8000c36:	481c      	ldr	r0, [pc, #112]	@ (8000ca8 <usart_console+0x1dc>)
 8000c38:	f7ff faa0 	bl	800017c <strcmp>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d106      	bne.n	8000c50 <usart_console+0x184>
			printf("\r\nTemperature : %d C", prevTemperatureLevel);
 8000c42:	4b2a      	ldr	r3, [pc, #168]	@ (8000cec <usart_console+0x220>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4619      	mov	r1, r3
 8000c48:	4829      	ldr	r0, [pc, #164]	@ (8000cf0 <usart_console+0x224>)
 8000c4a:	f008 f9df 	bl	800900c <iprintf>
 8000c4e:	e002      	b.n	8000c56 <usart_console+0x18a>
		}
		else {
			printf("Invalid command\r\n");
 8000c50:	4824      	ldr	r0, [pc, #144]	@ (8000ce4 <usart_console+0x218>)
 8000c52:	f008 fa43 	bl	80090dc <puts>
		}

		for(i=0;i<sizeof(inpd);i++)   inpd[i] = '\0';
 8000c56:	2300      	movs	r3, #0
 8000c58:	77fb      	strb	r3, [r7, #31]
 8000c5a:	e006      	b.n	8000c6a <usart_console+0x19e>
 8000c5c:	7ffb      	ldrb	r3, [r7, #31]
 8000c5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <usart_console+0x1dc>)
 8000c60:	2100      	movs	r1, #0
 8000c62:	54d1      	strb	r1, [r2, r3]
 8000c64:	7ffb      	ldrb	r3, [r7, #31]
 8000c66:	3301      	adds	r3, #1
 8000c68:	77fb      	strb	r3, [r7, #31]
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	2b31      	cmp	r3, #49	@ 0x31
 8000c6e:	d9f5      	bls.n	8000c5c <usart_console+0x190>
		inpd_len =0;
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <usart_console+0x1d4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
		printf("\r\nbnct>> ");
 8000c76:	481f      	ldr	r0, [pc, #124]	@ (8000cf4 <usart_console+0x228>)
 8000c78:	f008 f9c8 	bl	800900c <iprintf>
 8000c7c:	e00c      	b.n	8000c98 <usart_console+0x1cc>
	}
	else {
		if(data != 0x08) {
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	d009      	beq.n	8000c98 <usart_console+0x1cc>
			inpd[inpd_len++] = data;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <usart_console+0x1d4>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	1c5a      	adds	r2, r3, #1
 8000c8a:	b2d1      	uxtb	r1, r2
 8000c8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ca0 <usart_console+0x1d4>)
 8000c8e:	7011      	strb	r1, [r2, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4a05      	ldr	r2, [pc, #20]	@ (8000ca8 <usart_console+0x1dc>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	5453      	strb	r3, [r2, r1]
		}
	}
}
 8000c98:	3720      	adds	r7, #32
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000008c 	.word	0x2000008c
 8000ca4:	2000022c 	.word	0x2000022c
 8000ca8:	20000090 	.word	0x20000090
 8000cac:	08009f90 	.word	0x08009f90
 8000cb0:	08009f94 	.word	0x08009f94
 8000cb4:	08009f9c 	.word	0x08009f9c
 8000cb8:	08009fb4 	.word	0x08009fb4
 8000cbc:	0800a000 	.word	0x0800a000
 8000cc0:	0800a008 	.word	0x0800a008
 8000cc4:	0800a014 	.word	0x0800a014
 8000cc8:	0800a020 	.word	0x0800a020
 8000ccc:	0800a040 	.word	0x0800a040
 8000cd0:	0800a048 	.word	0x0800a048
 8000cd4:	0800a050 	.word	0x0800a050
 8000cd8:	0800a0a0 	.word	0x0800a0a0
 8000cdc:	200002bc 	.word	0x200002bc
 8000ce0:	0800a058 	.word	0x0800a058
 8000ce4:	0800a060 	.word	0x0800a060
 8000ce8:	0800a074 	.word	0x0800a074
 8000cec:	200001a8 	.word	0x200001a8
 8000cf0:	0800a07c 	.word	0x0800a07c
 8000cf4:	0800a094 	.word	0x0800a094

08000cf8 <_write>:

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  if(HAL_UART_Transmit(&huart1, ptr, len, 10) == HAL_OK) return len;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	230a      	movs	r3, #10
 8000d0a:	68b9      	ldr	r1, [r7, #8]
 8000d0c:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <_write+0x30>)
 8000d0e:	f007 f977 	bl	8008000 <HAL_UART_Transmit>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d101      	bne.n	8000d1c <_write+0x24>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	e000      	b.n	8000d1e <_write+0x26>
  else return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000022c 	.word	0x2000022c

08000d2c <HAL_I2C_Temperature_PCT2075_Read>:
static void MX_TIM3_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
static HAL_StatusTypeDef HAL_I2C_Temperature_PCT2075_Read(uint16_t MemAddress, uint8_t * pData, uint16_t Size, uint32_t Timeout) 
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af04      	add	r7, sp, #16
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4603      	mov	r3, r0
 8000d38:	81fb      	strh	r3, [r7, #14]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	81bb      	strh	r3, [r7, #12]
    return HAL_I2C_Mem_Read(&hi2c1, (uint16_t)I2C_SLAVE_ADDRESS__THERMISTOR_PCT2075, MemAddress, (uint16_t)I2C_MEMADD_SIZE_8BIT, pData, Size, Timeout);
 8000d3e:	89fa      	ldrh	r2, [r7, #14]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	9302      	str	r3, [sp, #8]
 8000d44:	89bb      	ldrh	r3, [r7, #12]
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	2192      	movs	r1, #146	@ 0x92
 8000d50:	4803      	ldr	r0, [pc, #12]	@ (8000d60 <HAL_I2C_Temperature_PCT2075_Read+0x34>)
 8000d52:	f002 fab9 	bl	80032c8 <HAL_I2C_Mem_Read>
 8000d56:	4603      	mov	r3, r0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200000c4 	.word	0x200000c4

08000d64 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN IWDG_Init 1 */
  //lsi : 37Khz
  // 1/37k * 4 * 4096 --> 약 400ms 
  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_IWDG_Init+0x2c>)
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <MX_IWDG_Init+0x30>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <MX_IWDG_Init+0x2c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_IWDG_Init+0x2c>)
 8000d76:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000d7a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <MX_IWDG_Init+0x2c>)
 8000d7e:	f004 fb43 	bl	8005408 <HAL_IWDG_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000d88:	f000 fbe6 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000198 	.word	0x20000198
 8000d94:	40003000 	.word	0x40003000

08000d98 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == htim2.Instance) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b32      	ldr	r3, [pc, #200]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d15c      	bne.n	8000e66 <HAL_TIM_PeriodElapsedCallback+0xce>
    //printf("\r\ntesttest\r\n");
    g_1ms_flag =1;
 8000dac:	4b31      	ldr	r3, [pc, #196]	@ (8000e74 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
		g_2ms_cnt++;
 8000db2:	4b31      	ldr	r3, [pc, #196]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a2f      	ldr	r2, [pc, #188]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000dba:	6013      	str	r3, [r2, #0]
		if(g_2ms_cnt >= 2)  {
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d90a      	bls.n	8000dda <HAL_TIM_PeriodElapsedCallback+0x42>
			g_2ms_flag = 1;
 8000dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e7c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
			g_10ms_cnt++;
 8000dca:	4b2d      	ldr	r3, [pc, #180]	@ (8000e80 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e80 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000dd2:	6013      	str	r3, [r2, #0]
			g_2ms_cnt =0;
 8000dd4:	4b28      	ldr	r3, [pc, #160]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
		}
		if(g_10ms_cnt >= 5)	{
 8000dda:	4b29      	ldr	r3, [pc, #164]	@ (8000e80 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	d90a      	bls.n	8000df8 <HAL_TIM_PeriodElapsedCallback+0x60>
			g_50ms_cnt++;
 8000de2:	4b28      	ldr	r3, [pc, #160]	@ (8000e84 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a26      	ldr	r2, [pc, #152]	@ (8000e84 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000dea:	6013      	str	r3, [r2, #0]
			g_10ms_flag =1;
 8000dec:	4b26      	ldr	r3, [pc, #152]	@ (8000e88 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
			g_10ms_cnt =0;
 8000df2:	4b23      	ldr	r3, [pc, #140]	@ (8000e80 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
		}
		if(g_50ms_cnt >= 5) {
 8000df8:	4b22      	ldr	r3, [pc, #136]	@ (8000e84 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	d90a      	bls.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0x7e>
			g_100ms_cnt++;
 8000e00:	4b22      	ldr	r3, [pc, #136]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	4a21      	ldr	r2, [pc, #132]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000e08:	6013      	str	r3, [r2, #0]
			g_50ms_flag =1;
 8000e0a:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
			g_50ms_cnt =0;		
 8000e10:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
		}
		if(g_100ms_cnt >= 2) {
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d90a      	bls.n	8000e34 <HAL_TIM_PeriodElapsedCallback+0x9c>
			g_500ms_cnt++;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	4a1b      	ldr	r2, [pc, #108]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e26:	6013      	str	r3, [r2, #0]
			g_100ms_flag =1;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
			g_100ms_cnt =0;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
		}
    if(g_500ms_cnt >= 5) {
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d90a      	bls.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0xba>
      g_1sec_cnt++;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a16      	ldr	r2, [pc, #88]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e44:	6013      	str	r3, [r2, #0]
      g_500ms_flag =1;
 8000e46:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
      g_500ms_cnt =0;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
    }
		if(g_1sec_cnt >= 2) {
 8000e52:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d905      	bls.n	8000e66 <HAL_TIM_PeriodElapsedCallback+0xce>
			g_1sec_flag =1;
 8000e5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
			g_1sec_cnt =0;
 8000e60:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
		}		
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	20000118 	.word	0x20000118
 8000e74:	200001ae 	.word	0x200001ae
 8000e78:	200001b0 	.word	0x200001b0
 8000e7c:	200001b4 	.word	0x200001b4
 8000e80:	200001b8 	.word	0x200001b8
 8000e84:	200001c0 	.word	0x200001c0
 8000e88:	200001bc 	.word	0x200001bc
 8000e8c:	200001c8 	.word	0x200001c8
 8000e90:	200001c4 	.word	0x200001c4
 8000e94:	200001d0 	.word	0x200001d0
 8000e98:	200001cc 	.word	0x200001cc
 8000e9c:	200001d8 	.word	0x200001d8
 8000ea0:	200001d4 	.word	0x200001d4
 8000ea4:	200001dc 	.word	0x200001dc

08000ea8 <StatusLED>:

void StatusLED(uint8_t mode)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	LED_Mode++;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <StatusLED+0x80>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <StatusLED+0x80>)
 8000ebc:	701a      	strb	r2, [r3, #0]
	if(mode == 1) {
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10a      	bne.n	8000eda <StatusLED+0x32>
		LED_Data = 0x80;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <StatusLED+0x84>)
 8000ec6:	2280      	movs	r2, #128	@ 0x80
 8000ec8:	701a      	strb	r2, [r3, #0]
		LED_Mode &= 0x07;
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <StatusLED+0x80>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <StatusLED+0x80>)
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e00c      	b.n	8000ef4 <StatusLED+0x4c>
	}
	else if (mode == 2) {
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d109      	bne.n	8000ef4 <StatusLED+0x4c>
		LED_Data = 0xA0;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <StatusLED+0x84>)
 8000ee2:	22a0      	movs	r2, #160	@ 0xa0
 8000ee4:	701a      	strb	r2, [r3, #0]
		LED_Mode &= 0x07;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <StatusLED+0x80>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f28 <StatusLED+0x80>)
 8000ef2:	701a      	strb	r2, [r3, #0]
	}
	
	if (LED_Data & (0x80 >> LED_Mode))	HAL_GPIO_WritePin(SYS_LED_GPIO_Port, SYS_LED_Pin, GPIO_PIN_SET);
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <StatusLED+0x84>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <StatusLED+0x80>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	4619      	mov	r1, r3
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	410b      	asrs	r3, r1
 8000f04:	4013      	ands	r3, r2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d005      	beq.n	8000f16 <StatusLED+0x6e>
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4808      	ldr	r0, [pc, #32]	@ (8000f30 <StatusLED+0x88>)
 8000f10:	f001 ffb6 	bl	8002e80 <HAL_GPIO_WritePin>
	else								                HAL_GPIO_WritePin(SYS_LED_GPIO_Port, SYS_LED_Pin, GPIO_PIN_RESET);
}
 8000f14:	e004      	b.n	8000f20 <StatusLED+0x78>
	else								                HAL_GPIO_WritePin(SYS_LED_GPIO_Port, SYS_LED_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2101      	movs	r1, #1
 8000f1a:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <StatusLED+0x88>)
 8000f1c:	f001 ffb0 	bl	8002e80 <HAL_GPIO_WritePin>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200001ac 	.word	0x200001ac
 8000f2c:	200001ad 	.word	0x200001ad
 8000f30:	40020400 	.word	0x40020400

08000f34 <compare_sensor>:

uint8_t prev_sensor =0;
uint8_t curr_sensor =0;

uint8_t compare_sensor(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  curr_sensor = HAL_GPIO_ReadPin(PIR_SENSOR_Port, PIR_SENSOR);
 8000f38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f3c:	4811      	ldr	r0, [pc, #68]	@ (8000f84 <compare_sensor+0x50>)
 8000f3e:	f001 ff7f 	bl	8002e40 <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <compare_sensor+0x54>)
 8000f48:	701a      	strb	r2, [r3, #0]
  if(prev_sensor != curr_sensor) {
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <compare_sensor+0x58>)
 8000f4c:	781a      	ldrb	r2, [r3, #0]
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <compare_sensor+0x54>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d013      	beq.n	8000f7e <compare_sensor+0x4a>
    if(curr_sensor) {
 8000f56:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <compare_sensor+0x54>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <compare_sensor+0x32>
      printf("\r\ndetected sensor");
 8000f5e:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <compare_sensor+0x5c>)
 8000f60:	f008 f854 	bl	800900c <iprintf>
 8000f64:	e002      	b.n	8000f6c <compare_sensor+0x38>
    }
    else {
      printf("\r\nrelease sensor");
 8000f66:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <compare_sensor+0x60>)
 8000f68:	f008 f850 	bl	800900c <iprintf>
    }
    event_comm_detect_sensor(curr_sensor);
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <compare_sensor+0x54>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 f8cd 	bl	8002110 <event_comm_detect_sensor>
    prev_sensor = curr_sensor;
 8000f76:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <compare_sensor+0x54>)
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <compare_sensor+0x58>)
 8000f7c:	701a      	strb	r2, [r3, #0]
  }
  return 0;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40020400 	.word	0x40020400
 8000f88:	200001de 	.word	0x200001de
 8000f8c:	200001dd 	.word	0x200001dd
 8000f90:	0800a0c8 	.word	0x0800a0c8
 8000f94:	0800a0dc 	.word	0x0800a0dc

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f001 fa91 	bl	80024c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f882 	bl	80010a8 <SystemClock_Config>
  //USART2 :  
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa4:	f000 f9b6 	bl	8001314 <MX_GPIO_Init>
  //MX_USB_PCD_Init();
  MX_TIM3_Init();
 8000fa8:	f000 f940 	bl	800122c <MX_TIM3_Init>
  MX_I2C1_Init();
 8000fac:	f000 f8c4 	bl	8001138 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000fb0:	f000 f8f0 	bl	8001194 <MX_TIM2_Init>
  MX_UART4_Init();
 8000fb4:	f000 ffbc 	bl	8001f30 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000fb8:	f000 ffe4 	bl	8001f84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fbc:	f001 f80c 	bl	8001fd8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000fc0:	f001 f834 	bl	800202c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  usart_queue_init();
 8000fc4:	f000 fe04 	bl	8001bd0 <usart_queue_init>
  printf("\r\nusart1 initial done.");
 8000fc8:	4826      	ldr	r0, [pc, #152]	@ (8001064 <main+0xcc>)
 8000fca:	f008 f81f 	bl	800900c <iprintf>
  printf("\r\nusart2 initial done.");
 8000fce:	4826      	ldr	r0, [pc, #152]	@ (8001068 <main+0xd0>)
 8000fd0:	f008 f81c 	bl	800900c <iprintf>
  printf("\r\nusart3 initial done.");
 8000fd4:	4825      	ldr	r0, [pc, #148]	@ (800106c <main+0xd4>)
 8000fd6:	f008 f819 	bl	800900c <iprintf>
  printf("\r\nsoftware started.");
 8000fda:	4825      	ldr	r0, [pc, #148]	@ (8001070 <main+0xd8>)
 8000fdc:	f008 f816 	bl	800900c <iprintf>
  print_SystemClock();
 8000fe0:	f000 fa0a 	bl	80013f8 <print_SystemClock>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4823      	ldr	r0, [pc, #140]	@ (8001074 <main+0xdc>)
 8000fe8:	f005 fd8e 	bl	8006b08 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fec:	4822      	ldr	r0, [pc, #136]	@ (8001078 <main+0xe0>)
 8000fee:	f005 fc11 	bl	8006814 <HAL_TIM_Base_Start_IT>
  MX_IWDG_Init();
 8000ff2:	f7ff feb7 	bl	8000d64 <MX_IWDG_Init>
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4920      	ldr	r1, [pc, #128]	@ (800107c <main+0xe4>)
 8000ffa:	4821      	ldr	r0, [pc, #132]	@ (8001080 <main+0xe8>)
 8000ffc:	f007 f883 	bl	8008106 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &host_rx_data, 1);
 8001000:	2201      	movs	r2, #1
 8001002:	4920      	ldr	r1, [pc, #128]	@ (8001084 <main+0xec>)
 8001004:	4820      	ldr	r0, [pc, #128]	@ (8001088 <main+0xf0>)
 8001006:	f007 f87e 	bl	8008106 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &rfid_rx_data, 1);
 800100a:	2201      	movs	r2, #1
 800100c:	491f      	ldr	r1, [pc, #124]	@ (800108c <main+0xf4>)
 800100e:	4820      	ldr	r0, [pc, #128]	@ (8001090 <main+0xf8>)
 8001010:	f007 f879 	bl	8008106 <HAL_UART_Receive_IT>
  MX_IWDG_Init();
 8001014:	f7ff fea6 	bl	8000d64 <MX_IWDG_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    read_usart();
 8001018:	f001 f9b4 	bl	8002384 <read_usart>
    if(g_100ms_flag) {
 800101c:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <main+0xfc>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d008      	beq.n	8001036 <main+0x9e>
      StatusLED(2);
 8001024:	2002      	movs	r0, #2
 8001026:	f7ff ff3f 	bl	8000ea8 <StatusLED>
      HAL_IWDG_Refresh(&hiwdg);
 800102a:	481b      	ldr	r0, [pc, #108]	@ (8001098 <main+0x100>)
 800102c:	f004 fa64 	bl	80054f8 <HAL_IWDG_Refresh>
      g_100ms_flag =0;
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <main+0xfc>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
    }
    if (g_500ms_flag) {
 8001036:	4b19      	ldr	r3, [pc, #100]	@ (800109c <main+0x104>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d004      	beq.n	8001048 <main+0xb0>
      g_500ms_flag =0;
 800103e:	4b17      	ldr	r3, [pc, #92]	@ (800109c <main+0x104>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
      compare_sensor();
 8001044:	f7ff ff76 	bl	8000f34 <compare_sensor>
    }
    if(g_1sec_flag) {
 8001048:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <main+0x108>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0e3      	beq.n	8001018 <main+0x80>
      EnvacIO.temperature = GetThermistorLevel();
 8001050:	f000 fa1a 	bl	8001488 <GetThermistorLevel>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <main+0x10c>)
 800105a:	605a      	str	r2, [r3, #4]
      g_1sec_flag =0;
 800105c:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <main+0x108>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
    read_usart();
 8001062:	e7d9      	b.n	8001018 <main+0x80>
 8001064:	0800a0f0 	.word	0x0800a0f0
 8001068:	0800a108 	.word	0x0800a108
 800106c:	0800a120 	.word	0x0800a120
 8001070:	0800a138 	.word	0x0800a138
 8001074:	20000158 	.word	0x20000158
 8001078:	20000118 	.word	0x20000118
 800107c:	200001a4 	.word	0x200001a4
 8001080:	2000022c 	.word	0x2000022c
 8001084:	200001a5 	.word	0x200001a5
 8001088:	20000274 	.word	0x20000274
 800108c:	200001a6 	.word	0x200001a6
 8001090:	200001e4 	.word	0x200001e4
 8001094:	200001cc 	.word	0x200001cc
 8001098:	20000198 	.word	0x20000198
 800109c:	200001d4 	.word	0x200001d4
 80010a0:	200001dc 	.word	0x200001dc
 80010a4:	20000d1c 	.word	0x20000d1c

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b092      	sub	sp, #72	@ 0x48
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2234      	movs	r2, #52	@ 0x34
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f008 f8f0 	bl	800929c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	463b      	mov	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <SystemClock_Config+0x8c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80010d2:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <SystemClock_Config+0x8c>)
 80010d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010d8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010da:	230a      	movs	r3, #10
 80010dc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010de:	2301      	movs	r3, #1
 80010e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e2:	2310      	movs	r3, #16
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010e6:	2301      	movs	r3, #1
 80010e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4618      	mov	r0, r3
 80010f4:	f004 fade 	bl	80056b4 <HAL_RCC_OscConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80010fe:	f000 fa2b 	bl	8001558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	230f      	movs	r3, #15
 8001104:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001106:	2301      	movs	r3, #1
 8001108:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f004 ff4a 	bl	8005fb4 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001126:	f000 fa17 	bl	8001558 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3748      	adds	r7, #72	@ 0x48
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40007000 	.word	0x40007000

08001138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <MX_I2C1_Init+0x54>)
 800113e:	4a14      	ldr	r2, [pc, #80]	@ (8001190 <MX_I2C1_Init+0x58>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8001142:	4b12      	ldr	r3, [pc, #72]	@ (800118c <MX_I2C1_Init+0x54>)
 8001144:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001148:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <MX_I2C1_Init+0x54>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001150:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <MX_I2C1_Init+0x54>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001156:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <MX_I2C1_Init+0x54>)
 8001158:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800115c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <MX_I2C1_Init+0x54>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001164:	4b09      	ldr	r3, [pc, #36]	@ (800118c <MX_I2C1_Init+0x54>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116a:	4b08      	ldr	r3, [pc, #32]	@ (800118c <MX_I2C1_Init+0x54>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <MX_I2C1_Init+0x54>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_I2C1_Init+0x54>)
 8001178:	f001 fed0 	bl	8002f1c <HAL_I2C_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001182:	f000 f9e9 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200000c4 	.word	0x200000c4
 8001190:	40005400 	.word	0x40005400

08001194 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <MX_TIM2_Init+0x94>)
 80011b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <MX_TIM2_Init+0x94>)
 80011ba:	2210      	movs	r2, #16
 80011bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <MX_TIM2_Init+0x94>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80011c4:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <MX_TIM2_Init+0x94>)
 80011c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011cc:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <MX_TIM2_Init+0x94>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <MX_TIM2_Init+0x94>)
 80011d4:	2280      	movs	r2, #128	@ 0x80
 80011d6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011d8:	4813      	ldr	r0, [pc, #76]	@ (8001228 <MX_TIM2_Init+0x94>)
 80011da:	f005 fa3b 	bl	8006654 <HAL_TIM_Base_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011e4:	f000 f9b8 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4619      	mov	r1, r3
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <MX_TIM2_Init+0x94>)
 80011f6:	f005 fff1 	bl	80071dc <HAL_TIM_ConfigClockSource>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001200:	f000 f9aa 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_TIM2_Init+0x94>)
 8001212:	f006 fd71 	bl	8007cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800121c:	f000 f99c 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000118 	.word	0x20000118

0800122c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	@ 0x28
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0318 	add.w	r3, r7, #24
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124a:	463b      	mov	r3, r7
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001256:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <MX_TIM3_Init+0xe0>)
 8001258:	4a2d      	ldr	r2, [pc, #180]	@ (8001310 <MX_TIM3_Init+0xe4>)
 800125a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 800125c:	4b2b      	ldr	r3, [pc, #172]	@ (800130c <MX_TIM3_Init+0xe0>)
 800125e:	2210      	movs	r2, #16
 8001260:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <MX_TIM3_Init+0xe0>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001268:	4b28      	ldr	r3, [pc, #160]	@ (800130c <MX_TIM3_Init+0xe0>)
 800126a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800126e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b26      	ldr	r3, [pc, #152]	@ (800130c <MX_TIM3_Init+0xe0>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001276:	4b25      	ldr	r3, [pc, #148]	@ (800130c <MX_TIM3_Init+0xe0>)
 8001278:	2280      	movs	r2, #128	@ 0x80
 800127a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800127c:	4823      	ldr	r0, [pc, #140]	@ (800130c <MX_TIM3_Init+0xe0>)
 800127e:	f005 f9e9 	bl	8006654 <HAL_TIM_Base_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001288:	f000 f966 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001290:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4619      	mov	r1, r3
 8001298:	481c      	ldr	r0, [pc, #112]	@ (800130c <MX_TIM3_Init+0xe0>)
 800129a:	f005 ff9f 	bl	80071dc <HAL_TIM_ConfigClockSource>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012a4:	f000 f958 	bl	8001558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012a8:	4818      	ldr	r0, [pc, #96]	@ (800130c <MX_TIM3_Init+0xe0>)
 80012aa:	f005 fb43 	bl	8006934 <HAL_TIM_PWM_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012b4:	f000 f950 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	4811      	ldr	r0, [pc, #68]	@ (800130c <MX_TIM3_Init+0xe0>)
 80012c8:	f006 fd16 	bl	8007cf8 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80012d2:	f000 f941 	bl	8001558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d6:	2360      	movs	r3, #96	@ 0x60
 80012d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	4807      	ldr	r0, [pc, #28]	@ (800130c <MX_TIM3_Init+0xe0>)
 80012ee:	f005 fde9 	bl	8006ec4 <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80012f8:	f000 f92e 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <MX_TIM3_Init+0xe0>)
 80012fe:	f000 fa0f 	bl	8001720 <HAL_TIM_MspPostInit>

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	@ 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000158 	.word	0x20000158
 8001310:	40000400 	.word	0x40000400

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <MX_GPIO_Init+0xdc>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a30      	ldr	r2, [pc, #192]	@ (80013f0 <MX_GPIO_Init+0xdc>)
 8001330:	f043 0320 	orr.w	r3, r3, #32
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	4b2e      	ldr	r3, [pc, #184]	@ (80013f0 <MX_GPIO_Init+0xdc>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 0320 	and.w	r3, r3, #32
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b2b      	ldr	r3, [pc, #172]	@ (80013f0 <MX_GPIO_Init+0xdc>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a2a      	ldr	r2, [pc, #168]	@ (80013f0 <MX_GPIO_Init+0xdc>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <MX_GPIO_Init+0xdc>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	4b25      	ldr	r3, [pc, #148]	@ (80013f0 <MX_GPIO_Init+0xdc>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a24      	ldr	r2, [pc, #144]	@ (80013f0 <MX_GPIO_Init+0xdc>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b22      	ldr	r3, [pc, #136]	@ (80013f0 <MX_GPIO_Init+0xdc>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	4b1f      	ldr	r3, [pc, #124]	@ (80013f0 <MX_GPIO_Init+0xdc>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a1e      	ldr	r2, [pc, #120]	@ (80013f0 <MX_GPIO_Init+0xdc>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b1c      	ldr	r3, [pc, #112]	@ (80013f0 <MX_GPIO_Init+0xdc>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800138a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001394:	2302      	movs	r3, #2
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4815      	ldr	r0, [pc, #84]	@ (80013f4 <MX_GPIO_Init+0xe0>)
 80013a0:	f001 fae0 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013a4:	2310      	movs	r3, #16
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	480e      	ldr	r0, [pc, #56]	@ (80013f4 <MX_GPIO_Init+0xe0>)
 80013ba:	f001 fad3 	bl	8002964 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	200a      	movs	r0, #10
 80013c4:	f001 f9ee 	bl	80027a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013c8:	200a      	movs	r0, #10
 80013ca:	f001 fa17 	bl	80027fc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ce:	2301      	movs	r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	4804      	ldr	r0, [pc, #16]	@ (80013f4 <MX_GPIO_Init+0xe0>)
 80013e2:	f001 fabf 	bl	8002964 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	@ 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020400 	.word	0x40020400

080013f8 <print_SystemClock>:

/* USER CODE BEGIN 4 */
void print_SystemClock(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  printf("\r\nHCLK=%luHz", HAL_RCC_GetHCLKFreq());
 80013fc:	f005 f898 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8001400:	4603      	mov	r3, r0
 8001402:	4619      	mov	r1, r3
 8001404:	4809      	ldr	r0, [pc, #36]	@ (800142c <print_SystemClock+0x34>)
 8001406:	f007 fe01 	bl	800900c <iprintf>
  printf("\r\nAPB1=%luHz", HAL_RCC_GetPCLK1Freq());
 800140a:	f005 f89b 	bl	8006544 <HAL_RCC_GetPCLK1Freq>
 800140e:	4603      	mov	r3, r0
 8001410:	4619      	mov	r1, r3
 8001412:	4807      	ldr	r0, [pc, #28]	@ (8001430 <print_SystemClock+0x38>)
 8001414:	f007 fdfa 	bl	800900c <iprintf>
  printf("\r\nAPB2=%luHz", HAL_RCC_GetPCLK2Freq());
 8001418:	f005 f8a8 	bl	800656c <HAL_RCC_GetPCLK2Freq>
 800141c:	4603      	mov	r3, r0
 800141e:	4619      	mov	r1, r3
 8001420:	4804      	ldr	r0, [pc, #16]	@ (8001434 <print_SystemClock+0x3c>)
 8001422:	f007 fdf3 	bl	800900c <iprintf>
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	0800a14c 	.word	0x0800a14c
 8001430:	0800a15c 	.word	0x0800a15c
 8001434:	0800a16c 	.word	0x0800a16c

08001438 <SetLightBright>:
{
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
}

int SetLightBright(int value)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(value < 0 || value > 100) {
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	db02      	blt.n	800144c <SetLightBright+0x14>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b64      	cmp	r3, #100	@ 0x64
 800144a:	dd07      	ble.n	800145c <SetLightBright+0x24>
    EnvacIO.light_bright =0;
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <SetLightBright+0x48>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
    value = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
    return -1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e00c      	b.n	8001476 <SetLightBright+0x3e>
  }
  else {
    EnvacIO.light_bright = value;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <SetLightBright+0x48>)
 8001462:	701a      	strb	r2, [r3, #0]
    TIM3->CCR1 = value*10;
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	461a      	mov	r2, r3
 8001470:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <SetLightBright+0x4c>)
 8001472:	635a      	str	r2, [r3, #52]	@ 0x34
    return 0;
 8001474:	2300      	movs	r3, #0
  }
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000d1c 	.word	0x20000d1c
 8001484:	40000400 	.word	0x40000400

08001488 <GetThermistorLevel>:

int8_t GetThermistorLevel(void) 
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
    int8_t compute;
    uint8_t temperature[THERMISTOR_DATA_SIZE];
    uint16_t temp;

    //DEBUG_FUNC("I2C ERROR"); DEBUG("%d\r\n", state);
    state = HAL_I2C_Temperature_PCT2075_Read(THERMISTOR_ADDRESS_DATA, temperature, THERMISTOR_DATA_SIZE, 500);
 800148e:	4639      	mov	r1, r7
 8001490:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001494:	2202      	movs	r2, #2
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff fc48 	bl	8000d2c <HAL_I2C_Temperature_PCT2075_Read>
 800149c:	4603      	mov	r3, r0
 800149e:	71bb      	strb	r3, [r7, #6]
    if(HAL_OK != state) {
 80014a0:	79bb      	ldrb	r3, [r7, #6]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d008      	beq.n	80014b8 <GetThermistorLevel+0x30>
        printf("\r\nI2C ERROR %d", state);
 80014a6:	79bb      	ldrb	r3, [r7, #6]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4829      	ldr	r0, [pc, #164]	@ (8001550 <GetThermistorLevel+0xc8>)
 80014ac:	f007 fdae 	bl	800900c <iprintf>
        return prevTemperatureLevel;
 80014b0:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <GetThermistorLevel+0xcc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	e047      	b.n	8001548 <GetThermistorLevel+0xc0>
    } else {
        temp = (temperature[0] << 3) | (temperature[1] >> 5);
 80014b8:	783b      	ldrb	r3, [r7, #0]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	b21a      	sxth	r2, r3
 80014be:	787b      	ldrb	r3, [r7, #1]
 80014c0:	095b      	lsrs	r3, r3, #5
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	80bb      	strh	r3, [r7, #4]
        if((temp & 0x400) == 0x400) {
 80014cc:	88bb      	ldrh	r3, [r7, #4]
 80014ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d01f      	beq.n	8001516 <GetThermistorLevel+0x8e>
            temp = (temp ^ 0x07FF) + 1;
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	f483 63ff 	eor.w	r3, r3, #2040	@ 0x7f8
 80014dc:	f083 0307 	eor.w	r3, r3, #7
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	80bb      	strh	r3, [r7, #4]
            compute = (uint8_t)((double)temp * 0.125);
 80014e6:	88bb      	ldrh	r3, [r7, #4]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f8bd 	bl	8000668 <__aeabi_ui2d>
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80014f6:	f7fe fe4b 	bl	8000190 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff f92b 	bl	800075c <__aeabi_d2uiz>
 8001506:	4603      	mov	r3, r0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	71fb      	strb	r3, [r7, #7]
            compute = -compute;
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	425b      	negs	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	e012      	b.n	800153c <GetThermistorLevel+0xb4>
        } else {
            compute = (uint8_t)((double)temp * 0.125);
 8001516:	88bb      	ldrh	r3, [r7, #4]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f8a5 	bl	8000668 <__aeabi_ui2d>
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001526:	f7fe fe33 	bl	8000190 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff f913 	bl	800075c <__aeabi_d2uiz>
 8001536:	4603      	mov	r3, r0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	71fb      	strb	r3, [r7, #7]
        }
        prevTemperatureLevel = compute;
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4a04      	ldr	r2, [pc, #16]	@ (8001554 <GetThermistorLevel+0xcc>)
 8001542:	6013      	str	r3, [r2, #0]
        //printf("\r\nTEMPERATURE LEVEL(%d C)", compute);
    
        return compute;
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
    }
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	0800a17c 	.word	0x0800a17c
 8001554:	200001a8 	.word	0x200001a8

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    HAL_NVIC_SystemReset();
 8001560:	f001 f964 	bl	800282c <HAL_NVIC_SystemReset>
 8001564:	e7fc      	b.n	8001560 <Error_Handler+0x8>
	...

08001568 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
     printf("\r\n****Wrong parameters value: file %s on line %d****\r\n", file, line);
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4804      	ldr	r0, [pc, #16]	@ (8001588 <assert_failed+0x20>)
 8001578:	f007 fd48 	bl	800900c <iprintf>
     HAL_NVIC_SystemReset();
 800157c:	f001 f956 	bl	800282c <HAL_NVIC_SystemReset>
  /* USER CODE END 6 */
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	0800a18c 	.word	0x0800a18c

0800158c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_MspInit+0x78>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	4a18      	ldr	r2, [pc, #96]	@ (8001604 <HAL_MspInit+0x78>)
 80015a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80015a6:	6253      	str	r3, [r2, #36]	@ 0x24
 80015a8:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <HAL_MspInit+0x78>)
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <HAL_MspInit+0x78>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <HAL_MspInit+0x78>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6213      	str	r3, [r2, #32]
 80015c0:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <HAL_MspInit+0x78>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <HAL_MspInit+0x78>)
 80015ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001604 <HAL_MspInit+0x78>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	6253      	str	r3, [r2, #36]	@ 0x24
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <HAL_MspInit+0x78>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_5;
 80015e4:	23a0      	movs	r3, #160	@ 0xa0
 80015e6:	613b      	str	r3, [r7, #16]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 ff91 	bl	8005518 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80015f6:	f004 f843 	bl	8005680 <HAL_PWR_EnablePVD>
  /* USER CODE END MspInit 1 */
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	@ 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1b      	ldr	r2, [pc, #108]	@ (8001694 <HAL_I2C_MspInit+0x8c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d130      	bne.n	800168c <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <HAL_I2C_MspInit+0x90>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4a1a      	ldr	r2, [pc, #104]	@ (8001698 <HAL_I2C_MspInit+0x90>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	61d3      	str	r3, [r2, #28]
 8001636:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <HAL_I2C_MspInit+0x90>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001642:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001648:	2312      	movs	r3, #18
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001654:	2304      	movs	r3, #4
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	480f      	ldr	r0, [pc, #60]	@ (800169c <HAL_I2C_MspInit+0x94>)
 8001660:	f001 f980 	bl	8002964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <HAL_I2C_MspInit+0x90>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	4a0b      	ldr	r2, [pc, #44]	@ (8001698 <HAL_I2C_MspInit+0x90>)
 800166a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800166e:	6253      	str	r3, [r2, #36]	@ 0x24
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <HAL_I2C_MspInit+0x90>)
 8001672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	201f      	movs	r0, #31
 8001682:	f001 f88f 	bl	80027a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001686:	201f      	movs	r0, #31
 8001688:	f001 f8b8 	bl	80027fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	@ 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40005400 	.word	0x40005400
 8001698:	40023800 	.word	0x40023800
 800169c:	40020400 	.word	0x40020400

080016a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016b0:	d114      	bne.n	80016dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HAL_TIM_Base_MspInit+0x78>)
 80016b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b6:	4a18      	ldr	r2, [pc, #96]	@ (8001718 <HAL_TIM_Base_MspInit+0x78>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6253      	str	r3, [r2, #36]	@ 0x24
 80016be:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <HAL_TIM_Base_MspInit+0x78>)
 80016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	201c      	movs	r0, #28
 80016d0:	f001 f868 	bl	80027a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016d4:	201c      	movs	r0, #28
 80016d6:	f001 f891 	bl	80027fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016da:	e018      	b.n	800170e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0e      	ldr	r2, [pc, #56]	@ (800171c <HAL_TIM_Base_MspInit+0x7c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d113      	bne.n	800170e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <HAL_TIM_Base_MspInit+0x78>)
 80016e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001718 <HAL_TIM_Base_MspInit+0x78>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6253      	str	r3, [r2, #36]	@ 0x24
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_TIM_Base_MspInit+0x78>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	201d      	movs	r0, #29
 8001704:	f001 f84e 	bl	80027a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001708:	201d      	movs	r0, #29
 800170a:	f001 f877 	bl	80027fc <HAL_NVIC_EnableIRQ>
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40000400 	.word	0x40000400

08001720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <HAL_TIM_MspPostInit+0x64>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d11b      	bne.n	800177a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <HAL_TIM_MspPostInit+0x68>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a10      	ldr	r2, [pc, #64]	@ (8001788 <HAL_TIM_MspPostInit+0x68>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	61d3      	str	r3, [r2, #28]
 800174e:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <HAL_TIM_MspPostInit+0x68>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800175a:	2340      	movs	r3, #64	@ 0x40
 800175c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800176a:	2302      	movs	r3, #2
 800176c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	@ (800178c <HAL_TIM_MspPostInit+0x6c>)
 8001776:	f001 f8f5 	bl	8002964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40000400 	.word	0x40000400
 8001788:	40023800 	.word	0x40023800
 800178c:	40020000 	.word	0x40020000

08001790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b090      	sub	sp, #64	@ 0x40
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a6d      	ldr	r2, [pc, #436]	@ (8001964 <HAL_UART_MspInit+0x1d4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d131      	bne.n	8001816 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 80017b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017bc:	6253      	str	r3, [r2, #36]	@ 0x24
 80017be:	4b6a      	ldr	r3, [pc, #424]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 80017c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	4b67      	ldr	r3, [pc, #412]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a66      	ldr	r2, [pc, #408]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b64      	ldr	r3, [pc, #400]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017f4:	2308      	movs	r3, #8
 80017f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017fc:	4619      	mov	r1, r3
 80017fe:	485b      	ldr	r0, [pc, #364]	@ (800196c <HAL_UART_MspInit+0x1dc>)
 8001800:	f001 f8b0 	bl	8002964 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	2030      	movs	r0, #48	@ 0x30
 800180a:	f000 ffcb 	bl	80027a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800180e:	2030      	movs	r0, #48	@ 0x30
 8001810:	f000 fff4 	bl	80027fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001814:	e0a1      	b.n	800195a <HAL_UART_MspInit+0x1ca>
  else if(huart->Instance==USART1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a55      	ldr	r2, [pc, #340]	@ (8001970 <HAL_UART_MspInit+0x1e0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d130      	bne.n	8001882 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001820:	4b51      	ldr	r3, [pc, #324]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4a50      	ldr	r2, [pc, #320]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 8001826:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182a:	6213      	str	r3, [r2, #32]
 800182c:	4b4e      	ldr	r3, [pc, #312]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001834:	623b      	str	r3, [r7, #32]
 8001836:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	4b4b      	ldr	r3, [pc, #300]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	4a4a      	ldr	r2, [pc, #296]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 800183e:	f043 0302 	orr.w	r3, r3, #2
 8001842:	61d3      	str	r3, [r2, #28]
 8001844:	4b48      	ldr	r3, [pc, #288]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001850:	23c0      	movs	r3, #192	@ 0xc0
 8001852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001860:	2307      	movs	r3, #7
 8001862:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001868:	4619      	mov	r1, r3
 800186a:	4842      	ldr	r0, [pc, #264]	@ (8001974 <HAL_UART_MspInit+0x1e4>)
 800186c:	f001 f87a 	bl	8002964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	2025      	movs	r0, #37	@ 0x25
 8001876:	f000 ff95 	bl	80027a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800187a:	2025      	movs	r0, #37	@ 0x25
 800187c:	f000 ffbe 	bl	80027fc <HAL_NVIC_EnableIRQ>
}
 8001880:	e06b      	b.n	800195a <HAL_UART_MspInit+0x1ca>
  else if(huart->Instance==USART2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a3c      	ldr	r2, [pc, #240]	@ (8001978 <HAL_UART_MspInit+0x1e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d130      	bne.n	80018ee <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800188c:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 800188e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001890:	4a35      	ldr	r2, [pc, #212]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 8001892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001896:	6253      	str	r3, [r2, #36]	@ 0x24
 8001898:	4b33      	ldr	r3, [pc, #204]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b30      	ldr	r3, [pc, #192]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	61d3      	str	r3, [r2, #28]
 80018b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018bc:	230c      	movs	r3, #12
 80018be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018cc:	2307      	movs	r3, #7
 80018ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018d4:	4619      	mov	r1, r3
 80018d6:	4829      	ldr	r0, [pc, #164]	@ (800197c <HAL_UART_MspInit+0x1ec>)
 80018d8:	f001 f844 	bl	8002964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2100      	movs	r1, #0
 80018e0:	2026      	movs	r0, #38	@ 0x26
 80018e2:	f000 ff5f 	bl	80027a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018e6:	2026      	movs	r0, #38	@ 0x26
 80018e8:	f000 ff88 	bl	80027fc <HAL_NVIC_EnableIRQ>
}
 80018ec:	e035      	b.n	800195a <HAL_UART_MspInit+0x1ca>
  else if(huart->Instance==USART3)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a23      	ldr	r2, [pc, #140]	@ (8001980 <HAL_UART_MspInit+0x1f0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d130      	bne.n	800195a <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 80018fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 80018fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001902:	6253      	str	r3, [r2, #36]	@ 0x24
 8001904:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 8001906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	4a14      	ldr	r2, [pc, #80]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 8001916:	f043 0302 	orr.w	r3, r3, #2
 800191a:	61d3      	str	r3, [r2, #28]
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_UART_MspInit+0x1d8>)
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001928:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800192c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800193a:	2307      	movs	r3, #7
 800193c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001942:	4619      	mov	r1, r3
 8001944:	480b      	ldr	r0, [pc, #44]	@ (8001974 <HAL_UART_MspInit+0x1e4>)
 8001946:	f001 f80d 	bl	8002964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	2027      	movs	r0, #39	@ 0x27
 8001950:	f000 ff28 	bl	80027a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001954:	2027      	movs	r0, #39	@ 0x27
 8001956:	f000 ff51 	bl	80027fc <HAL_NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3740      	adds	r7, #64	@ 0x40
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40004c00 	.word	0x40004c00
 8001968:	40023800 	.word	0x40023800
 800196c:	40020800 	.word	0x40020800
 8001970:	40013800 	.word	0x40013800
 8001974:	40020400 	.word	0x40020400
 8001978:	40004400 	.word	0x40004400
 800197c:	40020000 	.word	0x40020000
 8001980:	40004800 	.word	0x40004800

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <NMI_Handler+0x4>

0800198c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <MemManage_Handler+0x4>

0800199c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <UsageFault_Handler+0x4>

080019ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d4:	f000 fdc8 	bl	8002568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80019e0:	2010      	movs	r0, #16
 80019e2:	f001 fa79 	bl	8002ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <TIM2_IRQHandler+0x10>)
 80019f2:	f005 f98b 	bl	8006d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000118 	.word	0x20000118

08001a00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a04:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <TIM3_IRQHandler+0x10>)
 8001a06:	f005 f981 	bl	8006d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000158 	.word	0x20000158

08001a14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <I2C1_EV_IRQHandler+0x10>)
 8001a1a:	f001 fe87 	bl	800372c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200000c4 	.word	0x200000c4

08001a28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a2c:	4802      	ldr	r0, [pc, #8]	@ (8001a38 <USART1_IRQHandler+0x10>)
 8001a2e:	f006 fb8f 	bl	8008150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000022c 	.word	0x2000022c

08001a3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <USART2_IRQHandler+0x10>)
 8001a42:	f006 fb85 	bl	8008150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000274 	.word	0x20000274

08001a50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a54:	4802      	ldr	r0, [pc, #8]	@ (8001a60 <USART3_IRQHandler+0x10>)
 8001a56:	f006 fb7b 	bl	8008150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002bc 	.word	0x200002bc

08001a64 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <UART4_IRQHandler+0x10>)
 8001a6a:	f006 fb71 	bl	8008150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200001e4 	.word	0x200001e4

08001a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return 1;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <_kill>:

int _kill(int pid, int sig)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a90:	f007 fcae 	bl	80093f0 <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2216      	movs	r2, #22
 8001a98:	601a      	str	r2, [r3, #0]
  return -1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <_exit>:

void _exit (int status)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aae:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffe7 	bl	8001a86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <_exit+0x12>

08001abc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e00a      	b.n	8001ae4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ace:	f3af 8000 	nop.w
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	60ba      	str	r2, [r7, #8]
 8001ada:	b2ca      	uxtb	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbf0      	blt.n	8001ace <_read+0x12>
  }

  return len;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <_isatty>:

int _isatty(int file)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
	...

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	@ (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	@ (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f007 fc32 	bl	80093f0 <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	@ (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	2000c000 	.word	0x2000c000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	200001e0 	.word	0x200001e0
 8001bc0:	20000ea8 	.word	0x20000ea8

08001bc4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <usart_queue_init>:
uint8_t rcv_cmd=0;
uint8_t rcv_buf[256];
EnvacIOStruct EnvacIO;

void usart_queue_init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  Uart1Queue_Initialize();
 8001bd4:	f7fe ff58 	bl	8000a88 <Uart1Queue_Initialize>
  Uart2Queue_Initialize();
 8001bd8:	f000 f8be 	bl	8001d58 <Uart2Queue_Initialize>
  Uart4Queue_Initialize();
 8001bdc:	f000 f856 	bl	8001c8c <Uart4Queue_Initialize>
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <Uart4_Is_Empty>:


uint8_t Uart4_Is_Empty(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
	if(u4_rx_point_head == u4_rx_point_tail) 	return 1; 
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <Uart4_Is_Empty+0x20>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <Uart4_Is_Empty+0x24>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d101      	bne.n	8001bf8 <Uart4_Is_Empty+0x14>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <Uart4_Is_Empty+0x16>
	else 										return 0; 
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	2000070c 	.word	0x2000070c
 8001c08:	20000710 	.word	0x20000710

08001c0c <Uart4_EnQueue>:

void Uart4_EnQueue(uint8_t data)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
	u4_rx_buffer[u4_rx_point_head] = data;
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <Uart4_EnQueue+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4906      	ldr	r1, [pc, #24]	@ (8001c34 <Uart4_EnQueue+0x28>)
 8001c1c:	79fa      	ldrb	r2, [r7, #7]
 8001c1e:	54ca      	strb	r2, [r1, r3]
	u4_increase_point_value(&u4_rx_point_head);
 8001c20:	4803      	ldr	r0, [pc, #12]	@ (8001c30 <Uart4_EnQueue+0x24>)
 8001c22:	f000 f81d 	bl	8001c60 <u4_increase_point_value>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000070c 	.word	0x2000070c
 8001c34:	20000714 	.word	0x20000714

08001c38 <Uart4_DeQueue>:

uint8_t Uart4_DeQueue(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
	uint8_t retVal = u4_rx_buffer[u4_rx_point_tail];
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <Uart4_DeQueue+0x20>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a06      	ldr	r2, [pc, #24]	@ (8001c5c <Uart4_DeQueue+0x24>)
 8001c44:	5cd3      	ldrb	r3, [r2, r3]
 8001c46:	71fb      	strb	r3, [r7, #7]
	u4_increase_point_value(&u4_rx_point_tail);
 8001c48:	4803      	ldr	r0, [pc, #12]	@ (8001c58 <Uart4_DeQueue+0x20>)
 8001c4a:	f000 f809 	bl	8001c60 <u4_increase_point_value>
	
	return retVal;
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000710 	.word	0x20000710
 8001c5c:	20000714 	.word	0x20000714

08001c60 <u4_increase_point_value>:

void u4_increase_point_value(uint32_t * data_p)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	(* data_p)++;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	601a      	str	r2, [r3, #0]
	if(U4_BUFFER_SIZE == (* data_p)) {
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7a:	d102      	bne.n	8001c82 <u4_increase_point_value+0x22>
		(* data_p) = 0;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
	}
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <Uart4Queue_Initialize>:

void Uart4Queue_Initialize(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
	u4_rx_point_head = u4_rx_point_tail = 0;
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <Uart4Queue_Initialize+0x1c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <Uart4Queue_Initialize+0x1c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <Uart4Queue_Initialize+0x20>)
 8001c9c:	6013      	str	r3, [r2, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000710 	.word	0x20000710
 8001cac:	2000070c 	.word	0x2000070c

08001cb0 <Uart2_Is_Empty>:




uint8_t Uart2_Is_Empty(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
	if(u2_rx_point_head == u2_rx_point_tail) 	return 1; 
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <Uart2_Is_Empty+0x20>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <Uart2_Is_Empty+0x24>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d101      	bne.n	8001cc4 <Uart2_Is_Empty+0x14>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <Uart2_Is_Empty+0x16>
	else 										return 0; 
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000304 	.word	0x20000304
 8001cd4:	20000308 	.word	0x20000308

08001cd8 <Uart2_EnQueue>:

void Uart2_EnQueue(uint8_t data)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
	u2_rx_buffer[u2_rx_point_head] = data;
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <Uart2_EnQueue+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4906      	ldr	r1, [pc, #24]	@ (8001d00 <Uart2_EnQueue+0x28>)
 8001ce8:	79fa      	ldrb	r2, [r7, #7]
 8001cea:	54ca      	strb	r2, [r1, r3]
	u2_increase_point_value(&u2_rx_point_head);
 8001cec:	4803      	ldr	r0, [pc, #12]	@ (8001cfc <Uart2_EnQueue+0x24>)
 8001cee:	f000 f81d 	bl	8001d2c <u2_increase_point_value>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000304 	.word	0x20000304
 8001d00:	2000030c 	.word	0x2000030c

08001d04 <Uart2_DeQueue>:

uint8_t Uart2_DeQueue(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
	uint8_t retVal = u2_rx_buffer[u2_rx_point_tail];
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <Uart2_DeQueue+0x20>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a06      	ldr	r2, [pc, #24]	@ (8001d28 <Uart2_DeQueue+0x24>)
 8001d10:	5cd3      	ldrb	r3, [r2, r3]
 8001d12:	71fb      	strb	r3, [r7, #7]
	u2_increase_point_value(&u2_rx_point_tail);
 8001d14:	4803      	ldr	r0, [pc, #12]	@ (8001d24 <Uart2_DeQueue+0x20>)
 8001d16:	f000 f809 	bl	8001d2c <u2_increase_point_value>
	
	return retVal;
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000308 	.word	0x20000308
 8001d28:	2000030c 	.word	0x2000030c

08001d2c <u2_increase_point_value>:

void u2_increase_point_value(uint32_t * data_p)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	(* data_p)++;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	601a      	str	r2, [r3, #0]
	if(U2_BUFFER_SIZE == (* data_p)) {
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d46:	d102      	bne.n	8001d4e <u2_increase_point_value+0x22>
		(* data_p) = 0;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
	}
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <Uart2Queue_Initialize>:

void Uart2Queue_Initialize(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	u2_rx_point_head = u2_rx_point_tail = 0;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <Uart2Queue_Initialize+0x1c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	4b04      	ldr	r3, [pc, #16]	@ (8001d74 <Uart2Queue_Initialize+0x1c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <Uart2Queue_Initialize+0x20>)
 8001d68:	6013      	str	r3, [r2, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000308 	.word	0x20000308
 8001d78:	20000304 	.word	0x20000304

08001d7c <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <HAL_UART_RxCpltCallback+0x6c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d109      	bne.n	8001da2 <HAL_UART_RxCpltCallback+0x26>
    usart_console(rx_data);
 8001d8e:	4b17      	ldr	r3, [pc, #92]	@ (8001dec <HAL_UART_RxCpltCallback+0x70>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fe9a 	bl	8000acc <usart_console>
    HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4914      	ldr	r1, [pc, #80]	@ (8001dec <HAL_UART_RxCpltCallback+0x70>)
 8001d9c:	4814      	ldr	r0, [pc, #80]	@ (8001df0 <HAL_UART_RxCpltCallback+0x74>)
 8001d9e:	f006 f9b2 	bl	8008106 <HAL_UART_Receive_IT>
	}
  if(huart->Instance == USART2) {
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a13      	ldr	r2, [pc, #76]	@ (8001df4 <HAL_UART_RxCpltCallback+0x78>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d109      	bne.n	8001dc0 <HAL_UART_RxCpltCallback+0x44>
    Uart2_EnQueue(host_rx_data);
 8001dac:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_UART_RxCpltCallback+0x7c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff91 	bl	8001cd8 <Uart2_EnQueue>
    HAL_UART_Receive_IT(&huart2, &host_rx_data, 1);
 8001db6:	2201      	movs	r2, #1
 8001db8:	490f      	ldr	r1, [pc, #60]	@ (8001df8 <HAL_UART_RxCpltCallback+0x7c>)
 8001dba:	4810      	ldr	r0, [pc, #64]	@ (8001dfc <HAL_UART_RxCpltCallback+0x80>)
 8001dbc:	f006 f9a3 	bl	8008106 <HAL_UART_Receive_IT>
  }
  if(huart->Instance == UART4) {
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001e00 <HAL_UART_RxCpltCallback+0x84>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d109      	bne.n	8001dde <HAL_UART_RxCpltCallback+0x62>
    Uart4_EnQueue(rfid_rx_data);
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <HAL_UART_RxCpltCallback+0x88>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff1c 	bl	8001c0c <Uart4_EnQueue>
    HAL_UART_Receive_IT(&huart4, &rfid_rx_data, 1);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	490b      	ldr	r1, [pc, #44]	@ (8001e04 <HAL_UART_RxCpltCallback+0x88>)
 8001dd8:	480b      	ldr	r0, [pc, #44]	@ (8001e08 <HAL_UART_RxCpltCallback+0x8c>)
 8001dda:	f006 f994 	bl	8008106 <HAL_UART_Receive_IT>
  }
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40013800 	.word	0x40013800
 8001dec:	200001a4 	.word	0x200001a4
 8001df0:	2000022c 	.word	0x2000022c
 8001df4:	40004400 	.word	0x40004400
 8001df8:	200001a5 	.word	0x200001a5
 8001dfc:	20000274 	.word	0x20000274
 8001e00:	40004c00 	.word	0x40004c00
 8001e04:	200001a6 	.word	0x200001a6
 8001e08:	200001e4 	.word	0x200001e4

08001e0c <uart_tx>:


void uart_tx(UART_HandleTypeDef *huart, uint8_t len, uint8_t *tx_buf)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	460b      	mov	r3, r1
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(huart, tx_buf, len, 100);
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	2364      	movs	r3, #100	@ 0x64
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f006 f8ec 	bl	8008000 <HAL_UART_Transmit>
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <Calc_Crc>:


uint8_t Calc_Crc(uint8_t dlen, uint8_t *data)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
    uint8_t SumData =0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]
    uint8_t cnt =0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73bb      	strb	r3, [r7, #14]
    
    for(cnt=0;cnt<dlen;cnt++) SumData ^= (uint8_t)*(data+cnt);
 8001e44:	2300      	movs	r3, #0
 8001e46:	73bb      	strb	r3, [r7, #14]
 8001e48:	e009      	b.n	8001e5e <Calc_Crc+0x2e>
 8001e4a:	7bbb      	ldrb	r3, [r7, #14]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	4053      	eors	r3, r2
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	7bbb      	ldrb	r3, [r7, #14]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	73bb      	strb	r3, [r7, #14]
 8001e5e:	7bba      	ldrb	r2, [r7, #14]
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d3f1      	bcc.n	8001e4a <Calc_Crc+0x1a>

    return SumData;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
	...

08001e74 <makeBasePacket>:

uint8_t makeBasePacket(uint8_t cmd, uint8_t dlen, uint8_t *msg_data)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	603a      	str	r2, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
 8001e80:	460b      	mov	r3, r1
 8001e82:	71bb      	strb	r3, [r7, #6]
  uint8_t cnt =0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]
  uint8_t len =0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73bb      	strb	r3, [r7, #14]
    
  EnvacIO.tx_data[len++] =    STX;
 8001e8c:	7bbb      	ldrb	r3, [r7, #14]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	73ba      	strb	r2, [r7, #14]
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <makeBasePacket+0xb4>)
 8001e96:	4413      	add	r3, r2
 8001e98:	2202      	movs	r2, #2
 8001e9a:	721a      	strb	r2, [r3, #8]
  EnvacIO.tx_data[len++] =    dlen+5;  //stx + len + cmd + ecc + etx + dlen
 8001e9c:	7bbb      	ldrb	r3, [r7, #14]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	73ba      	strb	r2, [r7, #14]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	79bb      	ldrb	r3, [r7, #6]
 8001ea6:	3305      	adds	r3, #5
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <makeBasePacket+0xb4>)
 8001eac:	440b      	add	r3, r1
 8001eae:	721a      	strb	r2, [r3, #8]
  EnvacIO.tx_data[len++] =    cmd;
 8001eb0:	7bbb      	ldrb	r3, [r7, #14]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	73ba      	strb	r2, [r7, #14]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <makeBasePacket+0xb4>)
 8001eba:	4413      	add	r3, r2
 8001ebc:	79fa      	ldrb	r2, [r7, #7]
 8001ebe:	721a      	strb	r2, [r3, #8]
  for(cnt=0;cnt<dlen;cnt++)   EnvacIO.tx_data[len++] = *(msg_data+cnt);
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	e00d      	b.n	8001ee2 <makeBasePacket+0x6e>
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	441a      	add	r2, r3
 8001ecc:	7bbb      	ldrb	r3, [r7, #14]
 8001ece:	1c59      	adds	r1, r3, #1
 8001ed0:	73b9      	strb	r1, [r7, #14]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	7812      	ldrb	r2, [r2, #0]
 8001ed6:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <makeBasePacket+0xb4>)
 8001ed8:	440b      	add	r3, r1
 8001eda:	721a      	strb	r2, [r3, #8]
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	79bb      	ldrb	r3, [r7, #6]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d3ed      	bcc.n	8001ec6 <makeBasePacket+0x52>
  EnvacIO.tx_data[len++] =    Calc_Crc(EnvacIO.tx_data[POS_LEN]-2, EnvacIO.tx_data);
 8001eea:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <makeBasePacket+0xb4>)
 8001eec:	7a5b      	ldrb	r3, [r3, #9]
 8001eee:	3b02      	subs	r3, #2
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	7bbb      	ldrb	r3, [r7, #14]
 8001ef4:	1c59      	adds	r1, r3, #1
 8001ef6:	73b9      	strb	r1, [r7, #14]
 8001ef8:	461c      	mov	r4, r3
 8001efa:	490c      	ldr	r1, [pc, #48]	@ (8001f2c <makeBasePacket+0xb8>)
 8001efc:	4610      	mov	r0, r2
 8001efe:	f7ff ff97 	bl	8001e30 <Calc_Crc>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <makeBasePacket+0xb4>)
 8001f08:	4423      	add	r3, r4
 8001f0a:	721a      	strb	r2, [r3, #8]
  EnvacIO.tx_data[len++] =    ETX; 
 8001f0c:	7bbb      	ldrb	r3, [r7, #14]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	73ba      	strb	r2, [r7, #14]
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <makeBasePacket+0xb4>)
 8001f16:	4413      	add	r3, r2
 8001f18:	2203      	movs	r2, #3
 8001f1a:	721a      	strb	r2, [r3, #8]

  return len;  
 8001f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd90      	pop	{r4, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000d1c 	.word	0x20000d1c
 8001f2c:	20000d24 	.word	0x20000d24

08001f30 <MX_UART4_Init>:
  * @brief UART4 Initialization Function For RFID Interface
  * @param None
  * @retval None
  */
void MX_UART4_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f34:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <MX_UART4_Init+0x4c>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <MX_UART4_Init+0x50>)
 8001f38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <MX_UART4_Init+0x4c>)
 8001f3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <MX_UART4_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <MX_UART4_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <MX_UART4_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <MX_UART4_Init+0x4c>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <MX_UART4_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <MX_UART4_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <MX_UART4_Init+0x4c>)
 8001f68:	f005 ff82 	bl	8007e70 <HAL_UART_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001f72:	f7ff faf1 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200001e4 	.word	0x200001e4
 8001f80:	40004c00 	.word	0x40004c00

08001f84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f88:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	@ (8001fd4 <MX_USART1_UART_Init+0x50>)
 8001f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001f90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001faa:	220c      	movs	r2, #12
 8001fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fae:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fba:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <MX_USART1_UART_Init+0x4c>)
 8001fbc:	f005 ff58 	bl	8007e70 <HAL_UART_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fc6:	f7ff fac7 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000022c 	.word	0x2000022c
 8001fd4:	40013800 	.word	0x40013800

08001fd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function For HOST Interface
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <MX_USART2_UART_Init+0x4c>)
 8001fde:	4a12      	ldr	r2, [pc, #72]	@ (8002028 <MX_USART2_UART_Init+0x50>)
 8001fe0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fe2:	4b10      	ldr	r3, [pc, #64]	@ (8002024 <MX_USART2_UART_Init+0x4c>)
 8001fe4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fe8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <MX_USART2_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <MX_USART2_UART_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <MX_USART2_UART_Init+0x4c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <MX_USART2_UART_Init+0x4c>)
 8001ffe:	220c      	movs	r2, #12
 8002000:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002002:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <MX_USART2_UART_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <MX_USART2_UART_Init+0x4c>)
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800200e:	4805      	ldr	r0, [pc, #20]	@ (8002024 <MX_USART2_UART_Init+0x4c>)
 8002010:	f005 ff2e 	bl	8007e70 <HAL_UART_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800201a:	f7ff fa9d 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000274 	.word	0x20000274
 8002028:	40004400 	.word	0x40004400

0800202c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function For Envac Main Interface
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <MX_USART3_UART_Init+0x4c>)
 8002032:	4a12      	ldr	r2, [pc, #72]	@ (800207c <MX_USART3_UART_Init+0x50>)
 8002034:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <MX_USART3_UART_Init+0x4c>)
 8002038:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800203c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <MX_USART3_UART_Init+0x4c>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002044:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <MX_USART3_UART_Init+0x4c>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <MX_USART3_UART_Init+0x4c>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002050:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <MX_USART3_UART_Init+0x4c>)
 8002052:	220c      	movs	r2, #12
 8002054:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002056:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <MX_USART3_UART_Init+0x4c>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <MX_USART3_UART_Init+0x4c>)
 800205e:	2200      	movs	r2, #0
 8002060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002062:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_USART3_UART_Init+0x4c>)
 8002064:	f005 ff04 	bl	8007e70 <HAL_UART_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_USART3_UART_Init+0x46>
    Error_Handler();
 800206e:	f7ff fa73 	bl	8001558 <Error_Handler>
  }
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200002bc 	.word	0x200002bc
 800207c:	40004800 	.word	0x40004800

08002080 <rep_comm_gate_open>:

uint8_t rep_comm_gate_open(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  uint8_t msg_data[1] = {0, };
 8002086:	2300      	movs	r3, #0
 8002088:	713b      	strb	r3, [r7, #4]
  uint8_t len = makeBasePacket(HOST_CMD_REP_GATE_OPEN, 0, msg_data);
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	461a      	mov	r2, r3
 800208e:	2100      	movs	r1, #0
 8002090:	2082      	movs	r0, #130	@ 0x82
 8002092:	f7ff feef 	bl	8001e74 <makeBasePacket>
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  uart_tx(&huart2, len, EnvacIO.tx_data);
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	4a06      	ldr	r2, [pc, #24]	@ (80020b8 <rep_comm_gate_open+0x38>)
 800209e:	4619      	mov	r1, r3
 80020a0:	4806      	ldr	r0, [pc, #24]	@ (80020bc <rep_comm_gate_open+0x3c>)
 80020a2:	f7ff feb3 	bl	8001e0c <uart_tx>
  printf("\r\n send resp");
 80020a6:	4806      	ldr	r0, [pc, #24]	@ (80020c0 <rep_comm_gate_open+0x40>)
 80020a8:	f006 ffb0 	bl	800900c <iprintf>
  return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000d24 	.word	0x20000d24
 80020bc:	20000274 	.word	0x20000274
 80020c0:	0800a1c4 	.word	0x0800a1c4

080020c4 <rep_comm_bright>:


uint8_t rep_comm_bright(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  uint8_t msg_data[1] = {0, };
 80020ca:	2300      	movs	r3, #0
 80020cc:	713b      	strb	r3, [r7, #4]

  msg_data[0] = EnvacIO.light_bright;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <rep_comm_bright+0x3c>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	713b      	strb	r3, [r7, #4]
  uint8_t len = makeBasePacket(HOST_CMD_REP_LIGHT_BRIGHT, 1, msg_data);
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	461a      	mov	r2, r3
 80020d8:	2101      	movs	r1, #1
 80020da:	2081      	movs	r0, #129	@ 0x81
 80020dc:	f7ff feca 	bl	8001e74 <makeBasePacket>
 80020e0:	4603      	mov	r3, r0
 80020e2:	71fb      	strb	r3, [r7, #7]
  uart_tx(&huart2, len, EnvacIO.tx_data);
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	4a07      	ldr	r2, [pc, #28]	@ (8002104 <rep_comm_bright+0x40>)
 80020e8:	4619      	mov	r1, r3
 80020ea:	4807      	ldr	r0, [pc, #28]	@ (8002108 <rep_comm_bright+0x44>)
 80020ec:	f7ff fe8e 	bl	8001e0c <uart_tx>
  printf("\r\n send resp");
 80020f0:	4806      	ldr	r0, [pc, #24]	@ (800210c <rep_comm_bright+0x48>)
 80020f2:	f006 ff8b 	bl	800900c <iprintf>
  return 0;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000d1c 	.word	0x20000d1c
 8002104:	20000d24 	.word	0x20000d24
 8002108:	20000274 	.word	0x20000274
 800210c:	0800a1c4 	.word	0x0800a1c4

08002110 <event_comm_detect_sensor>:




uint8_t event_comm_detect_sensor(uint8_t sen_in)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  uint8_t msg_data[1] = {0x00, };
 800211a:	2300      	movs	r3, #0
 800211c:	733b      	strb	r3, [r7, #12]
  
  if(sen_in) msg_data[0] = PIR_DETECT;  
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <event_comm_detect_sensor+0x1a>
 8002124:	2301      	movs	r3, #1
 8002126:	733b      	strb	r3, [r7, #12]
 8002128:	e001      	b.n	800212e <event_comm_detect_sensor+0x1e>
  else       msg_data[1] = PIR_RELEASE;
 800212a:	2300      	movs	r3, #0
 800212c:	737b      	strb	r3, [r7, #13]
  uint8_t len = makeBasePacket(HOST_CMD_EVENT_PIR_IN, 1, msg_data);
 800212e:	f107 030c 	add.w	r3, r7, #12
 8002132:	461a      	mov	r2, r3
 8002134:	2101      	movs	r1, #1
 8002136:	2021      	movs	r0, #33	@ 0x21
 8002138:	f7ff fe9c 	bl	8001e74 <makeBasePacket>
 800213c:	4603      	mov	r3, r0
 800213e:	73fb      	strb	r3, [r7, #15]
  uart_tx(&huart2, len, EnvacIO.tx_data);
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	4a05      	ldr	r2, [pc, #20]	@ (8002158 <event_comm_detect_sensor+0x48>)
 8002144:	4619      	mov	r1, r3
 8002146:	4805      	ldr	r0, [pc, #20]	@ (800215c <event_comm_detect_sensor+0x4c>)
 8002148:	f7ff fe60 	bl	8001e0c <uart_tx>

  return 0;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000d24 	.word	0x20000d24
 800215c:	20000274 	.word	0x20000274

08002160 <event_comm_rfid_in>:

uint8_t event_comm_rfid_in(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
  uint8_t msg_data[20] = {0, };
 8002166:	2300      	movs	r3, #0
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
  uint8_t len = makeBasePacket(HOST_CMD_EVENT_RFID_IN, 0, msg_data);
 8002176:	463b      	mov	r3, r7
 8002178:	461a      	mov	r2, r3
 800217a:	2100      	movs	r1, #0
 800217c:	2022      	movs	r0, #34	@ 0x22
 800217e:	f7ff fe79 	bl	8001e74 <makeBasePacket>
 8002182:	4603      	mov	r3, r0
 8002184:	75fb      	strb	r3, [r7, #23]
  uart_tx(&huart2, len, EnvacIO.tx_data);
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <event_comm_rfid_in+0x3c>)
 800218a:	4619      	mov	r1, r3
 800218c:	4804      	ldr	r0, [pc, #16]	@ (80021a0 <event_comm_rfid_in+0x40>)
 800218e:	f7ff fe3d 	bl	8001e0c <uart_tx>
  return 0;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000d24 	.word	0x20000d24
 80021a0:	20000274 	.word	0x20000274

080021a4 <RfidParse_Packet>:

uint8_t RfidParse_Packet(uint8_t data)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  //printf("\r\nrcvlen: %d", rfid_len);
  switch(rfid_rcv_mode)
 80021ae:	4b1f      	ldr	r3, [pc, #124]	@ (800222c <RfidParse_Packet+0x88>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <RfidParse_Packet+0x18>
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d015      	beq.n	80021e6 <RfidParse_Packet+0x42>
 80021ba:	e02c      	b.n	8002216 <RfidParse_Packet+0x72>
  {
    case COMM_IDLE : 
    {
      if(data == STX) {
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d10d      	bne.n	80021de <RfidParse_Packet+0x3a>
        rfid_rcv_mode = COMM_MSG;
 80021c2:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <RfidParse_Packet+0x88>)
 80021c4:	2203      	movs	r2, #3
 80021c6:	701a      	strb	r2, [r3, #0]
        //printf("\r\nRFID Rx: [%02x] ", data);
        rfid_buff[rfid_len++] = data;
 80021c8:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <RfidParse_Packet+0x8c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	b2d1      	uxtb	r1, r2
 80021d0:	4a17      	ldr	r2, [pc, #92]	@ (8002230 <RfidParse_Packet+0x8c>)
 80021d2:	7011      	strb	r1, [r2, #0]
 80021d4:	4619      	mov	r1, r3
 80021d6:	4a17      	ldr	r2, [pc, #92]	@ (8002234 <RfidParse_Packet+0x90>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	5453      	strb	r3, [r2, r1]
      }
      else {
        rfid_len =0;
      }
      break;
 80021dc:	e021      	b.n	8002222 <RfidParse_Packet+0x7e>
        rfid_len =0;
 80021de:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <RfidParse_Packet+0x8c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
      break;
 80021e4:	e01d      	b.n	8002222 <RfidParse_Packet+0x7e>
    }
    case COMM_MSG :
    {
      if(rfid_len < RFID_COMM_LEN-1) {
 80021e6:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <RfidParse_Packet+0x8c>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b0a      	cmp	r3, #10
 80021ec:	d80a      	bhi.n	8002204 <RfidParse_Packet+0x60>
        rfid_buff[rfid_len++] = data;
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <RfidParse_Packet+0x8c>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	b2d1      	uxtb	r1, r2
 80021f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002230 <RfidParse_Packet+0x8c>)
 80021f8:	7011      	strb	r1, [r2, #0]
 80021fa:	4619      	mov	r1, r3
 80021fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <RfidParse_Packet+0x90>)
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	5453      	strb	r3, [r2, r1]
        //hex_dump(rfid_buff, 12, 20, "_");
        //printf("\r\n");
        //uint8_t gate_open_packet[11] = {0x02, 0x31, 0x30, 0x31, 0x32, 0x34, 0x35, 0x33, 0x37, 0x03, 0x36};
        //uart_tx(&huart3, 12, rfid_buff);
      }
      break;
 8002202:	e00e      	b.n	8002222 <RfidParse_Packet+0x7e>
        rfid_len =0;
 8002204:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <RfidParse_Packet+0x8c>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
        rfid_rcv_mode = COMM_IDLE;
 800220a:	4b08      	ldr	r3, [pc, #32]	@ (800222c <RfidParse_Packet+0x88>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
        event_comm_rfid_in();
 8002210:	f7ff ffa6 	bl	8002160 <event_comm_rfid_in>
      break;
 8002214:	e005      	b.n	8002222 <RfidParse_Packet+0x7e>
    }
    default: 
    {
      rfid_len =0;
 8002216:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <RfidParse_Packet+0x8c>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
      rfid_rcv_mode = COMM_IDLE;
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <RfidParse_Packet+0x88>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
    }
  }
  return 0;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000b15 	.word	0x20000b15
 8002230:	20000b16 	.word	0x20000b16
 8002234:	20000b18 	.word	0x20000b18

08002238 <Parse_Packet>:

uint8_t Parse_Packet(uint8_t data) 
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
   switch(rcv_mode)
 8002242:	4b47      	ldr	r3, [pc, #284]	@ (8002360 <Parse_Packet+0x128>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b03      	cmp	r3, #3
 8002248:	f200 8084 	bhi.w	8002354 <Parse_Packet+0x11c>
 800224c:	a201      	add	r2, pc, #4	@ (adr r2, 8002254 <Parse_Packet+0x1c>)
 800224e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002252:	bf00      	nop
 8002254:	08002265 	.word	0x08002265
 8002258:	0800227d 	.word	0x0800227d
 800225c:	080022bd 	.word	0x080022bd
 8002260:	080022d5 	.word	0x080022d5
   {
        case COMM_IDLE :
            if(data == STX) {
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d171      	bne.n	800234e <Parse_Packet+0x116>
                rcv_mode = COMM_LENGTH;
 800226a:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <Parse_Packet+0x128>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
                printf("\r\nRx: [%02x] ", data);
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	4619      	mov	r1, r3
 8002274:	483b      	ldr	r0, [pc, #236]	@ (8002364 <Parse_Packet+0x12c>)
 8002276:	f006 fec9 	bl	800900c <iprintf>
            }
            break;
 800227a:	e068      	b.n	800234e <Parse_Packet+0x116>

        case COMM_LENGTH :
            p_len += data;
 800227c:	4b3a      	ldr	r3, [pc, #232]	@ (8002368 <Parse_Packet+0x130>)
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	4413      	add	r3, r2
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b38      	ldr	r3, [pc, #224]	@ (8002368 <Parse_Packet+0x130>)
 8002288:	701a      	strb	r2, [r3, #0]
            //p_len -= 4;// p_len :: msg size
            if(p_len > MAX_PACKET_SIZE) {   //max msg size 10
 800228a:	4b37      	ldr	r3, [pc, #220]	@ (8002368 <Parse_Packet+0x130>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b32      	cmp	r3, #50	@ 0x32
 8002290:	d90b      	bls.n	80022aa <Parse_Packet+0x72>
                printf("\r\n packet size over error");
 8002292:	4836      	ldr	r0, [pc, #216]	@ (800236c <Parse_Packet+0x134>)
 8002294:	f006 feba 	bl	800900c <iprintf>
                p_len =0;
 8002298:	4b33      	ldr	r3, [pc, #204]	@ (8002368 <Parse_Packet+0x130>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
                msg_len =0;
 800229e:	4b34      	ldr	r3, [pc, #208]	@ (8002370 <Parse_Packet+0x138>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
                rcv_mode = COMM_IDLE;
 80022a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002360 <Parse_Packet+0x128>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
            }
            printf("[%02x] ", data);
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	4619      	mov	r1, r3
 80022ae:	4831      	ldr	r0, [pc, #196]	@ (8002374 <Parse_Packet+0x13c>)
 80022b0:	f006 feac 	bl	800900c <iprintf>
            rcv_mode = COMM_CMD;
 80022b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <Parse_Packet+0x128>)
 80022b6:	2202      	movs	r2, #2
 80022b8:	701a      	strb	r2, [r3, #0]
            break;
 80022ba:	e04b      	b.n	8002354 <Parse_Packet+0x11c>

        case COMM_CMD : 
            rcv_cmd = data;
 80022bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002378 <Parse_Packet+0x140>)
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	7013      	strb	r3, [r2, #0]
            rcv_mode = COMM_MSG;
 80022c2:	4b27      	ldr	r3, [pc, #156]	@ (8002360 <Parse_Packet+0x128>)
 80022c4:	2203      	movs	r2, #3
 80022c6:	701a      	strb	r2, [r3, #0]
            printf("[%02x] ", data);
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	4619      	mov	r1, r3
 80022cc:	4829      	ldr	r0, [pc, #164]	@ (8002374 <Parse_Packet+0x13c>)
 80022ce:	f006 fe9d 	bl	800900c <iprintf>
            break;
 80022d2:	e03f      	b.n	8002354 <Parse_Packet+0x11c>

        case COMM_MSG :
            if(msg_len < (p_len-4)) {
 80022d4:	4b26      	ldr	r3, [pc, #152]	@ (8002370 <Parse_Packet+0x138>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b23      	ldr	r3, [pc, #140]	@ (8002368 <Parse_Packet+0x130>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	3b04      	subs	r3, #4
 80022e0:	429a      	cmp	r2, r3
 80022e2:	da11      	bge.n	8002308 <Parse_Packet+0xd0>
                rcv_buf[msg_len] = data;
 80022e4:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <Parse_Packet+0x138>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	4a24      	ldr	r2, [pc, #144]	@ (800237c <Parse_Packet+0x144>)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	5453      	strb	r3, [r2, r1]
                msg_len++;
 80022f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <Parse_Packet+0x138>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002370 <Parse_Packet+0x138>)
 80022fa:	701a      	strb	r2, [r3, #0]
                printf("[%02x] ", data);
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	4619      	mov	r1, r3
 8002300:	481c      	ldr	r0, [pc, #112]	@ (8002374 <Parse_Packet+0x13c>)
 8002302:	f006 fe83 	bl	800900c <iprintf>
                break;
 8002306:	e025      	b.n	8002354 <Parse_Packet+0x11c>
            }
            else if(msg_len == (p_len-4)) {
 8002308:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <Parse_Packet+0x138>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b16      	ldr	r3, [pc, #88]	@ (8002368 <Parse_Packet+0x130>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	3b04      	subs	r3, #4
 8002314:	429a      	cmp	r2, r3
 8002316:	d11c      	bne.n	8002352 <Parse_Packet+0x11a>
                if(data == ETX) {
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d10a      	bne.n	8002334 <Parse_Packet+0xfc>
                  printf("[%02x] ", data);
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	4619      	mov	r1, r3
 8002322:	4814      	ldr	r0, [pc, #80]	@ (8002374 <Parse_Packet+0x13c>)
 8002324:	f006 fe72 	bl	800900c <iprintf>
                	proc_comm(rcv_cmd);
 8002328:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <Parse_Packet+0x140>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f847 	bl	80023c0 <proc_comm>
 8002332:	e002      	b.n	800233a <Parse_Packet+0x102>
                }
                else {
                    printf("\r\n wrong etx packet.");
 8002334:	4812      	ldr	r0, [pc, #72]	@ (8002380 <Parse_Packet+0x148>)
 8002336:	f006 fe69 	bl	800900c <iprintf>
                }
                p_len =0;
 800233a:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <Parse_Packet+0x130>)
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
                msg_len =0;
 8002340:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <Parse_Packet+0x138>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
                rcv_mode = COMM_IDLE;
 8002346:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <Parse_Packet+0x128>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800234c:	e001      	b.n	8002352 <Parse_Packet+0x11a>
            break;
 800234e:	bf00      	nop
 8002350:	e000      	b.n	8002354 <Parse_Packet+0x11c>
            break;
 8002352:	bf00      	nop
   }
   return 0;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000b14 	.word	0x20000b14
 8002364:	0800a1d8 	.word	0x0800a1d8
 8002368:	20000c18 	.word	0x20000c18
 800236c:	0800a1e8 	.word	0x0800a1e8
 8002370:	20000c19 	.word	0x20000c19
 8002374:	0800a204 	.word	0x0800a204
 8002378:	20000c1a 	.word	0x20000c1a
 800237c:	20000c1c 	.word	0x20000c1c
 8002380:	0800a20c 	.word	0x0800a20c

08002384 <read_usart>:

void read_usart(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  while(Uart2_Is_Empty() == 0) {
 8002388:	e005      	b.n	8002396 <read_usart+0x12>
    Parse_Packet(Uart2_DeQueue());
 800238a:	f7ff fcbb 	bl	8001d04 <Uart2_DeQueue>
 800238e:	4603      	mov	r3, r0
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff51 	bl	8002238 <Parse_Packet>
  while(Uart2_Is_Empty() == 0) {
 8002396:	f7ff fc8b 	bl	8001cb0 <Uart2_Is_Empty>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f4      	beq.n	800238a <read_usart+0x6>
  }
  while(Uart4_Is_Empty() == 0) {
 80023a0:	e005      	b.n	80023ae <read_usart+0x2a>
    RfidParse_Packet(Uart4_DeQueue());
 80023a2:	f7ff fc49 	bl	8001c38 <Uart4_DeQueue>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fefb 	bl	80021a4 <RfidParse_Packet>
  while(Uart4_Is_Empty() == 0) {
 80023ae:	f7ff fc19 	bl	8001be4 <Uart4_Is_Empty>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f4      	beq.n	80023a2 <read_usart+0x1e>
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <proc_comm>:


uint8_t proc_comm(uint8_t cmd)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
    switch(cmd)
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d033      	beq.n	8002438 <proc_comm+0x78>
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	dc3a      	bgt.n	800244a <proc_comm+0x8a>
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d002      	beq.n	80023de <proc_comm+0x1e>
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d014      	beq.n	8002406 <proc_comm+0x46>
        rep_comm_gate_open();
        break;
      }
      default :
      {
        break;
 80023dc:	e035      	b.n	800244a <proc_comm+0x8a>
        printf("\r\n cmd: COMM_REQ_LIGHT_BRIGHT[%02x][%02x]", rcv_cmd, rcv_buf[0]);
 80023de:	4b1f      	ldr	r3, [pc, #124]	@ (800245c <proc_comm+0x9c>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	4619      	mov	r1, r3
 80023e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002460 <proc_comm+0xa0>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	481e      	ldr	r0, [pc, #120]	@ (8002464 <proc_comm+0xa4>)
 80023ec:	f006 fe0e 	bl	800900c <iprintf>
        if(SetLightBright(rcv_buf[0]) == 0) {
 80023f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002460 <proc_comm+0xa0>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f81f 	bl	8001438 <SetLightBright>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d126      	bne.n	800244e <proc_comm+0x8e>
          rep_comm_bright();
 8002400:	f7ff fe60 	bl	80020c4 <rep_comm_bright>
        break;
 8002404:	e023      	b.n	800244e <proc_comm+0x8e>
        printf("\r\n cmd: COMM_REQ_GATE_OPEN[%02x]", rcv_cmd);
 8002406:	4b15      	ldr	r3, [pc, #84]	@ (800245c <proc_comm+0x9c>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	4619      	mov	r1, r3
 800240c:	4816      	ldr	r0, [pc, #88]	@ (8002468 <proc_comm+0xa8>)
 800240e:	f006 fdfd 	bl	800900c <iprintf>
        uint8_t gate_open_packet[11] = {0x02, 0x31, 0x30, 0x31, 0x32, 0x34, 0x35, 0x33, 0x37, 0x03, 0x36};
 8002412:	4a16      	ldr	r2, [pc, #88]	@ (800246c <proc_comm+0xac>)
 8002414:	f107 030c 	add.w	r3, r7, #12
 8002418:	ca07      	ldmia	r2, {r0, r1, r2}
 800241a:	c303      	stmia	r3!, {r0, r1}
 800241c:	801a      	strh	r2, [r3, #0]
 800241e:	3302      	adds	r3, #2
 8002420:	0c12      	lsrs	r2, r2, #16
 8002422:	701a      	strb	r2, [r3, #0]
        uart_tx(&huart3, 11, gate_open_packet);
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	461a      	mov	r2, r3
 800242a:	210b      	movs	r1, #11
 800242c:	4810      	ldr	r0, [pc, #64]	@ (8002470 <proc_comm+0xb0>)
 800242e:	f7ff fced 	bl	8001e0c <uart_tx>
        rep_comm_gate_open();
 8002432:	f7ff fe25 	bl	8002080 <rep_comm_gate_open>
        break;
 8002436:	e00b      	b.n	8002450 <proc_comm+0x90>
        printf("\r\n cmd: COMM_REQ_TEMPERATURE[%02x]", rcv_cmd);
 8002438:	4b08      	ldr	r3, [pc, #32]	@ (800245c <proc_comm+0x9c>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	480d      	ldr	r0, [pc, #52]	@ (8002474 <proc_comm+0xb4>)
 8002440:	f006 fde4 	bl	800900c <iprintf>
        rep_comm_gate_open();
 8002444:	f7ff fe1c 	bl	8002080 <rep_comm_gate_open>
        break;
 8002448:	e002      	b.n	8002450 <proc_comm+0x90>
        break;
 800244a:	bf00      	nop
 800244c:	e000      	b.n	8002450 <proc_comm+0x90>
        break;
 800244e:	bf00      	nop
      }
          
    }
    return 0;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000c1a 	.word	0x20000c1a
 8002460:	20000c1c 	.word	0x20000c1c
 8002464:	0800a224 	.word	0x0800a224
 8002468:	0800a250 	.word	0x0800a250
 800246c:	0800a298 	.word	0x0800a298
 8002470:	200002bc 	.word	0x200002bc
 8002474:	0800a274 	.word	0x0800a274

08002478 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002478:	f7ff fba4 	bl	8001bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800247c:	480b      	ldr	r0, [pc, #44]	@ (80024ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800247e:	490c      	ldr	r1, [pc, #48]	@ (80024b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002480:	4a0c      	ldr	r2, [pc, #48]	@ (80024b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a09      	ldr	r2, [pc, #36]	@ (80024b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002494:	4c09      	ldr	r4, [pc, #36]	@ (80024bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024a2:	f006 ffab 	bl	80093fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024a6:	f7fe fd77 	bl	8000f98 <main>
  bx lr
 80024aa:	4770      	bx	lr
  ldr r0, =_sdata
 80024ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80024b4:	0800a6c8 	.word	0x0800a6c8
  ldr r2, =_sbss
 80024b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80024bc:	20000ea8 	.word	0x20000ea8

080024c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC1_IRQHandler>

080024c2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f000 f949 	bl	8002764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024d2:	200f      	movs	r0, #15
 80024d4:	f000 f80e 	bl	80024f4 <HAL_InitTick>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	71fb      	strb	r3, [r7, #7]
 80024e2:	e001      	b.n	80024e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024e4:	f7ff f852 	bl	800158c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024e8:	79fb      	ldrb	r3, [r7, #7]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002500:	4b16      	ldr	r3, [pc, #88]	@ (800255c <HAL_InitTick+0x68>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d022      	beq.n	800254e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002508:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <HAL_InitTick+0x6c>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b13      	ldr	r3, [pc, #76]	@ (800255c <HAL_InitTick+0x68>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002514:	fbb1 f3f3 	udiv	r3, r1, r3
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	4618      	mov	r0, r3
 800251e:	f000 f989 	bl	8002834 <HAL_SYSTICK_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10f      	bne.n	8002548 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	d809      	bhi.n	8002542 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800252e:	2200      	movs	r2, #0
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	f04f 30ff 	mov.w	r0, #4294967295
 8002536:	f000 f935 	bl	80027a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800253a:	4a0a      	ldr	r2, [pc, #40]	@ (8002564 <HAL_InitTick+0x70>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	e007      	b.n	8002552 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e004      	b.n	8002552 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e001      	b.n	8002552 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000008 	.word	0x20000008
 8002560:	20000000 	.word	0x20000000
 8002564:	20000004 	.word	0x20000004

08002568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_IncTick+0x1c>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <HAL_IncTick+0x20>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4413      	add	r3, r2
 8002576:	4a03      	ldr	r2, [pc, #12]	@ (8002584 <HAL_IncTick+0x1c>)
 8002578:	6013      	str	r3, [r2, #0]
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000d58 	.word	0x20000d58
 8002588:	20000008 	.word	0x20000008

0800258c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b02      	ldr	r3, [pc, #8]	@ (800259c <HAL_GetTick+0x10>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	20000d58 	.word	0x20000d58

080025a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b0:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025bc:	4013      	ands	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d2:	4a04      	ldr	r2, [pc, #16]	@ (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	60d3      	str	r3, [r2, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ec:	4b04      	ldr	r3, [pc, #16]	@ (8002600 <__NVIC_GetPriorityGrouping+0x18>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 0307 	and.w	r3, r3, #7
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	2b00      	cmp	r3, #0
 8002614:	db0b      	blt.n	800262e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	4906      	ldr	r1, [pc, #24]	@ (8002638 <__NVIC_EnableIRQ+0x34>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2001      	movs	r0, #1
 8002626:	fa00 f202 	lsl.w	r2, r0, r2
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	@ (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	@ (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	@ 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	@ 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026f8:	f3bf 8f4f 	dsb	sy
}
 80026fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <__NVIC_SystemReset+0x24>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002706:	4904      	ldr	r1, [pc, #16]	@ (8002718 <__NVIC_SystemReset+0x24>)
 8002708:	4b04      	ldr	r3, [pc, #16]	@ (800271c <__NVIC_SystemReset+0x28>)
 800270a:	4313      	orrs	r3, r2
 800270c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800270e:	f3bf 8f4f 	dsb	sy
}
 8002712:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <__NVIC_SystemReset+0x20>
 8002718:	e000ed00 	.word	0xe000ed00
 800271c:	05fa0004 	.word	0x05fa0004

08002720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002730:	d301      	bcc.n	8002736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002732:	2301      	movs	r3, #1
 8002734:	e00f      	b.n	8002756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002736:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <SysTick_Config+0x40>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273e:	210f      	movs	r1, #15
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	f7ff ff7a 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <SysTick_Config+0x40>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274e:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <SysTick_Config+0x40>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000e010 	.word	0xe000e010

08002764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b07      	cmp	r3, #7
 8002770:	d00f      	beq.n	8002792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b06      	cmp	r3, #6
 8002776:	d00c      	beq.n	8002792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b05      	cmp	r3, #5
 800277c:	d009      	beq.n	8002792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d006      	beq.n	8002792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d003      	beq.n	8002792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800278a:	21ab      	movs	r1, #171	@ 0xab
 800278c:	4804      	ldr	r0, [pc, #16]	@ (80027a0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800278e:	f7fe feeb 	bl	8001568 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ff04 	bl	80025a0 <__NVIC_SetPriorityGrouping>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	0800a2a4 	.word	0x0800a2a4

080027a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b0f      	cmp	r3, #15
 80027ba:	d903      	bls.n	80027c4 <HAL_NVIC_SetPriority+0x20>
 80027bc:	21c3      	movs	r1, #195	@ 0xc3
 80027be:	480e      	ldr	r0, [pc, #56]	@ (80027f8 <HAL_NVIC_SetPriority+0x54>)
 80027c0:	f7fe fed2 	bl	8001568 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b0f      	cmp	r3, #15
 80027c8:	d903      	bls.n	80027d2 <HAL_NVIC_SetPriority+0x2e>
 80027ca:	21c4      	movs	r1, #196	@ 0xc4
 80027cc:	480a      	ldr	r0, [pc, #40]	@ (80027f8 <HAL_NVIC_SetPriority+0x54>)
 80027ce:	f7fe fecb 	bl	8001568 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d2:	f7ff ff09 	bl	80025e8 <__NVIC_GetPriorityGrouping>
 80027d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	6978      	ldr	r0, [r7, #20]
 80027de:	f7ff ff57 	bl	8002690 <NVIC_EncodePriority>
 80027e2:	4602      	mov	r2, r0
 80027e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff ff26 	bl	800263c <__NVIC_SetPriority>
}
 80027f0:	bf00      	nop
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	0800a2a4 	.word	0x0800a2a4

080027fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	2b00      	cmp	r3, #0
 800280c:	da03      	bge.n	8002816 <HAL_NVIC_EnableIRQ+0x1a>
 800280e:	21d7      	movs	r1, #215	@ 0xd7
 8002810:	4805      	ldr	r0, [pc, #20]	@ (8002828 <HAL_NVIC_EnableIRQ+0x2c>)
 8002812:	f7fe fea9 	bl	8001568 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fef2 	bl	8002604 <__NVIC_EnableIRQ>
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	0800a2a4 	.word	0x0800a2a4

0800282c <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002830:	f7ff ff60 	bl	80026f4 <__NVIC_SystemReset>

08002834 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ff6f 	bl	8002720 <SysTick_Config>
 8002842:	4603      	mov	r3, r0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d008      	beq.n	8002876 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2204      	movs	r2, #4
 8002868:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e022      	b.n	80028bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 020e 	bic.w	r2, r2, #14
 8002884:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0201 	bic.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	f003 021c 	and.w	r2, r3, #28
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a2:	2101      	movs	r1, #1
 80028a4:	fa01 f202 	lsl.w	r2, r1, r2
 80028a8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d005      	beq.n	80028ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2204      	movs	r2, #4
 80028e2:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	e029      	b.n	800293e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 020e 	bic.w	r2, r2, #14
 80028f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f003 021c 	and.w	r2, r3, #28
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
    }
  }
  return status;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002956:	b2db      	uxtb	r3, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
	...

08002964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a6c <HAL_GPIO_Init+0x108>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01f      	beq.n	80029c2 <HAL_GPIO_Init+0x5e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a3a      	ldr	r2, [pc, #232]	@ (8002a70 <HAL_GPIO_Init+0x10c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01b      	beq.n	80029c2 <HAL_GPIO_Init+0x5e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a39      	ldr	r2, [pc, #228]	@ (8002a74 <HAL_GPIO_Init+0x110>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d017      	beq.n	80029c2 <HAL_GPIO_Init+0x5e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a38      	ldr	r2, [pc, #224]	@ (8002a78 <HAL_GPIO_Init+0x114>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d013      	beq.n	80029c2 <HAL_GPIO_Init+0x5e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a37      	ldr	r2, [pc, #220]	@ (8002a7c <HAL_GPIO_Init+0x118>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00f      	beq.n	80029c2 <HAL_GPIO_Init+0x5e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a36      	ldr	r2, [pc, #216]	@ (8002a80 <HAL_GPIO_Init+0x11c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <HAL_GPIO_Init+0x5e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a35      	ldr	r2, [pc, #212]	@ (8002a84 <HAL_GPIO_Init+0x120>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d007      	beq.n	80029c2 <HAL_GPIO_Init+0x5e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a34      	ldr	r2, [pc, #208]	@ (8002a88 <HAL_GPIO_Init+0x124>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x5e>
 80029ba:	21b1      	movs	r1, #177	@ 0xb1
 80029bc:	4833      	ldr	r0, [pc, #204]	@ (8002a8c <HAL_GPIO_Init+0x128>)
 80029be:	f7fe fdd3 	bl	8001568 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <HAL_GPIO_Init+0x72>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d4:	d303      	bcc.n	80029de <HAL_GPIO_Init+0x7a>
 80029d6:	21b2      	movs	r1, #178	@ 0xb2
 80029d8:	482c      	ldr	r0, [pc, #176]	@ (8002a8c <HAL_GPIO_Init+0x128>)
 80029da:	f7fe fdc5 	bl	8001568 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 821b 	beq.w	8002e1e <HAL_GPIO_Init+0x4ba>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	f000 8216 	beq.w	8002e1e <HAL_GPIO_Init+0x4ba>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b11      	cmp	r3, #17
 80029f8:	f000 8211 	beq.w	8002e1e <HAL_GPIO_Init+0x4ba>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	f000 820c 	beq.w	8002e1e <HAL_GPIO_Init+0x4ba>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b12      	cmp	r3, #18
 8002a0c:	f000 8207 	beq.w	8002e1e <HAL_GPIO_Init+0x4ba>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002a18:	f000 8201 	beq.w	8002e1e <HAL_GPIO_Init+0x4ba>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002a24:	f000 81fb 	beq.w	8002e1e <HAL_GPIO_Init+0x4ba>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8002a30:	f000 81f5 	beq.w	8002e1e <HAL_GPIO_Init+0x4ba>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8002a3c:	f000 81ef 	beq.w	8002e1e <HAL_GPIO_Init+0x4ba>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002a48:	f000 81e9 	beq.w	8002e1e <HAL_GPIO_Init+0x4ba>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8002a54:	f000 81e3 	beq.w	8002e1e <HAL_GPIO_Init+0x4ba>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	f000 81de 	beq.w	8002e1e <HAL_GPIO_Init+0x4ba>
 8002a62:	21b3      	movs	r1, #179	@ 0xb3
 8002a64:	4809      	ldr	r0, [pc, #36]	@ (8002a8c <HAL_GPIO_Init+0x128>)
 8002a66:	f7fe fd7f 	bl	8001568 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a6a:	e1d8      	b.n	8002e1e <HAL_GPIO_Init+0x4ba>
 8002a6c:	40020000 	.word	0x40020000
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40020c00 	.word	0x40020c00
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40021800 	.word	0x40021800
 8002a84:	40021c00 	.word	0x40021c00
 8002a88:	40021400 	.word	0x40021400
 8002a8c:	0800a2e0 	.word	0x0800a2e0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2101      	movs	r1, #1
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 81b8 	beq.w	8002e18 <HAL_GPIO_Init+0x4b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d005      	beq.n	8002ac0 <HAL_GPIO_Init+0x15c>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d144      	bne.n	8002b4a <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00f      	beq.n	8002ae8 <HAL_GPIO_Init+0x184>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d00b      	beq.n	8002ae8 <HAL_GPIO_Init+0x184>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d007      	beq.n	8002ae8 <HAL_GPIO_Init+0x184>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x184>
 8002ae0:	21c3      	movs	r1, #195	@ 0xc3
 8002ae2:	4890      	ldr	r0, [pc, #576]	@ (8002d24 <HAL_GPIO_Init+0x3c0>)
 8002ae4:	f7fe fd40 	bl	8001568 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002b1e:	2201      	movs	r2, #1
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	f003 0201 	and.w	r2, r3, #1
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d027      	beq.n	8002ba6 <HAL_GPIO_Init+0x242>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_GPIO_Init+0x212>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d007      	beq.n	8002b76 <HAL_GPIO_Init+0x212>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x212>
 8002b6e:	21d4      	movs	r1, #212	@ 0xd4
 8002b70:	486c      	ldr	r0, [pc, #432]	@ (8002d24 <HAL_GPIO_Init+0x3c0>)
 8002b72:	f7fe fcf9 	bl	8001568 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d14f      	bne.n	8002c52 <HAL_GPIO_Init+0x2ee>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a5c      	ldr	r2, [pc, #368]	@ (8002d28 <HAL_GPIO_Init+0x3c4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01f      	beq.n	8002bfa <HAL_GPIO_Init+0x296>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a5b      	ldr	r2, [pc, #364]	@ (8002d2c <HAL_GPIO_Init+0x3c8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d01b      	beq.n	8002bfa <HAL_GPIO_Init+0x296>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a5a      	ldr	r2, [pc, #360]	@ (8002d30 <HAL_GPIO_Init+0x3cc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d017      	beq.n	8002bfa <HAL_GPIO_Init+0x296>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a59      	ldr	r2, [pc, #356]	@ (8002d34 <HAL_GPIO_Init+0x3d0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_GPIO_Init+0x296>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a58      	ldr	r2, [pc, #352]	@ (8002d38 <HAL_GPIO_Init+0x3d4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00f      	beq.n	8002bfa <HAL_GPIO_Init+0x296>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a57      	ldr	r2, [pc, #348]	@ (8002d3c <HAL_GPIO_Init+0x3d8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00b      	beq.n	8002bfa <HAL_GPIO_Init+0x296>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a56      	ldr	r2, [pc, #344]	@ (8002d40 <HAL_GPIO_Init+0x3dc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <HAL_GPIO_Init+0x296>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a55      	ldr	r2, [pc, #340]	@ (8002d44 <HAL_GPIO_Init+0x3e0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x296>
 8002bf2:	21e1      	movs	r1, #225	@ 0xe1
 8002bf4:	484b      	ldr	r0, [pc, #300]	@ (8002d24 <HAL_GPIO_Init+0x3c0>)
 8002bf6:	f7fe fcb7 	bl	8001568 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b0f      	cmp	r3, #15
 8002c00:	d903      	bls.n	8002c0a <HAL_GPIO_Init+0x2a6>
 8002c02:	21e2      	movs	r1, #226	@ 0xe2
 8002c04:	4847      	ldr	r0, [pc, #284]	@ (8002d24 <HAL_GPIO_Init+0x3c0>)
 8002c06:	f7fe fcaf 	bl	8001568 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	08da      	lsrs	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3208      	adds	r2, #8
 8002c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c16:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	220f      	movs	r2, #15
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	08da      	lsrs	r2, r3, #3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3208      	adds	r2, #8
 8002c4c:	6939      	ldr	r1, [r7, #16]
 8002c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0203 	and.w	r2, r3, #3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80c2 	beq.w	8002e18 <HAL_GPIO_Init+0x4b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c94:	4b2c      	ldr	r3, [pc, #176]	@ (8002d48 <HAL_GPIO_Init+0x3e4>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4a2b      	ldr	r2, [pc, #172]	@ (8002d48 <HAL_GPIO_Init+0x3e4>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6213      	str	r3, [r2, #32]
 8002ca0:	4b29      	ldr	r3, [pc, #164]	@ (8002d48 <HAL_GPIO_Init+0x3e4>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cac:	4a27      	ldr	r2, [pc, #156]	@ (8002d4c <HAL_GPIO_Init+0x3e8>)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	220f      	movs	r2, #15
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a15      	ldr	r2, [pc, #84]	@ (8002d28 <HAL_GPIO_Init+0x3c4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d03b      	beq.n	8002d50 <HAL_GPIO_Init+0x3ec>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a14      	ldr	r2, [pc, #80]	@ (8002d2c <HAL_GPIO_Init+0x3c8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d01f      	beq.n	8002d20 <HAL_GPIO_Init+0x3bc>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a13      	ldr	r2, [pc, #76]	@ (8002d30 <HAL_GPIO_Init+0x3cc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d019      	beq.n	8002d1c <HAL_GPIO_Init+0x3b8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a12      	ldr	r2, [pc, #72]	@ (8002d34 <HAL_GPIO_Init+0x3d0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d013      	beq.n	8002d18 <HAL_GPIO_Init+0x3b4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a11      	ldr	r2, [pc, #68]	@ (8002d38 <HAL_GPIO_Init+0x3d4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00d      	beq.n	8002d14 <HAL_GPIO_Init+0x3b0>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a12      	ldr	r2, [pc, #72]	@ (8002d44 <HAL_GPIO_Init+0x3e0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d007      	beq.n	8002d10 <HAL_GPIO_Init+0x3ac>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a0e      	ldr	r2, [pc, #56]	@ (8002d3c <HAL_GPIO_Init+0x3d8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d101      	bne.n	8002d0c <HAL_GPIO_Init+0x3a8>
 8002d08:	2306      	movs	r3, #6
 8002d0a:	e022      	b.n	8002d52 <HAL_GPIO_Init+0x3ee>
 8002d0c:	2307      	movs	r3, #7
 8002d0e:	e020      	b.n	8002d52 <HAL_GPIO_Init+0x3ee>
 8002d10:	2305      	movs	r3, #5
 8002d12:	e01e      	b.n	8002d52 <HAL_GPIO_Init+0x3ee>
 8002d14:	2304      	movs	r3, #4
 8002d16:	e01c      	b.n	8002d52 <HAL_GPIO_Init+0x3ee>
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e01a      	b.n	8002d52 <HAL_GPIO_Init+0x3ee>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e018      	b.n	8002d52 <HAL_GPIO_Init+0x3ee>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e016      	b.n	8002d52 <HAL_GPIO_Init+0x3ee>
 8002d24:	0800a2e0 	.word	0x0800a2e0
 8002d28:	40020000 	.word	0x40020000
 8002d2c:	40020400 	.word	0x40020400
 8002d30:	40020800 	.word	0x40020800
 8002d34:	40020c00 	.word	0x40020c00
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40021800 	.word	0x40021800
 8002d40:	40021c00 	.word	0x40021c00
 8002d44:	40021400 	.word	0x40021400
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	2300      	movs	r3, #0
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	f002 0203 	and.w	r2, r2, #3
 8002d58:	0092      	lsls	r2, r2, #2
 8002d5a:	4093      	lsls	r3, r2
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d62:	4935      	ldr	r1, [pc, #212]	@ (8002e38 <HAL_GPIO_Init+0x4d4>)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d70:	4b32      	ldr	r3, [pc, #200]	@ (8002e3c <HAL_GPIO_Init+0x4d8>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x430>
        {
          SET_BIT(temp, iocurrent);
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d94:	4a29      	ldr	r2, [pc, #164]	@ (8002e3c <HAL_GPIO_Init+0x4d8>)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d9a:	4b28      	ldr	r3, [pc, #160]	@ (8002e3c <HAL_GPIO_Init+0x4d8>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x45a>
        {
          SET_BIT(temp, iocurrent);
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8002e3c <HAL_GPIO_Init+0x4d8>)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <HAL_GPIO_Init+0x4d8>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x484>
        {
          SET_BIT(temp, iocurrent);
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002de8:	4a14      	ldr	r2, [pc, #80]	@ (8002e3c <HAL_GPIO_Init+0x4d8>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dee:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <HAL_GPIO_Init+0x4d8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x4ae>
        {
          SET_BIT(temp, iocurrent);
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e12:	4a0a      	ldr	r2, [pc, #40]	@ (8002e3c <HAL_GPIO_Init+0x4d8>)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f47f ae31 	bne.w	8002a90 <HAL_GPIO_Init+0x12c>
  }
}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	40010400 	.word	0x40010400

08002e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002e4c:	887b      	ldrh	r3, [r7, #2]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d104      	bne.n	8002e5c <HAL_GPIO_ReadPin+0x1c>
 8002e52:	f44f 71c1 	mov.w	r1, #386	@ 0x182
 8002e56:	4809      	ldr	r0, [pc, #36]	@ (8002e7c <HAL_GPIO_ReadPin+0x3c>)
 8002e58:	f7fe fb86 	bl	8001568 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	887b      	ldrh	r3, [r7, #2]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	e001      	b.n	8002e72 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	0800a2e0 	.word	0x0800a2e0

08002e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002e90:	887b      	ldrh	r3, [r7, #2]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d104      	bne.n	8002ea0 <HAL_GPIO_WritePin+0x20>
 8002e96:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8002e9a:	480e      	ldr	r0, [pc, #56]	@ (8002ed4 <HAL_GPIO_WritePin+0x54>)
 8002e9c:	f7fe fb64 	bl	8001568 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002ea0:	787b      	ldrb	r3, [r7, #1]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_GPIO_WritePin+0x36>
 8002ea6:	787b      	ldrb	r3, [r7, #1]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d004      	beq.n	8002eb6 <HAL_GPIO_WritePin+0x36>
 8002eac:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8002eb0:	4808      	ldr	r0, [pc, #32]	@ (8002ed4 <HAL_GPIO_WritePin+0x54>)
 8002eb2:	f7fe fb59 	bl	8001568 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002eb6:	787b      	ldrb	r3, [r7, #1]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ebc:	887a      	ldrh	r2, [r7, #2]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002ec2:	e003      	b.n	8002ecc <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	041a      	lsls	r2, r3, #16
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	619a      	str	r2, [r3, #24]
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	0800a2e0 	.word	0x0800a2e0

08002ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ee2:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d006      	beq.n	8002efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eee:	4a05      	ldr	r2, [pc, #20]	@ (8002f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f806 	bl	8002f08 <HAL_GPIO_EXTI_Callback>
  }
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40010400 	.word	0x40010400

08002f08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e1b4      	b.n	8003298 <HAL_I2C_Init+0x37c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a9b      	ldr	r2, [pc, #620]	@ (80031a0 <HAL_I2C_Init+0x284>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d009      	beq.n	8002f4c <HAL_I2C_Init+0x30>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a99      	ldr	r2, [pc, #612]	@ (80031a4 <HAL_I2C_Init+0x288>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <HAL_I2C_Init+0x30>
 8002f42:	f240 11c9 	movw	r1, #457	@ 0x1c9
 8002f46:	4898      	ldr	r0, [pc, #608]	@ (80031a8 <HAL_I2C_Init+0x28c>)
 8002f48:	f7fe fb0e 	bl	8001568 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d004      	beq.n	8002f5e <HAL_I2C_Init+0x42>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a94      	ldr	r2, [pc, #592]	@ (80031ac <HAL_I2C_Init+0x290>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d904      	bls.n	8002f68 <HAL_I2C_Init+0x4c>
 8002f5e:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 8002f62:	4891      	ldr	r0, [pc, #580]	@ (80031a8 <HAL_I2C_Init+0x28c>)
 8002f64:	f7fe fb00 	bl	8001568 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_I2C_Init+0x68>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f78:	d004      	beq.n	8002f84 <HAL_I2C_Init+0x68>
 8002f7a:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8002f7e:	488a      	ldr	r0, [pc, #552]	@ (80031a8 <HAL_I2C_Init+0x28c>)
 8002f80:	f7fe faf2 	bl	8001568 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f8c:	d304      	bcc.n	8002f98 <HAL_I2C_Init+0x7c>
 8002f8e:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8002f92:	4885      	ldr	r0, [pc, #532]	@ (80031a8 <HAL_I2C_Init+0x28c>)
 8002f94:	f7fe fae8 	bl	8001568 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fa0:	d009      	beq.n	8002fb6 <HAL_I2C_Init+0x9a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002faa:	d004      	beq.n	8002fb6 <HAL_I2C_Init+0x9a>
 8002fac:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8002fb0:	487d      	ldr	r0, [pc, #500]	@ (80031a8 <HAL_I2C_Init+0x28c>)
 8002fb2:	f7fe fad9 	bl	8001568 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_I2C_Init+0xb4>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d004      	beq.n	8002fd0 <HAL_I2C_Init+0xb4>
 8002fc6:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 8002fca:	4877      	ldr	r0, [pc, #476]	@ (80031a8 <HAL_I2C_Init+0x28c>)
 8002fcc:	f7fe facc 	bl	8001568 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <HAL_I2C_Init+0xca>
 8002fdc:	f240 11cf 	movw	r1, #463	@ 0x1cf
 8002fe0:	4871      	ldr	r0, [pc, #452]	@ (80031a8 <HAL_I2C_Init+0x28c>)
 8002fe2:	f7fe fac1 	bl	8001568 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_I2C_Init+0xe4>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	2b40      	cmp	r3, #64	@ 0x40
 8002ff4:	d004      	beq.n	8003000 <HAL_I2C_Init+0xe4>
 8002ff6:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8002ffa:	486b      	ldr	r0, [pc, #428]	@ (80031a8 <HAL_I2C_Init+0x28c>)
 8002ffc:	f7fe fab4 	bl	8001568 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_I2C_Init+0xfe>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	2b80      	cmp	r3, #128	@ 0x80
 800300e:	d004      	beq.n	800301a <HAL_I2C_Init+0xfe>
 8003010:	f240 11d1 	movw	r1, #465	@ 0x1d1
 8003014:	4864      	ldr	r0, [pc, #400]	@ (80031a8 <HAL_I2C_Init+0x28c>)
 8003016:	f7fe faa7 	bl	8001568 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_I2C_Init+0x118>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fe faea 	bl	8001608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2224      	movs	r2, #36	@ 0x24
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800305a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800306a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800306c:	f003 fa6a 	bl	8006544 <HAL_RCC_GetPCLK1Freq>
 8003070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4a4e      	ldr	r2, [pc, #312]	@ (80031b0 <HAL_I2C_Init+0x294>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d807      	bhi.n	800308c <HAL_I2C_Init+0x170>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a4d      	ldr	r2, [pc, #308]	@ (80031b4 <HAL_I2C_Init+0x298>)
 8003080:	4293      	cmp	r3, r2
 8003082:	bf94      	ite	ls
 8003084:	2301      	movls	r3, #1
 8003086:	2300      	movhi	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e006      	b.n	800309a <HAL_I2C_Init+0x17e>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4a4a      	ldr	r2, [pc, #296]	@ (80031b8 <HAL_I2C_Init+0x29c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	bf94      	ite	ls
 8003094:	2301      	movls	r3, #1
 8003096:	2300      	movhi	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e0fa      	b.n	8003298 <HAL_I2C_Init+0x37c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4a45      	ldr	r2, [pc, #276]	@ (80031bc <HAL_I2C_Init+0x2a0>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	0c9b      	lsrs	r3, r3, #18
 80030ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4a37      	ldr	r2, [pc, #220]	@ (80031b0 <HAL_I2C_Init+0x294>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d802      	bhi.n	80030dc <HAL_I2C_Init+0x1c0>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	3301      	adds	r3, #1
 80030da:	e009      	b.n	80030f0 <HAL_I2C_Init+0x1d4>
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	4a36      	ldr	r2, [pc, #216]	@ (80031c0 <HAL_I2C_Init+0x2a4>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	3301      	adds	r3, #1
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003102:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4929      	ldr	r1, [pc, #164]	@ (80031b0 <HAL_I2C_Init+0x294>)
 800310c:	428b      	cmp	r3, r1
 800310e:	d819      	bhi.n	8003144 <HAL_I2C_Init+0x228>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1e59      	subs	r1, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	fbb1 f3f3 	udiv	r3, r1, r3
 800311e:	1c59      	adds	r1, r3, #1
 8003120:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003124:	400b      	ands	r3, r1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_I2C_Init+0x224>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1e59      	subs	r1, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fbb1 f3f3 	udiv	r3, r1, r3
 8003138:	3301      	adds	r3, #1
 800313a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313e:	e064      	b.n	800320a <HAL_I2C_Init+0x2ee>
 8003140:	2304      	movs	r3, #4
 8003142:	e062      	b.n	800320a <HAL_I2C_Init+0x2ee>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d111      	bne.n	8003170 <HAL_I2C_Init+0x254>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	440b      	add	r3, r1
 800315a:	fbb0 f3f3 	udiv	r3, r0, r3
 800315e:	3301      	adds	r3, #1
 8003160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e012      	b.n	8003196 <HAL_I2C_Init+0x27a>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e58      	subs	r0, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	0099      	lsls	r1, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	fbb0 f3f3 	udiv	r3, r0, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d014      	beq.n	80031c4 <HAL_I2C_Init+0x2a8>
 800319a:	2301      	movs	r3, #1
 800319c:	e035      	b.n	800320a <HAL_I2C_Init+0x2ee>
 800319e:	bf00      	nop
 80031a0:	40005400 	.word	0x40005400
 80031a4:	40005800 	.word	0x40005800
 80031a8:	0800a31c 	.word	0x0800a31c
 80031ac:	00061a80 	.word	0x00061a80
 80031b0:	000186a0 	.word	0x000186a0
 80031b4:	001e847f 	.word	0x001e847f
 80031b8:	003d08ff 	.word	0x003d08ff
 80031bc:	431bde83 	.word	0x431bde83
 80031c0:	10624dd3 	.word	0x10624dd3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10e      	bne.n	80031ea <HAL_I2C_Init+0x2ce>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e58      	subs	r0, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	440b      	add	r3, r1
 80031da:	fbb0 f3f3 	udiv	r3, r0, r3
 80031de:	3301      	adds	r3, #1
 80031e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031e8:	e00f      	b.n	800320a <HAL_I2C_Init+0x2ee>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1e58      	subs	r0, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6859      	ldr	r1, [r3, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	0099      	lsls	r1, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003206:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	6809      	ldr	r1, [r1, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003238:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6911      	ldr	r1, [r2, #16]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	68d2      	ldr	r2, [r2, #12]
 8003244:	4311      	orrs	r1, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	430b      	orrs	r3, r1
 800324c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b2:	2b80      	cmp	r3, #128	@ 0x80
 80032b4:	d103      	bne.n	80032be <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
  }
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	@ 0x30
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	4608      	mov	r0, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	817b      	strh	r3, [r7, #10]
 80032da:	460b      	mov	r3, r1
 80032dc:	813b      	strh	r3, [r7, #8]
 80032de:	4613      	mov	r3, r2
 80032e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032e2:	f7ff f953 	bl	800258c <HAL_GetTick>
 80032e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d007      	beq.n	80032fe <HAL_I2C_Mem_Read+0x36>
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d004      	beq.n	80032fe <HAL_I2C_Mem_Read+0x36>
 80032f4:	f44f 6124 	mov.w	r1, #2624	@ 0xa40
 80032f8:	4881      	ldr	r0, [pc, #516]	@ (8003500 <HAL_I2C_Mem_Read+0x238>)
 80032fa:	f7fe f935 	bl	8001568 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b20      	cmp	r3, #32
 8003308:	f040 8209 	bne.w	800371e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2319      	movs	r3, #25
 8003312:	2201      	movs	r2, #1
 8003314:	497b      	ldr	r1, [pc, #492]	@ (8003504 <HAL_I2C_Mem_Read+0x23c>)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f001 fe3c 	bl	8004f94 <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8003322:	2302      	movs	r3, #2
 8003324:	e1fc      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_I2C_Mem_Read+0x6c>
 8003330:	2302      	movs	r3, #2
 8003332:	e1f5      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	d007      	beq.n	800335a <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0201 	orr.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003368:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2222      	movs	r2, #34	@ 0x22
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2240      	movs	r2, #64	@ 0x40
 8003376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800338a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4a5b      	ldr	r2, [pc, #364]	@ (8003508 <HAL_I2C_Mem_Read+0x240>)
 800339a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800339c:	88f8      	ldrh	r0, [r7, #6]
 800339e:	893a      	ldrh	r2, [r7, #8]
 80033a0:	8979      	ldrh	r1, [r7, #10]
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	9301      	str	r3, [sp, #4]
 80033a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	4603      	mov	r3, r0
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f001 fc61 	bl	8004c74 <I2C_RequestMemoryRead>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e1b1      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d113      	bne.n	80033ec <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c4:	2300      	movs	r3, #0
 80033c6:	623b      	str	r3, [r7, #32]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	623b      	str	r3, [r7, #32]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	623b      	str	r3, [r7, #32]
 80033d8:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e185      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d11b      	bne.n	800342c <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003402:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e165      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003430:	2b02      	cmp	r3, #2
 8003432:	d11b      	bne.n	800346c <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003442:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003452:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003454:	2300      	movs	r3, #0
 8003456:	61bb      	str	r3, [r7, #24]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	e145      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003482:	e139      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003488:	2b03      	cmp	r3, #3
 800348a:	f200 80f2 	bhi.w	8003672 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003492:	2b01      	cmp	r3, #1
 8003494:	d123      	bne.n	80034de <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003498:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f001 ff0e 	bl	80052bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e13a      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034dc:	e10c      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d14f      	bne.n	8003586 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ec:	2200      	movs	r2, #0
 80034ee:	4907      	ldr	r1, [pc, #28]	@ (800350c <HAL_I2C_Mem_Read+0x244>)
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f001 fd4f 	bl	8004f94 <I2C_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d009      	beq.n	8003510 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e10f      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
 8003500:	0800a31c 	.word	0x0800a31c
 8003504:	00100002 	.word	0x00100002
 8003508:	ffff0000 	.word	0xffff0000
 800350c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800351e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003584:	e0b8      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800358c:	2200      	movs	r2, #0
 800358e:	4966      	ldr	r1, [pc, #408]	@ (8003728 <HAL_I2C_Mem_Read+0x460>)
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f001 fcff 	bl	8004f94 <I2C_WaitOnFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0bf      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e8:	2200      	movs	r2, #0
 80035ea:	494f      	ldr	r1, [pc, #316]	@ (8003728 <HAL_I2C_Mem_Read+0x460>)
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f001 fcd1 	bl	8004f94 <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e091      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800360a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003670:	e042      	b.n	80036f8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003674:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f001 fe20 	bl	80052bc <I2C_WaitOnRXNEFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e04c      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d118      	bne.n	80036f8 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f47f aec1 	bne.w	8003484 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e000      	b.n	8003720 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	3728      	adds	r7, #40	@ 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	00010004 	.word	0x00010004

0800372c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800374c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003754:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b10      	cmp	r3, #16
 800375a:	d003      	beq.n	8003764 <HAL_I2C_EV_IRQHandler+0x38>
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b40      	cmp	r3, #64	@ 0x40
 8003760:	f040 80b1 	bne.w	80038c6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10d      	bne.n	800379a <HAL_I2C_EV_IRQHandler+0x6e>
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003784:	d003      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0x62>
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800378c:	d101      	bne.n	8003792 <HAL_I2C_EV_IRQHandler+0x66>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_I2C_EV_IRQHandler+0x68>
 8003792:	2300      	movs	r3, #0
 8003794:	2b01      	cmp	r3, #1
 8003796:	f000 8114 	beq.w	80039c2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00b      	beq.n	80037bc <HAL_I2C_EV_IRQHandler+0x90>
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f001 fe0f 	bl	80053d2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fcb9 	bl	800412c <I2C_Master_SB>
 80037ba:	e083      	b.n	80038c4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d008      	beq.n	80037d8 <HAL_I2C_EV_IRQHandler+0xac>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fd30 	bl	8004236 <I2C_Master_ADD10>
 80037d6:	e075      	b.n	80038c4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_I2C_EV_IRQHandler+0xc8>
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fd4b 	bl	8004288 <I2C_Master_ADDR>
 80037f2:	e067      	b.n	80038c4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d036      	beq.n	800386c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800380c:	f000 80db 	beq.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <HAL_I2C_EV_IRQHandler+0x10a>
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_I2C_EV_IRQHandler+0x10a>
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	d103      	bne.n	8003836 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f92d 	bl	8003a8e <I2C_MasterTransmit_TXE>
 8003834:	e046      	b.n	80038c4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80c2 	beq.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80bc 	beq.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800384e:	7bbb      	ldrb	r3, [r7, #14]
 8003850:	2b21      	cmp	r3, #33	@ 0x21
 8003852:	d103      	bne.n	800385c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f9b6 	bl	8003bc6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800385a:	e0b4      	b.n	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b40      	cmp	r3, #64	@ 0x40
 8003860:	f040 80b1 	bne.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fa24 	bl	8003cb2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800386a:	e0ac      	b.n	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003876:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800387a:	f000 80a4 	beq.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <HAL_I2C_EV_IRQHandler+0x178>
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_I2C_EV_IRQHandler+0x178>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 faa0 	bl	8003de2 <I2C_MasterReceive_RXNE>
 80038a2:	e00f      	b.n	80038c4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 808b 	beq.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8085 	beq.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fb4b 	bl	8003f58 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038c2:	e080      	b.n	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
 80038c4:	e07f      	b.n	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d004      	beq.n	80038d8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	e007      	b.n	80038e8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d011      	beq.n	8003916 <HAL_I2C_EV_IRQHandler+0x1ea>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00c      	beq.n	8003916 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800390c:	69b9      	ldr	r1, [r7, #24]
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 ff06 	bl	8004720 <I2C_Slave_ADDR>
 8003914:	e05a      	b.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_I2C_EV_IRQHandler+0x206>
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 ff40 	bl	80047b0 <I2C_Slave_STOPF>
 8003930:	e04c      	b.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003932:	7bbb      	ldrb	r3, [r7, #14]
 8003934:	2b21      	cmp	r3, #33	@ 0x21
 8003936:	d002      	beq.n	800393e <HAL_I2C_EV_IRQHandler+0x212>
 8003938:	7bbb      	ldrb	r3, [r7, #14]
 800393a:	2b29      	cmp	r3, #41	@ 0x29
 800393c:	d120      	bne.n	8003980 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <HAL_I2C_EV_IRQHandler+0x238>
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <HAL_I2C_EV_IRQHandler+0x238>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fe23 	bl	80045a8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003962:	e032      	b.n	80039ca <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02d      	beq.n	80039ca <HAL_I2C_EV_IRQHandler+0x29e>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003974:	2b00      	cmp	r3, #0
 8003976:	d028      	beq.n	80039ca <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fe52 	bl	8004622 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800397e:	e024      	b.n	80039ca <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <HAL_I2C_EV_IRQHandler+0x27a>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_I2C_EV_IRQHandler+0x27a>
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d103      	bne.n	80039a6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fe5f 	bl	8004662 <I2C_SlaveReceive_RXNE>
 80039a4:	e012      	b.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fe8f 	bl	80046de <I2C_SlaveReceive_BTF>
 80039c0:	e004      	b.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80039c2:	bf00      	nop
 80039c4:	e002      	b.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c6:	bf00      	nop
 80039c8:	e000      	b.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70fb      	strb	r3, [r7, #3]
 8003a26:	4613      	mov	r3, r2
 8003a28:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr

08003a8e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aa4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aaa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d150      	bne.n	8003b56 <I2C_MasterTransmit_TXE+0xc8>
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b21      	cmp	r3, #33	@ 0x21
 8003ab8:	d14d      	bne.n	8003b56 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d01d      	beq.n	8003afc <I2C_MasterTransmit_TXE+0x6e>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d01a      	beq.n	8003afc <I2C_MasterTransmit_TXE+0x6e>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003acc:	d016      	beq.n	8003afc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003adc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2211      	movs	r2, #17
 8003ae2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ff6c 	bl	80039d2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003afa:	e060      	b.n	8003bbe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b0a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b40      	cmp	r3, #64	@ 0x40
 8003b34:	d107      	bne.n	8003b46 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ff81 	bl	8003a46 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b44:	e03b      	b.n	8003bbe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff ff3f 	bl	80039d2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b54:	e033      	b.n	8003bbe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b21      	cmp	r3, #33	@ 0x21
 8003b5a:	d005      	beq.n	8003b68 <I2C_MasterTransmit_TXE+0xda>
 8003b5c:	7bbb      	ldrb	r3, [r7, #14]
 8003b5e:	2b40      	cmp	r3, #64	@ 0x40
 8003b60:	d12d      	bne.n	8003bbe <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b22      	cmp	r3, #34	@ 0x22
 8003b66:	d12a      	bne.n	8003bbe <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d108      	bne.n	8003b84 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b80:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b82:	e01c      	b.n	8003bbe <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b40      	cmp	r3, #64	@ 0x40
 8003b8e:	d103      	bne.n	8003b98 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f88e 	bl	8003cb2 <I2C_MemoryTransmit_TXE_BTF>
}
 8003b96:	e012      	b.n	8003bbe <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003bbc:	e7ff      	b.n	8003bbe <I2C_MasterTransmit_TXE+0x130>
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b21      	cmp	r3, #33	@ 0x21
 8003bde:	d164      	bne.n	8003caa <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d012      	beq.n	8003c10 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	781a      	ldrb	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003c0e:	e04c      	b.n	8003caa <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d01d      	beq.n	8003c52 <I2C_MasterTransmit_BTF+0x8c>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d01a      	beq.n	8003c52 <I2C_MasterTransmit_BTF+0x8c>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c22:	d016      	beq.n	8003c52 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c32:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2211      	movs	r2, #17
 8003c38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff fec1 	bl	80039d2 <HAL_I2C_MasterTxCpltCallback>
}
 8003c50:	e02b      	b.n	8003caa <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c60:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c70:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b40      	cmp	r3, #64	@ 0x40
 8003c8a:	d107      	bne.n	8003c9c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff fed6 	bl	8003a46 <HAL_I2C_MemTxCpltCallback>
}
 8003c9a:	e006      	b.n	8003caa <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff fe94 	bl	80039d2 <HAL_I2C_MasterTxCpltCallback>
}
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d11d      	bne.n	8003d06 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d10b      	bne.n	8003cea <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce2:	1c9a      	adds	r2, r3, #2
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003ce8:	e077      	b.n	8003dda <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	121b      	asrs	r3, r3, #8
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d04:	e069      	b.n	8003dda <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d10b      	bne.n	8003d26 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d24:	e059      	b.n	8003dda <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d152      	bne.n	8003dd4 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	2b22      	cmp	r3, #34	@ 0x22
 8003d32:	d10d      	bne.n	8003d50 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d42:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d4e:	e044      	b.n	8003dda <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d015      	beq.n	8003d86 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b21      	cmp	r3, #33	@ 0x21
 8003d5e:	d112      	bne.n	8003d86 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	781a      	ldrb	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d84:	e029      	b.n	8003dda <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d124      	bne.n	8003dda <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b21      	cmp	r3, #33	@ 0x21
 8003d94:	d121      	bne.n	8003dda <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003da4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff fe3a 	bl	8003a46 <HAL_I2C_MemTxCpltCallback>
}
 8003dd2:	e002      	b.n	8003dda <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff fa63 	bl	80032a0 <I2C_Flush_DR>
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b22      	cmp	r3, #34	@ 0x22
 8003df4:	f040 80ac 	bne.w	8003f50 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d921      	bls.n	8003e4a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	f040 808c 	bne.w	8003f50 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e46:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003e48:	e082      	b.n	8003f50 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d075      	beq.n	8003f3e <I2C_MasterReceive_RXNE+0x15c>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d002      	beq.n	8003e5e <I2C_MasterReceive_RXNE+0x7c>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d16f      	bne.n	8003f3e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f001 f9fa 	bl	8005258 <I2C_WaitOnSTOPRequestThroughIT>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d142      	bne.n	8003ef0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e78:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e88:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b40      	cmp	r3, #64	@ 0x40
 8003ec2:	d10a      	bne.n	8003eda <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fdc0 	bl	8003a58 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ed8:	e03a      	b.n	8003f50 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2212      	movs	r2, #18
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fd7b 	bl	80039e4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003eee:	e02f      	b.n	8003f50 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003efe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff fd97 	bl	8003a6a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f3c:	e008      	b.n	8003f50 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f4c:	605a      	str	r2, [r3, #4]
}
 8003f4e:	e7ff      	b.n	8003f50 <I2C_MasterReceive_RXNE+0x16e>
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f64:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d11b      	bne.n	8003fa8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f7e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003fa6:	e0bd      	b.n	8004124 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d129      	bne.n	8004006 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d00a      	beq.n	8003fde <I2C_MasterReceive_BTF+0x86>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d007      	beq.n	8003fde <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fdc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004004:	e08e      	b.n	8004124 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d176      	bne.n	80040fe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d002      	beq.n	800401c <I2C_MasterReceive_BTF+0xc4>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b10      	cmp	r3, #16
 800401a:	d108      	bne.n	800402e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	e019      	b.n	8004062 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b04      	cmp	r3, #4
 8004032:	d002      	beq.n	800403a <I2C_MasterReceive_BTF+0xe2>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d108      	bne.n	800404c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	e00a      	b.n	8004062 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b10      	cmp	r3, #16
 8004050:	d007      	beq.n	8004062 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004060:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80040bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b40      	cmp	r3, #64	@ 0x40
 80040d0:	d10a      	bne.n	80040e8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fcb9 	bl	8003a58 <HAL_I2C_MemRxCpltCallback>
}
 80040e6:	e01d      	b.n	8004124 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2212      	movs	r2, #18
 80040f4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff fc74 	bl	80039e4 <HAL_I2C_MasterRxCpltCallback>
}
 80040fc:	e012      	b.n	8004124 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b40      	cmp	r3, #64	@ 0x40
 800413e:	d117      	bne.n	8004170 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004144:	2b00      	cmp	r3, #0
 8004146:	d109      	bne.n	800415c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004158:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800415a:	e067      	b.n	800422c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	611a      	str	r2, [r3, #16]
}
 800416e:	e05d      	b.n	800422c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004178:	d133      	bne.n	80041e2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b21      	cmp	r3, #33	@ 0x21
 8004184:	d109      	bne.n	800419a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	b2db      	uxtb	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004196:	611a      	str	r2, [r3, #16]
 8004198:	e008      	b.n	80041ac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d004      	beq.n	80041be <I2C_Master_SB+0x92>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d108      	bne.n	80041d0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d032      	beq.n	800422c <I2C_Master_SB+0x100>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d02d      	beq.n	800422c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041de:	605a      	str	r2, [r3, #4]
}
 80041e0:	e024      	b.n	800422c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10e      	bne.n	8004208 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	11db      	asrs	r3, r3, #7
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f003 0306 	and.w	r3, r3, #6
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f063 030f 	orn	r3, r3, #15
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	611a      	str	r2, [r3, #16]
}
 8004206:	e011      	b.n	800422c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800420c:	2b01      	cmp	r3, #1
 800420e:	d10d      	bne.n	800422c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004214:	b29b      	uxth	r3, r3
 8004216:	11db      	asrs	r3, r3, #7
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 0306 	and.w	r3, r3, #6
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f063 030e 	orn	r3, r3, #14
 8004224:	b2da      	uxtb	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	611a      	str	r2, [r3, #16]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr

08004236 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	b2da      	uxtb	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <I2C_Master_ADD10+0x26>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004258:	2b00      	cmp	r3, #0
 800425a:	d108      	bne.n	800426e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00c      	beq.n	800427e <I2C_Master_ADD10+0x48>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800427c:	605a      	str	r2, [r3, #4]
  }
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004288:	b480      	push	{r7}
 800428a:	b091      	sub	sp, #68	@ 0x44
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004296:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b22      	cmp	r3, #34	@ 0x22
 80042b0:	f040 8169 	bne.w	8004586 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10f      	bne.n	80042dc <I2C_Master_ADDR+0x54>
 80042bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80042c0:	2b40      	cmp	r3, #64	@ 0x40
 80042c2:	d10b      	bne.n	80042dc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c4:	2300      	movs	r3, #0
 80042c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	e160      	b.n	800459e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d11d      	bne.n	8004320 <I2C_Master_ADDR+0x98>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80042ec:	d118      	bne.n	8004320 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ee:	2300      	movs	r3, #0
 80042f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004312:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	651a      	str	r2, [r3, #80]	@ 0x50
 800431e:	e13e      	b.n	800459e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d113      	bne.n	8004352 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432a:	2300      	movs	r3, #0
 800432c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e115      	b.n	800457e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	f040 808a 	bne.w	8004472 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004360:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004364:	d137      	bne.n	80043d6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004374:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004384:	d113      	bne.n	80043ae <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004394:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004396:	2300      	movs	r3, #0
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	e0e7      	b.n	800457e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ae:	2300      	movs	r3, #0
 80043b0:	623b      	str	r3, [r7, #32]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	623b      	str	r3, [r7, #32]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	623b      	str	r3, [r7, #32]
 80043c2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	e0d3      	b.n	800457e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80043d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d02e      	beq.n	800443a <I2C_Master_ADDR+0x1b2>
 80043dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043de:	2b20      	cmp	r3, #32
 80043e0:	d02b      	beq.n	800443a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80043e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e4:	2b12      	cmp	r3, #18
 80043e6:	d102      	bne.n	80043ee <I2C_Master_ADDR+0x166>
 80043e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d125      	bne.n	800443a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d00e      	beq.n	8004412 <I2C_Master_ADDR+0x18a>
 80043f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d00b      	beq.n	8004412 <I2C_Master_ADDR+0x18a>
 80043fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fc:	2b10      	cmp	r3, #16
 80043fe:	d008      	beq.n	8004412 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	e007      	b.n	8004422 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004420:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	e0a1      	b.n	800457e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004448:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	e085      	b.n	800457e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d14d      	bne.n	8004518 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800447c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447e:	2b04      	cmp	r3, #4
 8004480:	d016      	beq.n	80044b0 <I2C_Master_ADDR+0x228>
 8004482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004484:	2b02      	cmp	r3, #2
 8004486:	d013      	beq.n	80044b0 <I2C_Master_ADDR+0x228>
 8004488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448a:	2b10      	cmp	r3, #16
 800448c:	d010      	beq.n	80044b0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800449c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e007      	b.n	80044c0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044be:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ce:	d117      	bne.n	8004500 <I2C_Master_ADDR+0x278>
 80044d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044d6:	d00b      	beq.n	80044f0 <I2C_Master_ADDR+0x268>
 80044d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d008      	beq.n	80044f0 <I2C_Master_ADDR+0x268>
 80044de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d005      	beq.n	80044f0 <I2C_Master_ADDR+0x268>
 80044e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d002      	beq.n	80044f0 <I2C_Master_ADDR+0x268>
 80044ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d107      	bne.n	8004500 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044fe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	e032      	b.n	800457e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004526:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004532:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004536:	d117      	bne.n	8004568 <I2C_Master_ADDR+0x2e0>
 8004538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800453e:	d00b      	beq.n	8004558 <I2C_Master_ADDR+0x2d0>
 8004540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004542:	2b01      	cmp	r3, #1
 8004544:	d008      	beq.n	8004558 <I2C_Master_ADDR+0x2d0>
 8004546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004548:	2b08      	cmp	r3, #8
 800454a:	d005      	beq.n	8004558 <I2C_Master_ADDR+0x2d0>
 800454c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454e:	2b10      	cmp	r3, #16
 8004550:	d002      	beq.n	8004558 <I2C_Master_ADDR+0x2d0>
 8004552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004554:	2b20      	cmp	r3, #32
 8004556:	d107      	bne.n	8004568 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004566:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004584:	e00b      	b.n	800459e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
}
 800459c:	e7ff      	b.n	800459e <I2C_Master_ADDR+0x316>
 800459e:	bf00      	nop
 80045a0:	3744      	adds	r7, #68	@ 0x44
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d02b      	beq.n	800461a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	781a      	ldrb	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d114      	bne.n	800461a <I2C_SlaveTransmit_TXE+0x72>
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	2b29      	cmp	r3, #41	@ 0x29
 80045f4:	d111      	bne.n	800461a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004604:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2221      	movs	r2, #33	@ 0x21
 800460a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2228      	movs	r2, #40	@ 0x28
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff f9ee 	bl	80039f6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800461a:	bf00      	nop
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d011      	beq.n	8004658 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr

08004662 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004670:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d02c      	beq.n	80046d6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d114      	bne.n	80046d6 <I2C_SlaveReceive_RXNE+0x74>
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80046b0:	d111      	bne.n	80046d6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2222      	movs	r2, #34	@ 0x22
 80046c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2228      	movs	r2, #40	@ 0x28
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff f999 	bl	8003a08 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d012      	beq.n	8004716 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800473a:	2b28      	cmp	r3, #40	@ 0x28
 800473c:	d125      	bne.n	800478a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	81bb      	strh	r3, [r7, #12]
 800476c:	e002      	b.n	8004774 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800477c:	89ba      	ldrh	r2, [r7, #12]
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	4619      	mov	r1, r3
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff f949 	bl	8003a1a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004788:	e00e      	b.n	80047a8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80047d0:	2300      	movs	r3, #0
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800480c:	d172      	bne.n	80048f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	2b22      	cmp	r3, #34	@ 0x22
 8004812:	d002      	beq.n	800481a <I2C_Slave_STOPF+0x6a>
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	2b2a      	cmp	r3, #42	@ 0x2a
 8004818:	d135      	bne.n	8004886 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b29a      	uxth	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	f043 0204 	orr.w	r2, r3, #4
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800484c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe f878 	bl	8002948 <HAL_DMA_GetState>
 8004858:	4603      	mov	r3, r0
 800485a:	2b01      	cmp	r3, #1
 800485c:	d049      	beq.n	80048f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004862:	4a69      	ldr	r2, [pc, #420]	@ (8004a08 <I2C_Slave_STOPF+0x258>)
 8004864:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe f82b 	bl	80028c6 <HAL_DMA_Abort_IT>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d03d      	beq.n	80048f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004880:	4610      	mov	r0, r2
 8004882:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004884:	e035      	b.n	80048f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	f043 0204 	orr.w	r2, r3, #4
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe f842 	bl	8002948 <HAL_DMA_GetState>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d014      	beq.n	80048f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ce:	4a4e      	ldr	r2, [pc, #312]	@ (8004a08 <I2C_Slave_STOPF+0x258>)
 80048d0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fd fff5 	bl	80028c6 <HAL_DMA_Abort_IT>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d008      	beq.n	80048f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048ec:	4610      	mov	r0, r2
 80048ee:	4798      	blx	r3
 80048f0:	e000      	b.n	80048f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d03e      	beq.n	800497c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b04      	cmp	r3, #4
 800490a:	d112      	bne.n	8004932 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493c:	2b40      	cmp	r3, #64	@ 0x40
 800493e:	d112      	bne.n	8004966 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	f043 0204 	orr.w	r2, r3, #4
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f843 	bl	8004a10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800498a:	e039      	b.n	8004a00 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004990:	d109      	bne.n	80049a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2228      	movs	r2, #40	@ 0x28
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff f831 	bl	8003a08 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b28      	cmp	r3, #40	@ 0x28
 80049b0:	d111      	bne.n	80049d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a15      	ldr	r2, [pc, #84]	@ (8004a0c <I2C_Slave_STOPF+0x25c>)
 80049b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff f830 	bl	8003a34 <HAL_I2C_ListenCpltCallback>
}
 80049d4:	e014      	b.n	8004a00 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049da:	2b22      	cmp	r3, #34	@ 0x22
 80049dc:	d002      	beq.n	80049e4 <I2C_Slave_STOPF+0x234>
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	2b22      	cmp	r3, #34	@ 0x22
 80049e2:	d10d      	bne.n	8004a00 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff f804 	bl	8003a08 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	08004e45 	.word	0x08004e45
 8004a0c:	ffff0000 	.word	0xffff0000

08004a10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a28:	7bbb      	ldrb	r3, [r7, #14]
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d002      	beq.n	8004a34 <I2C_ITError+0x24>
 8004a2e:	7bbb      	ldrb	r3, [r7, #14]
 8004a30:	2b40      	cmp	r3, #64	@ 0x40
 8004a32:	d10a      	bne.n	8004a4a <I2C_ITError+0x3a>
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b22      	cmp	r3, #34	@ 0x22
 8004a38:	d107      	bne.n	8004a4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a50:	2b28      	cmp	r3, #40	@ 0x28
 8004a52:	d107      	bne.n	8004a64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2228      	movs	r2, #40	@ 0x28
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a62:	e015      	b.n	8004a90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a72:	d00a      	beq.n	8004a8a <I2C_ITError+0x7a>
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	2b60      	cmp	r3, #96	@ 0x60
 8004a78:	d007      	beq.n	8004a8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a9e:	d162      	bne.n	8004b66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d020      	beq.n	8004b00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac2:	4a6a      	ldr	r2, [pc, #424]	@ (8004c6c <I2C_ITError+0x25c>)
 8004ac4:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fd fefb 	bl	80028c6 <HAL_DMA_Abort_IT>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8089 	beq.w	8004bea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004afa:	4610      	mov	r0, r2
 8004afc:	4798      	blx	r3
 8004afe:	e074      	b.n	8004bea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b04:	4a59      	ldr	r2, [pc, #356]	@ (8004c6c <I2C_ITError+0x25c>)
 8004b06:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fd feda 	bl	80028c6 <HAL_DMA_Abort_IT>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d068      	beq.n	8004bea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b22:	2b40      	cmp	r3, #64	@ 0x40
 8004b24:	d10b      	bne.n	8004b3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0201 	bic.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b60:	4610      	mov	r0, r2
 8004b62:	4798      	blx	r3
 8004b64:	e041      	b.n	8004bea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b60      	cmp	r3, #96	@ 0x60
 8004b70:	d125      	bne.n	8004bbe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8a:	2b40      	cmp	r3, #64	@ 0x40
 8004b8c:	d10b      	bne.n	8004ba6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b98:	b2d2      	uxtb	r2, r2
 8004b9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fe ff60 	bl	8003a7c <HAL_I2C_AbortCpltCallback>
 8004bbc:	e015      	b.n	8004bea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc8:	2b40      	cmp	r3, #64	@ 0x40
 8004bca:	d10b      	bne.n	8004be4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7fe ff40 	bl	8003a6a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10e      	bne.n	8004c18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d113      	bne.n	8004c64 <I2C_ITError+0x254>
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	2b28      	cmp	r3, #40	@ 0x28
 8004c40:	d110      	bne.n	8004c64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a0a      	ldr	r2, [pc, #40]	@ (8004c70 <I2C_ITError+0x260>)
 8004c46:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fe fee8 	bl	8003a34 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	08004e45 	.word	0x08004e45
 8004c70:	ffff0000 	.word	0xffff0000

08004c74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	4611      	mov	r1, r2
 8004c80:	461a      	mov	r2, r3
 8004c82:	4603      	mov	r3, r0
 8004c84:	817b      	strh	r3, [r7, #10]
 8004c86:	460b      	mov	r3, r1
 8004c88:	813b      	strh	r3, [r7, #8]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f96a 	bl	8004f94 <I2C_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00d      	beq.n	8004ce2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cd4:	d103      	bne.n	8004cde <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cdc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e0aa      	b.n	8004e38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ce2:	897b      	ldrh	r3, [r7, #10]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	6a3a      	ldr	r2, [r7, #32]
 8004cf6:	4952      	ldr	r1, [pc, #328]	@ (8004e40 <I2C_RequestMemoryRead+0x1cc>)
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f9c5 	bl	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e097      	b.n	8004e38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d20:	6a39      	ldr	r1, [r7, #32]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fa50 	bl	80051c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00d      	beq.n	8004d4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d107      	bne.n	8004d46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e076      	b.n	8004e38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d105      	bne.n	8004d5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d50:	893b      	ldrh	r3, [r7, #8]
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	611a      	str	r2, [r3, #16]
 8004d5a:	e021      	b.n	8004da0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d5c:	893b      	ldrh	r3, [r7, #8]
 8004d5e:	0a1b      	lsrs	r3, r3, #8
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d6c:	6a39      	ldr	r1, [r7, #32]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fa2a 	bl	80051c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00d      	beq.n	8004d96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d107      	bne.n	8004d92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e050      	b.n	8004e38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d96:	893b      	ldrh	r3, [r7, #8]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da2:	6a39      	ldr	r1, [r7, #32]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 fa0f 	bl	80051c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00d      	beq.n	8004dcc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d107      	bne.n	8004dc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e035      	b.n	8004e38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f8d3 	bl	8004f94 <I2C_WaitOnFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00d      	beq.n	8004e10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e02:	d103      	bne.n	8004e0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e013      	b.n	8004e38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e10:	897b      	ldrh	r3, [r7, #10]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	f043 0301 	orr.w	r3, r3, #1
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	6a3a      	ldr	r2, [r7, #32]
 8004e24:	4906      	ldr	r1, [pc, #24]	@ (8004e40 <I2C_RequestMemoryRead+0x1cc>)
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f92e 	bl	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	00010002 	.word	0x00010002

08004e44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e5c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e5e:	4b4b      	ldr	r3, [pc, #300]	@ (8004f8c <I2C_DMAAbort+0x148>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	08db      	lsrs	r3, r3, #3
 8004e64:	4a4a      	ldr	r2, [pc, #296]	@ (8004f90 <I2C_DMAAbort+0x14c>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	0a1a      	lsrs	r2, r3, #8
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	00da      	lsls	r2, r3, #3
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004e8a:	e00a      	b.n	8004ea2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ea0:	d0ea      	beq.n	8004e78 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eae:	2200      	movs	r2, #0
 8004eb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b60      	cmp	r3, #96	@ 0x60
 8004f12:	d10e      	bne.n	8004f32 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2200      	movs	r2, #0
 8004f28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f2a:	6978      	ldr	r0, [r7, #20]
 8004f2c:	f7fe fda6 	bl	8003a7c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f30:	e027      	b.n	8004f82 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f32:	7cfb      	ldrb	r3, [r7, #19]
 8004f34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f38:	2b28      	cmp	r3, #40	@ 0x28
 8004f3a:	d117      	bne.n	8004f6c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2228      	movs	r2, #40	@ 0x28
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f6a:	e007      	b.n	8004f7c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f7c:	6978      	ldr	r0, [r7, #20]
 8004f7e:	f7fe fd74 	bl	8003a6a <HAL_I2C_ErrorCallback>
}
 8004f82:	bf00      	nop
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000000 	.word	0x20000000
 8004f90:	14f8b589 	.word	0x14f8b589

08004f94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fa4:	e048      	b.n	8005038 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d044      	beq.n	8005038 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fae:	f7fd faed 	bl	800258c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d139      	bne.n	8005038 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	0c1b      	lsrs	r3, r3, #16
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10d      	bne.n	8004fea <I2C_WaitOnFlagUntilTimeout+0x56>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	43da      	mvns	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf0c      	ite	eq
 8004fe0:	2301      	moveq	r3, #1
 8004fe2:	2300      	movne	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	e00c      	b.n	8005004 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	43da      	mvns	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	bf0c      	ite	eq
 8004ffc:	2301      	moveq	r3, #1
 8004ffe:	2300      	movne	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	461a      	mov	r2, r3
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	429a      	cmp	r2, r3
 8005008:	d116      	bne.n	8005038 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005024:	f043 0220 	orr.w	r2, r3, #32
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e023      	b.n	8005080 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	0c1b      	lsrs	r3, r3, #16
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b01      	cmp	r3, #1
 8005040:	d10d      	bne.n	800505e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	43da      	mvns	r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	4013      	ands	r3, r2
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	e00c      	b.n	8005078 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	43da      	mvns	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4013      	ands	r3, r2
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	bf0c      	ite	eq
 8005070:	2301      	moveq	r3, #1
 8005072:	2300      	movne	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	429a      	cmp	r2, r3
 800507c:	d093      	beq.n	8004fa6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005096:	e071      	b.n	800517c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050a6:	d123      	bne.n	80050f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050dc:	f043 0204 	orr.w	r2, r3, #4
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e067      	b.n	80051c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f6:	d041      	beq.n	800517c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f8:	f7fd fa48 	bl	800258c <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	429a      	cmp	r2, r3
 8005106:	d302      	bcc.n	800510e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d136      	bne.n	800517c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d10c      	bne.n	8005132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	43da      	mvns	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	bf14      	ite	ne
 800512a:	2301      	movne	r3, #1
 800512c:	2300      	moveq	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	e00b      	b.n	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	43da      	mvns	r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4013      	ands	r3, r2
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d016      	beq.n	800517c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005168:	f043 0220 	orr.w	r2, r3, #32
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e021      	b.n	80051c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	0c1b      	lsrs	r3, r3, #16
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b01      	cmp	r3, #1
 8005184:	d10c      	bne.n	80051a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	43da      	mvns	r2, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	4013      	ands	r3, r2
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	bf14      	ite	ne
 8005198:	2301      	movne	r3, #1
 800519a:	2300      	moveq	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	e00b      	b.n	80051b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	43da      	mvns	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4013      	ands	r3, r2
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf14      	ite	ne
 80051b2:	2301      	movne	r3, #1
 80051b4:	2300      	moveq	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f47f af6d 	bne.w	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051d4:	e034      	b.n	8005240 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 f8cd 	bl	8005376 <I2C_IsAcknowledgeFailed>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e034      	b.n	8005250 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d028      	beq.n	8005240 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fd f9cd 	bl	800258c <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d11d      	bne.n	8005240 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520e:	2b80      	cmp	r3, #128	@ 0x80
 8005210:	d016      	beq.n	8005240 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522c:	f043 0220 	orr.w	r2, r3, #32
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e007      	b.n	8005250 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800524a:	2b80      	cmp	r3, #128	@ 0x80
 800524c:	d1c3      	bne.n	80051d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005264:	4b13      	ldr	r3, [pc, #76]	@ (80052b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	08db      	lsrs	r3, r3, #3
 800526a:	4a13      	ldr	r2, [pc, #76]	@ (80052b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	0a1a      	lsrs	r2, r3, #8
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3b01      	subs	r3, #1
 800527e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d107      	bne.n	8005296 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	f043 0220 	orr.w	r2, r3, #32
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e008      	b.n	80052a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052a4:	d0e9      	beq.n	800527a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000000 	.word	0x20000000
 80052b8:	14f8b589 	.word	0x14f8b589

080052bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052c8:	e049      	b.n	800535e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d119      	bne.n	800530c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0210 	mvn.w	r2, #16
 80052e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e030      	b.n	800536e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530c:	f7fd f93e 	bl	800258c <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	429a      	cmp	r2, r3
 800531a:	d302      	bcc.n	8005322 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d11d      	bne.n	800535e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532c:	2b40      	cmp	r3, #64	@ 0x40
 800532e:	d016      	beq.n	800535e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	f043 0220 	orr.w	r2, r3, #32
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e007      	b.n	800536e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005368:	2b40      	cmp	r3, #64	@ 0x40
 800536a:	d1ae      	bne.n	80052ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800538c:	d11b      	bne.n	80053c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005396:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	f043 0204 	orr.w	r2, r3, #4
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053de:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80053e2:	d103      	bne.n	80053ec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80053ea:	e007      	b.n	80053fc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80053f4:	d102      	bne.n	80053fc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2208      	movs	r2, #8
 80053fa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr
	...

08005408 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e066      	b.n	80054e8 <HAL_IWDG_Init+0xe0>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a34      	ldr	r2, [pc, #208]	@ (80054f0 <HAL_IWDG_Init+0xe8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <HAL_IWDG_Init+0x24>
 8005424:	21ae      	movs	r1, #174	@ 0xae
 8005426:	4833      	ldr	r0, [pc, #204]	@ (80054f4 <HAL_IWDG_Init+0xec>)
 8005428:	f7fc f89e 	bl	8001568 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01b      	beq.n	800546c <HAL_IWDG_Init+0x64>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d017      	beq.n	800546c <HAL_IWDG_Init+0x64>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d013      	beq.n	800546c <HAL_IWDG_Init+0x64>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b03      	cmp	r3, #3
 800544a:	d00f      	beq.n	800546c <HAL_IWDG_Init+0x64>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b04      	cmp	r3, #4
 8005452:	d00b      	beq.n	800546c <HAL_IWDG_Init+0x64>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b05      	cmp	r3, #5
 800545a:	d007      	beq.n	800546c <HAL_IWDG_Init+0x64>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b06      	cmp	r3, #6
 8005462:	d003      	beq.n	800546c <HAL_IWDG_Init+0x64>
 8005464:	21af      	movs	r1, #175	@ 0xaf
 8005466:	4823      	ldr	r0, [pc, #140]	@ (80054f4 <HAL_IWDG_Init+0xec>)
 8005468:	f7fc f87e 	bl	8001568 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005474:	d303      	bcc.n	800547e <HAL_IWDG_Init+0x76>
 8005476:	21b0      	movs	r1, #176	@ 0xb0
 8005478:	481e      	ldr	r0, [pc, #120]	@ (80054f4 <HAL_IWDG_Init+0xec>)
 800547a:	f7fc f875 	bl	8001568 <assert_failed>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8005486:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8005490:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6852      	ldr	r2, [r2, #4]
 800549a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6892      	ldr	r2, [r2, #8]
 80054a4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80054a6:	f7fd f871 	bl	800258c <HAL_GetTick>
 80054aa:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80054ac:	e00f      	b.n	80054ce <HAL_IWDG_Init+0xc6>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80054ae:	f7fd f86d 	bl	800258c <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80054ba:	d908      	bls.n	80054ce <HAL_IWDG_Init+0xc6>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_IWDG_Init+0xc6>
      {
        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e00c      	b.n	80054e8 <HAL_IWDG_Init+0xe0>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e8      	bne.n	80054ae <HAL_IWDG_Init+0xa6>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80054e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40003000 	.word	0x40003000
 80054f4:	0800a354 	.word	0x0800a354

080054f8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005508:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr
	...

08005518 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d020      	beq.n	800556a <HAL_PWR_ConfigPVD+0x52>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b20      	cmp	r3, #32
 800552e:	d01c      	beq.n	800556a <HAL_PWR_ConfigPVD+0x52>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b40      	cmp	r3, #64	@ 0x40
 8005536:	d018      	beq.n	800556a <HAL_PWR_ConfigPVD+0x52>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b60      	cmp	r3, #96	@ 0x60
 800553e:	d014      	beq.n	800556a <HAL_PWR_ConfigPVD+0x52>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b80      	cmp	r3, #128	@ 0x80
 8005546:	d010      	beq.n	800556a <HAL_PWR_ConfigPVD+0x52>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2ba0      	cmp	r3, #160	@ 0xa0
 800554e:	d00c      	beq.n	800556a <HAL_PWR_ConfigPVD+0x52>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2bc0      	cmp	r3, #192	@ 0xc0
 8005556:	d008      	beq.n	800556a <HAL_PWR_ConfigPVD+0x52>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2be0      	cmp	r3, #224	@ 0xe0
 800555e:	d004      	beq.n	800556a <HAL_PWR_ConfigPVD+0x52>
 8005560:	f240 1155 	movw	r1, #341	@ 0x155
 8005564:	483f      	ldr	r0, [pc, #252]	@ (8005664 <HAL_PWR_ConfigPVD+0x14c>)
 8005566:	f7fb ffff 	bl	8001568 <assert_failed>
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8005572:	d021      	beq.n	80055b8 <HAL_PWR_ConfigPVD+0xa0>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	4a3b      	ldr	r2, [pc, #236]	@ (8005668 <HAL_PWR_ConfigPVD+0x150>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01c      	beq.n	80055b8 <HAL_PWR_ConfigPVD+0xa0>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	4a3a      	ldr	r2, [pc, #232]	@ (800566c <HAL_PWR_ConfigPVD+0x154>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d017      	beq.n	80055b8 <HAL_PWR_ConfigPVD+0xa0>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	4a38      	ldr	r2, [pc, #224]	@ (8005670 <HAL_PWR_ConfigPVD+0x158>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d012      	beq.n	80055b8 <HAL_PWR_ConfigPVD+0xa0>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f1b3 1f02 	cmp.w	r3, #131074	@ 0x20002
 800559a:	d00d      	beq.n	80055b8 <HAL_PWR_ConfigPVD+0xa0>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4a34      	ldr	r2, [pc, #208]	@ (8005674 <HAL_PWR_ConfigPVD+0x15c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d008      	beq.n	80055b8 <HAL_PWR_ConfigPVD+0xa0>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <HAL_PWR_ConfigPVD+0xa0>
 80055ae:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 80055b2:	482c      	ldr	r0, [pc, #176]	@ (8005664 <HAL_PWR_ConfigPVD+0x14c>)
 80055b4:	f7fb ffd8 	bl	8001568 <assert_failed>

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 80055b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005678 <HAL_PWR_ConfigPVD+0x160>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	492c      	ldr	r1, [pc, #176]	@ (8005678 <HAL_PWR_ConfigPVD+0x160>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	600b      	str	r3, [r1, #0]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80055ca:	4b2c      	ldr	r3, [pc, #176]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	4a2b      	ldr	r2, [pc, #172]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 80055d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d4:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80055d6:	4b29      	ldr	r3, [pc, #164]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a28      	ldr	r2, [pc, #160]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 80055dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055e0:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE();
 80055e2:	4b26      	ldr	r3, [pc, #152]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	4a25      	ldr	r2, [pc, #148]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 80055e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ec:	6093      	str	r3, [r2, #8]
 80055ee:	4b23      	ldr	r3, [pc, #140]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	4a22      	ldr	r2, [pc, #136]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 80055f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055f8:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_PWR_ConfigPVD+0xfa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8005606:	4b1d      	ldr	r3, [pc, #116]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1c      	ldr	r2, [pc, #112]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 800560c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005610:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <HAL_PWR_ConfigPVD+0x112>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800561e:	4b17      	ldr	r3, [pc, #92]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4a16      	ldr	r2, [pc, #88]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 8005624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005628:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <HAL_PWR_ConfigPVD+0x12a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8005636:	4b11      	ldr	r3, [pc, #68]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	4a10      	ldr	r2, [pc, #64]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005640:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <HAL_PWR_ConfigPVD+0x142>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800564e:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	4a0a      	ldr	r2, [pc, #40]	@ (800567c <HAL_PWR_ConfigPVD+0x164>)
 8005654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005658:	60d3      	str	r3, [r2, #12]
  }
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	0800a390 	.word	0x0800a390
 8005668:	00010002 	.word	0x00010002
 800566c:	00010003 	.word	0x00010003
 8005670:	00020001 	.word	0x00020001
 8005674:	00020003 	.word	0x00020003
 8005678:	40007000 	.word	0x40007000
 800567c:	40010400 	.word	0x40010400

08005680 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	2310      	movs	r3, #16
 8005688:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	fa93 f3a3 	rbit	r3, r3
 8005690:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005692:	683b      	ldr	r3, [r7, #0]
  /* Enable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 8005694:	fab3 f383 	clz	r3, r3
 8005698:	b2db      	uxtb	r3, r3
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80056a0:	f503 2360 	add.w	r3, r3, #917504	@ 0xe0000
 80056a4:	461a      	mov	r2, r3
 80056a6:	2301      	movs	r3, #1
 80056a8:	6013      	str	r3, [r2, #0]
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr

080056b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d102      	bne.n	80056c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	f000 bc6b 	b.w	8005f9e <HAL_RCC_OscConfig+0x8ea>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d022      	beq.n	8005716 <HAL_RCC_OscConfig+0x62>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d11c      	bne.n	8005716 <HAL_RCC_OscConfig+0x62>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d116      	bne.n	8005716 <HAL_RCC_OscConfig+0x62>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d110      	bne.n	8005716 <HAL_RCC_OscConfig+0x62>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <HAL_RCC_OscConfig+0x62>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <HAL_RCC_OscConfig+0x62>
 800570c:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8005710:	4897      	ldr	r0, [pc, #604]	@ (8005970 <HAL_RCC_OscConfig+0x2bc>)
 8005712:	f7fb ff29 	bl	8001568 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005716:	4b97      	ldr	r3, [pc, #604]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 030c 	and.w	r3, r3, #12
 800571e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005720:	4b94      	ldr	r3, [pc, #592]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005728:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 808e 	beq.w	8005854 <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00c      	beq.n	800575a <HAL_RCC_OscConfig+0xa6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d008      	beq.n	800575a <HAL_RCC_OscConfig+0xa6>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b05      	cmp	r3, #5
 800574e:	d004      	beq.n	800575a <HAL_RCC_OscConfig+0xa6>
 8005750:	f240 1157 	movw	r1, #343	@ 0x157
 8005754:	4886      	ldr	r0, [pc, #536]	@ (8005970 <HAL_RCC_OscConfig+0x2bc>)
 8005756:	f7fb ff07 	bl	8001568 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d006      	beq.n	800576e <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2b0c      	cmp	r3, #12
 8005764:	d110      	bne.n	8005788 <HAL_RCC_OscConfig+0xd4>
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800576c:	d10c      	bne.n	8005788 <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800576e:	4b81      	ldr	r3, [pc, #516]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d06b      	beq.n	8005852 <HAL_RCC_OscConfig+0x19e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d167      	bne.n	8005852 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f000 bc0b 	b.w	8005f9e <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d106      	bne.n	800579e <HAL_RCC_OscConfig+0xea>
 8005790:	4b78      	ldr	r3, [pc, #480]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a77      	ldr	r2, [pc, #476]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 8005796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	e02d      	b.n	80057fa <HAL_RCC_OscConfig+0x146>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10c      	bne.n	80057c0 <HAL_RCC_OscConfig+0x10c>
 80057a6:	4b73      	ldr	r3, [pc, #460]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a72      	ldr	r2, [pc, #456]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80057ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	4b70      	ldr	r3, [pc, #448]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a6f      	ldr	r2, [pc, #444]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80057b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e01c      	b.n	80057fa <HAL_RCC_OscConfig+0x146>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b05      	cmp	r3, #5
 80057c6:	d10c      	bne.n	80057e2 <HAL_RCC_OscConfig+0x12e>
 80057c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a69      	ldr	r2, [pc, #420]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80057ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	4b67      	ldr	r3, [pc, #412]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a66      	ldr	r2, [pc, #408]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80057da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	e00b      	b.n	80057fa <HAL_RCC_OscConfig+0x146>
 80057e2:	4b64      	ldr	r3, [pc, #400]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a63      	ldr	r2, [pc, #396]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80057e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	4b61      	ldr	r3, [pc, #388]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a60      	ldr	r2, [pc, #384]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80057f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d013      	beq.n	800582a <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005802:	f7fc fec3 	bl	800258c <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800580a:	f7fc febf 	bl	800258c <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b64      	cmp	r3, #100	@ 0x64
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e3c0      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800581c:	4b55      	ldr	r3, [pc, #340]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0f0      	beq.n	800580a <HAL_RCC_OscConfig+0x156>
 8005828:	e014      	b.n	8005854 <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582a:	f7fc feaf 	bl	800258c <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005832:	f7fc feab 	bl	800258c <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b64      	cmp	r3, #100	@ 0x64
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e3ac      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005844:	4b4b      	ldr	r3, [pc, #300]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1f0      	bne.n	8005832 <HAL_RCC_OscConfig+0x17e>
 8005850:	e000      	b.n	8005854 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005852:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d070      	beq.n	8005942 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d008      	beq.n	800587a <HAL_RCC_OscConfig+0x1c6>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d004      	beq.n	800587a <HAL_RCC_OscConfig+0x1c6>
 8005870:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8005874:	483e      	ldr	r0, [pc, #248]	@ (8005970 <HAL_RCC_OscConfig+0x2bc>)
 8005876:	f7fb fe77 	bl	8001568 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b1f      	cmp	r3, #31
 8005880:	d904      	bls.n	800588c <HAL_RCC_OscConfig+0x1d8>
 8005882:	f240 118b 	movw	r1, #395	@ 0x18b
 8005886:	483a      	ldr	r0, [pc, #232]	@ (8005970 <HAL_RCC_OscConfig+0x2bc>)
 8005888:	f7fb fe6e 	bl	8001568 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b04      	cmp	r3, #4
 8005890:	d005      	beq.n	800589e <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b0c      	cmp	r3, #12
 8005896:	d119      	bne.n	80058cc <HAL_RCC_OscConfig+0x218>
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d116      	bne.n	80058cc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800589e:	4b35      	ldr	r3, [pc, #212]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_RCC_OscConfig+0x202>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d001      	beq.n	80058b6 <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e373      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	492b      	ldr	r1, [pc, #172]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ca:	e03a      	b.n	8005942 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d020      	beq.n	8005916 <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d4:	4b28      	ldr	r3, [pc, #160]	@ (8005978 <HAL_RCC_OscConfig+0x2c4>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058da:	f7fc fe57 	bl	800258c <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058e2:	f7fc fe53 	bl	800258c <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e354      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005900:	4b1c      	ldr	r3, [pc, #112]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	4919      	ldr	r1, [pc, #100]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 8005910:	4313      	orrs	r3, r2
 8005912:	604b      	str	r3, [r1, #4]
 8005914:	e015      	b.n	8005942 <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005916:	4b18      	ldr	r3, [pc, #96]	@ (8005978 <HAL_RCC_OscConfig+0x2c4>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591c:	f7fc fe36 	bl	800258c <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005924:	f7fc fe32 	bl	800258c <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e333      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005936:	4b0f      	ldr	r3, [pc, #60]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8129 	beq.w	8005ba2 <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f040 80a4 	bne.w	8005aa0 <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005958:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <HAL_RCC_OscConfig+0x2c0>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00b      	beq.n	800597c <HAL_RCC_OscConfig+0x2c8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d107      	bne.n	800597c <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e316      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
 8005970:	0800a3c8 	.word	0x0800a3c8
 8005974:	40023800 	.word	0x40023800
 8005978:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	2bff      	cmp	r3, #255	@ 0xff
 8005982:	d904      	bls.n	800598e <HAL_RCC_OscConfig+0x2da>
 8005984:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8005988:	4899      	ldr	r0, [pc, #612]	@ (8005bf0 <HAL_RCC_OscConfig+0x53c>)
 800598a:	f7fb fded 	bl	8001568 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d022      	beq.n	80059dc <HAL_RCC_OscConfig+0x328>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800599e:	d01d      	beq.n	80059dc <HAL_RCC_OscConfig+0x328>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059a8:	d018      	beq.n	80059dc <HAL_RCC_OscConfig+0x328>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80059b2:	d013      	beq.n	80059dc <HAL_RCC_OscConfig+0x328>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059bc:	d00e      	beq.n	80059dc <HAL_RCC_OscConfig+0x328>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80059c6:	d009      	beq.n	80059dc <HAL_RCC_OscConfig+0x328>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80059d0:	d004      	beq.n	80059dc <HAL_RCC_OscConfig+0x328>
 80059d2:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 80059d6:	4886      	ldr	r0, [pc, #536]	@ (8005bf0 <HAL_RCC_OscConfig+0x53c>)
 80059d8:	f7fb fdc6 	bl	8001568 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1a      	ldr	r2, [r3, #32]
 80059e0:	4b84      	ldr	r3, [pc, #528]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d91d      	bls.n	8005a28 <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fdcf 	bl	8006594 <RCC_SetFlashLatencyFromMSIRange>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e2ce      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a00:	4b7c      	ldr	r3, [pc, #496]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	4979      	ldr	r1, [pc, #484]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a12:	4b78      	ldr	r3, [pc, #480]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	061b      	lsls	r3, r3, #24
 8005a20:	4974      	ldr	r1, [pc, #464]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	604b      	str	r3, [r1, #4]
 8005a26:	e01c      	b.n	8005a62 <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a28:	4b72      	ldr	r3, [pc, #456]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	496f      	ldr	r1, [pc, #444]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a3a:	4b6e      	ldr	r3, [pc, #440]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	061b      	lsls	r3, r3, #24
 8005a48:	496a      	ldr	r1, [pc, #424]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fd9e 	bl	8006594 <RCC_SetFlashLatencyFromMSIRange>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e29d      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	0b5b      	lsrs	r3, r3, #13
 8005a68:	3301      	adds	r3, #1
 8005a6a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005a72:	4a60      	ldr	r2, [pc, #384]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005a74:	6892      	ldr	r2, [r2, #8]
 8005a76:	0912      	lsrs	r2, r2, #4
 8005a78:	f002 020f 	and.w	r2, r2, #15
 8005a7c:	495e      	ldr	r1, [pc, #376]	@ (8005bf8 <HAL_RCC_OscConfig+0x544>)
 8005a7e:	5c8a      	ldrb	r2, [r1, r2]
 8005a80:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005a82:	4a5e      	ldr	r2, [pc, #376]	@ (8005bfc <HAL_RCC_OscConfig+0x548>)
 8005a84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a86:	4b5e      	ldr	r3, [pc, #376]	@ (8005c00 <HAL_RCC_OscConfig+0x54c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fc fd32 	bl	80024f4 <HAL_InitTick>
 8005a90:	4603      	mov	r3, r0
 8005a92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8083 	beq.w	8005ba2 <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	e27e      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_RCC_OscConfig+0x406>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d004      	beq.n	8005aba <HAL_RCC_OscConfig+0x406>
 8005ab0:	f240 2106 	movw	r1, #518	@ 0x206
 8005ab4:	484e      	ldr	r0, [pc, #312]	@ (8005bf0 <HAL_RCC_OscConfig+0x53c>)
 8005ab6:	f7fb fd57 	bl	8001568 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d059      	beq.n	8005b76 <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ac2:	4b50      	ldr	r3, [pc, #320]	@ (8005c04 <HAL_RCC_OscConfig+0x550>)
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac8:	f7fc fd60 	bl	800258c <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ad0:	f7fc fd5c 	bl	800258c <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e25d      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005ae2:	4b44      	ldr	r3, [pc, #272]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	2bff      	cmp	r3, #255	@ 0xff
 8005af4:	d904      	bls.n	8005b00 <HAL_RCC_OscConfig+0x44c>
 8005af6:	f240 211a 	movw	r1, #538	@ 0x21a
 8005afa:	483d      	ldr	r0, [pc, #244]	@ (8005bf0 <HAL_RCC_OscConfig+0x53c>)
 8005afc:	f7fb fd34 	bl	8001568 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d022      	beq.n	8005b4e <HAL_RCC_OscConfig+0x49a>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b10:	d01d      	beq.n	8005b4e <HAL_RCC_OscConfig+0x49a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b1a:	d018      	beq.n	8005b4e <HAL_RCC_OscConfig+0x49a>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b24:	d013      	beq.n	8005b4e <HAL_RCC_OscConfig+0x49a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b2e:	d00e      	beq.n	8005b4e <HAL_RCC_OscConfig+0x49a>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b38:	d009      	beq.n	8005b4e <HAL_RCC_OscConfig+0x49a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005b42:	d004      	beq.n	8005b4e <HAL_RCC_OscConfig+0x49a>
 8005b44:	f240 211b 	movw	r1, #539	@ 0x21b
 8005b48:	4829      	ldr	r0, [pc, #164]	@ (8005bf0 <HAL_RCC_OscConfig+0x53c>)
 8005b4a:	f7fb fd0d 	bl	8001568 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b4e:	4b29      	ldr	r3, [pc, #164]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	4926      	ldr	r1, [pc, #152]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b60:	4b24      	ldr	r3, [pc, #144]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	061b      	lsls	r3, r3, #24
 8005b6e:	4921      	ldr	r1, [pc, #132]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	604b      	str	r3, [r1, #4]
 8005b74:	e015      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b76:	4b23      	ldr	r3, [pc, #140]	@ (8005c04 <HAL_RCC_OscConfig+0x550>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7c:	f7fc fd06 	bl	800258c <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b84:	f7fc fd02 	bl	800258c <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e203      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005b96:	4b17      	ldr	r3, [pc, #92]	@ (8005bf4 <HAL_RCC_OscConfig+0x540>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1f0      	bne.n	8005b84 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d04b      	beq.n	8005c46 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d008      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x514>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d004      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x514>
 8005bbe:	f240 213a 	movw	r1, #570	@ 0x23a
 8005bc2:	480b      	ldr	r0, [pc, #44]	@ (8005bf0 <HAL_RCC_OscConfig+0x53c>)
 8005bc4:	f7fb fcd0 	bl	8001568 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d024      	beq.n	8005c1a <HAL_RCC_OscConfig+0x566>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8005c08 <HAL_RCC_OscConfig+0x554>)
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bd6:	f7fc fcd9 	bl	800258c <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bdc:	e016      	b.n	8005c0c <HAL_RCC_OscConfig+0x558>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bde:	f7fc fcd5 	bl	800258c <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d90f      	bls.n	8005c0c <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e1d6      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
 8005bf0:	0800a3c8 	.word	0x0800a3c8
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	0800a4bc 	.word	0x0800a4bc
 8005bfc:	20000000 	.word	0x20000000
 8005c00:	20000004 	.word	0x20000004
 8005c04:	42470020 	.word	0x42470020
 8005c08:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c0c:	4b65      	ldr	r3, [pc, #404]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0e2      	beq.n	8005bde <HAL_RCC_OscConfig+0x52a>
 8005c18:	e015      	b.n	8005c46 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c1a:	4b63      	ldr	r3, [pc, #396]	@ (8005da8 <HAL_RCC_OscConfig+0x6f4>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c20:	f7fc fcb4 	bl	800258c <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c28:	f7fc fcb0 	bl	800258c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e1b1      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c3a:	4b5a      	ldr	r3, [pc, #360]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1f0      	bne.n	8005c28 <HAL_RCC_OscConfig+0x574>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 80bf 	beq.w	8005dd2 <HAL_RCC_OscConfig+0x71e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c54:	2300      	movs	r3, #0
 8005c56:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00c      	beq.n	8005c7a <HAL_RCC_OscConfig+0x5c6>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d008      	beq.n	8005c7a <HAL_RCC_OscConfig+0x5c6>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	d004      	beq.n	8005c7a <HAL_RCC_OscConfig+0x5c6>
 8005c70:	f240 2166 	movw	r1, #614	@ 0x266
 8005c74:	484d      	ldr	r0, [pc, #308]	@ (8005dac <HAL_RCC_OscConfig+0x6f8>)
 8005c76:	f7fb fc77 	bl	8001568 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10d      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x5ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c86:	4b47      	ldr	r3, [pc, #284]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	4a46      	ldr	r2, [pc, #280]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c90:	6253      	str	r3, [r2, #36]	@ 0x24
 8005c92:	4b44      	ldr	r3, [pc, #272]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c9a:	60bb      	str	r3, [r7, #8]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca2:	4b43      	ldr	r3, [pc, #268]	@ (8005db0 <HAL_RCC_OscConfig+0x6fc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d118      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x62c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cae:	4b40      	ldr	r3, [pc, #256]	@ (8005db0 <HAL_RCC_OscConfig+0x6fc>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8005db0 <HAL_RCC_OscConfig+0x6fc>)
 8005cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cba:	f7fc fc67 	bl	800258c <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x620>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc2:	f7fc fc63 	bl	800258c <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b64      	cmp	r3, #100	@ 0x64
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x620>
        {
          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e164      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd4:	4b36      	ldr	r3, [pc, #216]	@ (8005db0 <HAL_RCC_OscConfig+0x6fc>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f0      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x60e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d106      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x642>
 8005ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cec:	4a2d      	ldr	r2, [pc, #180]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cf2:	6353      	str	r3, [r2, #52]	@ 0x34
 8005cf4:	e02d      	b.n	8005d52 <HAL_RCC_OscConfig+0x69e>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10c      	bne.n	8005d18 <HAL_RCC_OscConfig+0x664>
 8005cfe:	4b29      	ldr	r3, [pc, #164]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d02:	4a28      	ldr	r2, [pc, #160]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d08:	6353      	str	r3, [r2, #52]	@ 0x34
 8005d0a:	4b26      	ldr	r3, [pc, #152]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d0e:	4a25      	ldr	r2, [pc, #148]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005d10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d14:	6353      	str	r3, [r2, #52]	@ 0x34
 8005d16:	e01c      	b.n	8005d52 <HAL_RCC_OscConfig+0x69e>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	2b05      	cmp	r3, #5
 8005d1e:	d10c      	bne.n	8005d3a <HAL_RCC_OscConfig+0x686>
 8005d20:	4b20      	ldr	r3, [pc, #128]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d24:	4a1f      	ldr	r2, [pc, #124]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005d26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d2a:	6353      	str	r3, [r2, #52]	@ 0x34
 8005d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d30:	4a1c      	ldr	r2, [pc, #112]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d36:	6353      	str	r3, [r2, #52]	@ 0x34
 8005d38:	e00b      	b.n	8005d52 <HAL_RCC_OscConfig+0x69e>
 8005d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d3e:	4a19      	ldr	r2, [pc, #100]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d44:	6353      	str	r3, [r2, #52]	@ 0x34
 8005d46:	4b17      	ldr	r3, [pc, #92]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d4a:	4a16      	ldr	r2, [pc, #88]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005d4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d50:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d015      	beq.n	8005d86 <HAL_RCC_OscConfig+0x6d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d5a:	f7fc fc17 	bl	800258c <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d60:	e00a      	b.n	8005d78 <HAL_RCC_OscConfig+0x6c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d62:	f7fc fc13 	bl	800258c <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_OscConfig+0x6c4>
        {
          return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e112      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d78:	4b0a      	ldr	r3, [pc, #40]	@ (8005da4 <HAL_RCC_OscConfig+0x6f0>)
 8005d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0ee      	beq.n	8005d62 <HAL_RCC_OscConfig+0x6ae>
 8005d84:	e01c      	b.n	8005dc0 <HAL_RCC_OscConfig+0x70c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d86:	f7fc fc01 	bl	800258c <HAL_GetTick>
 8005d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d8c:	e012      	b.n	8005db4 <HAL_RCC_OscConfig+0x700>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d8e:	f7fc fbfd 	bl	800258c <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d909      	bls.n	8005db4 <HAL_RCC_OscConfig+0x700>
        {
          return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e0fc      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
 8005da4:	40023800 	.word	0x40023800
 8005da8:	42470680 	.word	0x42470680
 8005dac:	0800a3c8 	.word	0x0800a3c8
 8005db0:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005db4:	4b7c      	ldr	r3, [pc, #496]	@ (8005fa8 <HAL_RCC_OscConfig+0x8f4>)
 8005db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e6      	bne.n	8005d8e <HAL_RCC_OscConfig+0x6da>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005dc0:	7ffb      	ldrb	r3, [r7, #31]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d105      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x71e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dc6:	4b78      	ldr	r3, [pc, #480]	@ (8005fa8 <HAL_RCC_OscConfig+0x8f4>)
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dca:	4a77      	ldr	r2, [pc, #476]	@ (8005fa8 <HAL_RCC_OscConfig+0x8f4>)
 8005dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dd0:	6253      	str	r3, [r2, #36]	@ 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00c      	beq.n	8005df4 <HAL_RCC_OscConfig+0x740>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d008      	beq.n	8005df4 <HAL_RCC_OscConfig+0x740>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d004      	beq.n	8005df4 <HAL_RCC_OscConfig+0x740>
 8005dea:	f240 21aa 	movw	r1, #682	@ 0x2aa
 8005dee:	486f      	ldr	r0, [pc, #444]	@ (8005fac <HAL_RCC_OscConfig+0x8f8>)
 8005df0:	f7fb fbba 	bl	8001568 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80cf 	beq.w	8005f9c <HAL_RCC_OscConfig+0x8e8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b0c      	cmp	r3, #12
 8005e02:	f000 80ab 	beq.w	8005f5c <HAL_RCC_OscConfig+0x8a8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	f040 808f 	bne.w	8005f2e <HAL_RCC_OscConfig+0x87a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d009      	beq.n	8005e2c <HAL_RCC_OscConfig+0x778>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e20:	d004      	beq.n	8005e2c <HAL_RCC_OscConfig+0x778>
 8005e22:	f240 21b3 	movw	r1, #691	@ 0x2b3
 8005e26:	4861      	ldr	r0, [pc, #388]	@ (8005fac <HAL_RCC_OscConfig+0x8f8>)
 8005e28:	f7fb fb9e 	bl	8001568 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d02c      	beq.n	8005e8e <HAL_RCC_OscConfig+0x7da>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e3c:	d027      	beq.n	8005e8e <HAL_RCC_OscConfig+0x7da>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e42:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e46:	d022      	beq.n	8005e8e <HAL_RCC_OscConfig+0x7da>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005e50:	d01d      	beq.n	8005e8e <HAL_RCC_OscConfig+0x7da>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e5a:	d018      	beq.n	8005e8e <HAL_RCC_OscConfig+0x7da>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e60:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005e64:	d013      	beq.n	8005e8e <HAL_RCC_OscConfig+0x7da>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005e6e:	d00e      	beq.n	8005e8e <HAL_RCC_OscConfig+0x7da>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005e78:	d009      	beq.n	8005e8e <HAL_RCC_OscConfig+0x7da>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e82:	d004      	beq.n	8005e8e <HAL_RCC_OscConfig+0x7da>
 8005e84:	f44f 712d 	mov.w	r1, #692	@ 0x2b4
 8005e88:	4848      	ldr	r0, [pc, #288]	@ (8005fac <HAL_RCC_OscConfig+0x8f8>)
 8005e8a:	f7fb fb6d 	bl	8001568 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e96:	d00e      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x802>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ea0:	d009      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x802>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005eaa:	d004      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x802>
 8005eac:	f240 21b5 	movw	r1, #693	@ 0x2b5
 8005eb0:	483e      	ldr	r0, [pc, #248]	@ (8005fac <HAL_RCC_OscConfig+0x8f8>)
 8005eb2:	f7fb fb59 	bl	8001568 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb0 <HAL_RCC_OscConfig+0x8fc>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ebc:	f7fc fb66 	bl	800258c <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x822>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec4:	f7fc fb62 	bl	800258c <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x822>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e063      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ed6:	4b34      	ldr	r3, [pc, #208]	@ (8005fa8 <HAL_RCC_OscConfig+0x8f4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x810>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ee2:	4b31      	ldr	r3, [pc, #196]	@ (8005fa8 <HAL_RCC_OscConfig+0x8f4>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef2:	4319      	orrs	r1, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	492b      	ldr	r1, [pc, #172]	@ (8005fa8 <HAL_RCC_OscConfig+0x8f4>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f00:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb0 <HAL_RCC_OscConfig+0x8fc>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f06:	f7fc fb41 	bl	800258c <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x86c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f0e:	f7fc fb3d 	bl	800258c <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x86c>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e03e      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f20:	4b21      	ldr	r3, [pc, #132]	@ (8005fa8 <HAL_RCC_OscConfig+0x8f4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCC_OscConfig+0x85a>
 8005f2c:	e036      	b.n	8005f9c <HAL_RCC_OscConfig+0x8e8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f2e:	4b20      	ldr	r3, [pc, #128]	@ (8005fb0 <HAL_RCC_OscConfig+0x8fc>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f34:	f7fc fb2a 	bl	800258c <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x89a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f3c:	f7fc fb26 	bl	800258c <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x89a>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e027      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f4e:	4b16      	ldr	r3, [pc, #88]	@ (8005fa8 <HAL_RCC_OscConfig+0x8f4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f0      	bne.n	8005f3c <HAL_RCC_OscConfig+0x888>
 8005f5a:	e01f      	b.n	8005f9c <HAL_RCC_OscConfig+0x8e8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_RCC_OscConfig+0x8b4>
      {
        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e01a      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f68:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa8 <HAL_RCC_OscConfig+0x8f4>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d10d      	bne.n	8005f98 <HAL_RCC_OscConfig+0x8e4>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d106      	bne.n	8005f98 <HAL_RCC_OscConfig+0x8e4>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d001      	beq.n	8005f9c <HAL_RCC_OscConfig+0x8e8>
        {
          return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <HAL_RCC_OscConfig+0x8ea>
        }
      }
    }
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	0800a3c8 	.word	0x0800a3c8
 8005fb0:	42470060 	.word	0x42470060

08005fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e1a4      	b.n	8006312 <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <HAL_RCC_ClockConfig+0x2a>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d004      	beq.n	8005fde <HAL_RCC_ClockConfig+0x2a>
 8005fd4:	f44f 714a 	mov.w	r1, #808	@ 0x328
 8005fd8:	4893      	ldr	r0, [pc, #588]	@ (8006228 <HAL_RCC_ClockConfig+0x274>)
 8005fda:	f7fb fac5 	bl	8001568 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fde:	4b93      	ldr	r3, [pc, #588]	@ (800622c <HAL_RCC_ClockConfig+0x278>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d919      	bls.n	8006020 <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d105      	bne.n	8005ffe <HAL_RCC_ClockConfig+0x4a>
 8005ff2:	4b8e      	ldr	r3, [pc, #568]	@ (800622c <HAL_RCC_ClockConfig+0x278>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a8d      	ldr	r2, [pc, #564]	@ (800622c <HAL_RCC_ClockConfig+0x278>)
 8005ff8:	f043 0304 	orr.w	r3, r3, #4
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	4b8b      	ldr	r3, [pc, #556]	@ (800622c <HAL_RCC_ClockConfig+0x278>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f023 0201 	bic.w	r2, r3, #1
 8006006:	4989      	ldr	r1, [pc, #548]	@ (800622c <HAL_RCC_ClockConfig+0x278>)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	4313      	orrs	r3, r2
 800600c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800600e:	4b87      	ldr	r3, [pc, #540]	@ (800622c <HAL_RCC_ClockConfig+0x278>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d001      	beq.n	8006020 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e178      	b.n	8006312 <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d031      	beq.n	8006090 <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d024      	beq.n	800607e <HAL_RCC_ClockConfig+0xca>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b80      	cmp	r3, #128	@ 0x80
 800603a:	d020      	beq.n	800607e <HAL_RCC_ClockConfig+0xca>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b90      	cmp	r3, #144	@ 0x90
 8006042:	d01c      	beq.n	800607e <HAL_RCC_ClockConfig+0xca>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	2ba0      	cmp	r3, #160	@ 0xa0
 800604a:	d018      	beq.n	800607e <HAL_RCC_ClockConfig+0xca>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2bb0      	cmp	r3, #176	@ 0xb0
 8006052:	d014      	beq.n	800607e <HAL_RCC_ClockConfig+0xca>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	2bc0      	cmp	r3, #192	@ 0xc0
 800605a:	d010      	beq.n	800607e <HAL_RCC_ClockConfig+0xca>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	2bd0      	cmp	r3, #208	@ 0xd0
 8006062:	d00c      	beq.n	800607e <HAL_RCC_ClockConfig+0xca>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2be0      	cmp	r3, #224	@ 0xe0
 800606a:	d008      	beq.n	800607e <HAL_RCC_ClockConfig+0xca>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2bf0      	cmp	r3, #240	@ 0xf0
 8006072:	d004      	beq.n	800607e <HAL_RCC_ClockConfig+0xca>
 8006074:	f240 313f 	movw	r1, #831	@ 0x33f
 8006078:	486b      	ldr	r0, [pc, #428]	@ (8006228 <HAL_RCC_ClockConfig+0x274>)
 800607a:	f7fb fa75 	bl	8001568 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800607e:	4b6c      	ldr	r3, [pc, #432]	@ (8006230 <HAL_RCC_ClockConfig+0x27c>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	4969      	ldr	r1, [pc, #420]	@ (8006230 <HAL_RCC_ClockConfig+0x27c>)
 800608c:	4313      	orrs	r3, r2
 800608e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80a3 	beq.w	80061e4 <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d010      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x114>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d00c      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x114>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d008      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x114>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d004      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x114>
 80060be:	f240 3146 	movw	r1, #838	@ 0x346
 80060c2:	4859      	ldr	r0, [pc, #356]	@ (8006228 <HAL_RCC_ClockConfig+0x274>)
 80060c4:	f7fb fa50 	bl	8001568 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d107      	bne.n	80060e0 <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060d0:	4b57      	ldr	r3, [pc, #348]	@ (8006230 <HAL_RCC_ClockConfig+0x27c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d121      	bne.n	8006120 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e118      	b.n	8006312 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	d107      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060e8:	4b51      	ldr	r3, [pc, #324]	@ (8006230 <HAL_RCC_ClockConfig+0x27c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d115      	bne.n	8006120 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e10c      	b.n	8006312 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d107      	bne.n	8006110 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006100:	4b4b      	ldr	r3, [pc, #300]	@ (8006230 <HAL_RCC_ClockConfig+0x27c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d109      	bne.n	8006120 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e100      	b.n	8006312 <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006110:	4b47      	ldr	r3, [pc, #284]	@ (8006230 <HAL_RCC_ClockConfig+0x27c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e0f8      	b.n	8006312 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006120:	4b43      	ldr	r3, [pc, #268]	@ (8006230 <HAL_RCC_ClockConfig+0x27c>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f023 0203 	bic.w	r2, r3, #3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	4940      	ldr	r1, [pc, #256]	@ (8006230 <HAL_RCC_ClockConfig+0x27c>)
 800612e:	4313      	orrs	r3, r2
 8006130:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006132:	f7fc fa2b 	bl	800258c <HAL_GetTick>
 8006136:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2b02      	cmp	r3, #2
 800613e:	d112      	bne.n	8006166 <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006140:	e00a      	b.n	8006158 <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006142:	f7fc fa23 	bl	800258c <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006150:	4293      	cmp	r3, r2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e0dc      	b.n	8006312 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006158:	4b35      	ldr	r3, [pc, #212]	@ (8006230 <HAL_RCC_ClockConfig+0x27c>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f003 030c 	and.w	r3, r3, #12
 8006160:	2b08      	cmp	r3, #8
 8006162:	d1ee      	bne.n	8006142 <HAL_RCC_ClockConfig+0x18e>
 8006164:	e03e      	b.n	80061e4 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b03      	cmp	r3, #3
 800616c:	d112      	bne.n	8006194 <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800616e:	e00a      	b.n	8006186 <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006170:	f7fc fa0c 	bl	800258c <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800617e:	4293      	cmp	r3, r2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e0c5      	b.n	8006312 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006186:	4b2a      	ldr	r3, [pc, #168]	@ (8006230 <HAL_RCC_ClockConfig+0x27c>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 030c 	and.w	r3, r3, #12
 800618e:	2b0c      	cmp	r3, #12
 8006190:	d1ee      	bne.n	8006170 <HAL_RCC_ClockConfig+0x1bc>
 8006192:	e027      	b.n	80061e4 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d11d      	bne.n	80061d8 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800619c:	e00a      	b.n	80061b4 <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800619e:	f7fc f9f5 	bl	800258c <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d901      	bls.n	80061b4 <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e0ae      	b.n	8006312 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80061b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006230 <HAL_RCC_ClockConfig+0x27c>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 030c 	and.w	r3, r3, #12
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d1ee      	bne.n	800619e <HAL_RCC_ClockConfig+0x1ea>
 80061c0:	e010      	b.n	80061e4 <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061c2:	f7fc f9e3 	bl	800258c <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e09c      	b.n	8006312 <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80061d8:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <HAL_RCC_ClockConfig+0x27c>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 030c 	and.w	r3, r3, #12
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1ee      	bne.n	80061c2 <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061e4:	4b11      	ldr	r3, [pc, #68]	@ (800622c <HAL_RCC_ClockConfig+0x278>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d220      	bcs.n	8006234 <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d105      	bne.n	8006204 <HAL_RCC_ClockConfig+0x250>
 80061f8:	4b0c      	ldr	r3, [pc, #48]	@ (800622c <HAL_RCC_ClockConfig+0x278>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a0b      	ldr	r2, [pc, #44]	@ (800622c <HAL_RCC_ClockConfig+0x278>)
 80061fe:	f043 0304 	orr.w	r3, r3, #4
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	4b09      	ldr	r3, [pc, #36]	@ (800622c <HAL_RCC_ClockConfig+0x278>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f023 0201 	bic.w	r2, r3, #1
 800620c:	4907      	ldr	r1, [pc, #28]	@ (800622c <HAL_RCC_ClockConfig+0x278>)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	4313      	orrs	r3, r2
 8006212:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006214:	4b05      	ldr	r3, [pc, #20]	@ (800622c <HAL_RCC_ClockConfig+0x278>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d008      	beq.n	8006234 <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e075      	b.n	8006312 <HAL_RCC_ClockConfig+0x35e>
 8006226:	bf00      	nop
 8006228:	0800a3c8 	.word	0x0800a3c8
 800622c:	40023c00 	.word	0x40023c00
 8006230:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b00      	cmp	r3, #0
 800623e:	d025      	beq.n	800628c <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d018      	beq.n	800627a <HAL_RCC_ClockConfig+0x2c6>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006250:	d013      	beq.n	800627a <HAL_RCC_ClockConfig+0x2c6>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800625a:	d00e      	beq.n	800627a <HAL_RCC_ClockConfig+0x2c6>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006264:	d009      	beq.n	800627a <HAL_RCC_ClockConfig+0x2c6>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800626e:	d004      	beq.n	800627a <HAL_RCC_ClockConfig+0x2c6>
 8006270:	f240 31ab 	movw	r1, #939	@ 0x3ab
 8006274:	4829      	ldr	r0, [pc, #164]	@ (800631c <HAL_RCC_ClockConfig+0x368>)
 8006276:	f7fb f977 	bl	8001568 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800627a:	4b29      	ldr	r3, [pc, #164]	@ (8006320 <HAL_RCC_ClockConfig+0x36c>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	4926      	ldr	r1, [pc, #152]	@ (8006320 <HAL_RCC_ClockConfig+0x36c>)
 8006288:	4313      	orrs	r3, r2
 800628a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d026      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d018      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x31e>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a8:	d013      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x31e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80062b2:	d00e      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x31e>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80062bc:	d009      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x31e>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062c6:	d004      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x31e>
 80062c8:	f240 31b2 	movw	r1, #946	@ 0x3b2
 80062cc:	4813      	ldr	r0, [pc, #76]	@ (800631c <HAL_RCC_ClockConfig+0x368>)
 80062ce:	f7fb f94b 	bl	8001568 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062d2:	4b13      	ldr	r3, [pc, #76]	@ (8006320 <HAL_RCC_ClockConfig+0x36c>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	490f      	ldr	r1, [pc, #60]	@ (8006320 <HAL_RCC_ClockConfig+0x36c>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062e6:	f000 f823 	bl	8006330 <HAL_RCC_GetSysClockFreq>
 80062ea:	4602      	mov	r2, r0
 80062ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006320 <HAL_RCC_ClockConfig+0x36c>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	091b      	lsrs	r3, r3, #4
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	490b      	ldr	r1, [pc, #44]	@ (8006324 <HAL_RCC_ClockConfig+0x370>)
 80062f8:	5ccb      	ldrb	r3, [r1, r3]
 80062fa:	fa22 f303 	lsr.w	r3, r2, r3
 80062fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006328 <HAL_RCC_ClockConfig+0x374>)
 8006300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006302:	4b0a      	ldr	r3, [pc, #40]	@ (800632c <HAL_RCC_ClockConfig+0x378>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f7fc f8f4 	bl	80024f4 <HAL_InitTick>
 800630c:	4603      	mov	r3, r0
 800630e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006310:	7afb      	ldrb	r3, [r7, #11]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	0800a3c8 	.word	0x0800a3c8
 8006320:	40023800 	.word	0x40023800
 8006324:	0800a4bc 	.word	0x0800a4bc
 8006328:	20000000 	.word	0x20000000
 800632c:	20000004 	.word	0x20000004

08006330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006334:	b092      	sub	sp, #72	@ 0x48
 8006336:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8006338:	4b79      	ldr	r3, [pc, #484]	@ (8006520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800633e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006340:	f003 030c 	and.w	r3, r3, #12
 8006344:	2b0c      	cmp	r3, #12
 8006346:	d00d      	beq.n	8006364 <HAL_RCC_GetSysClockFreq+0x34>
 8006348:	2b0c      	cmp	r3, #12
 800634a:	f200 80d5 	bhi.w	80064f8 <HAL_RCC_GetSysClockFreq+0x1c8>
 800634e:	2b04      	cmp	r3, #4
 8006350:	d002      	beq.n	8006358 <HAL_RCC_GetSysClockFreq+0x28>
 8006352:	2b08      	cmp	r3, #8
 8006354:	d003      	beq.n	800635e <HAL_RCC_GetSysClockFreq+0x2e>
 8006356:	e0cf      	b.n	80064f8 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006358:	4b72      	ldr	r3, [pc, #456]	@ (8006524 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800635a:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800635c:	e0da      	b.n	8006514 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800635e:	4b72      	ldr	r3, [pc, #456]	@ (8006528 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006360:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8006362:	e0d7      	b.n	8006514 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006366:	0c9b      	lsrs	r3, r3, #18
 8006368:	f003 020f 	and.w	r2, r3, #15
 800636c:	4b6f      	ldr	r3, [pc, #444]	@ (800652c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800636e:	5c9b      	ldrb	r3, [r3, r2]
 8006370:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006374:	0d9b      	lsrs	r3, r3, #22
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	3301      	adds	r3, #1
 800637c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800637e:	4b68      	ldr	r3, [pc, #416]	@ (8006520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d05d      	beq.n	8006446 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800638a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638c:	2200      	movs	r2, #0
 800638e:	4618      	mov	r0, r3
 8006390:	4611      	mov	r1, r2
 8006392:	4604      	mov	r4, r0
 8006394:	460d      	mov	r5, r1
 8006396:	4622      	mov	r2, r4
 8006398:	462b      	mov	r3, r5
 800639a:	f04f 0000 	mov.w	r0, #0
 800639e:	f04f 0100 	mov.w	r1, #0
 80063a2:	0159      	lsls	r1, r3, #5
 80063a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063a8:	0150      	lsls	r0, r2, #5
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4621      	mov	r1, r4
 80063b0:	1a51      	subs	r1, r2, r1
 80063b2:	6139      	str	r1, [r7, #16]
 80063b4:	4629      	mov	r1, r5
 80063b6:	eb63 0301 	sbc.w	r3, r3, r1
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063c8:	4659      	mov	r1, fp
 80063ca:	018b      	lsls	r3, r1, #6
 80063cc:	4651      	mov	r1, sl
 80063ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063d2:	4651      	mov	r1, sl
 80063d4:	018a      	lsls	r2, r1, #6
 80063d6:	46d4      	mov	ip, sl
 80063d8:	ebb2 080c 	subs.w	r8, r2, ip
 80063dc:	4659      	mov	r1, fp
 80063de:	eb63 0901 	sbc.w	r9, r3, r1
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063f6:	4690      	mov	r8, r2
 80063f8:	4699      	mov	r9, r3
 80063fa:	4623      	mov	r3, r4
 80063fc:	eb18 0303 	adds.w	r3, r8, r3
 8006400:	60bb      	str	r3, [r7, #8]
 8006402:	462b      	mov	r3, r5
 8006404:	eb49 0303 	adc.w	r3, r9, r3
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	f04f 0200 	mov.w	r2, #0
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006416:	4629      	mov	r1, r5
 8006418:	024b      	lsls	r3, r1, #9
 800641a:	4620      	mov	r0, r4
 800641c:	4629      	mov	r1, r5
 800641e:	4604      	mov	r4, r0
 8006420:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8006424:	4601      	mov	r1, r0
 8006426:	024a      	lsls	r2, r1, #9
 8006428:	4610      	mov	r0, r2
 800642a:	4619      	mov	r1, r3
 800642c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800642e:	2200      	movs	r2, #0
 8006430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006432:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006434:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006438:	f7fa f9b0 	bl	800079c <__aeabi_uldivmod>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4613      	mov	r3, r2
 8006442:	647b      	str	r3, [r7, #68]	@ 0x44
 8006444:	e055      	b.n	80064f2 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006448:	2200      	movs	r2, #0
 800644a:	623b      	str	r3, [r7, #32]
 800644c:	627a      	str	r2, [r7, #36]	@ 0x24
 800644e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006452:	4642      	mov	r2, r8
 8006454:	464b      	mov	r3, r9
 8006456:	f04f 0000 	mov.w	r0, #0
 800645a:	f04f 0100 	mov.w	r1, #0
 800645e:	0159      	lsls	r1, r3, #5
 8006460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006464:	0150      	lsls	r0, r2, #5
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	46c4      	mov	ip, r8
 800646c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	468c      	mov	ip, r1
 8006476:	eb63 0b0c 	sbc.w	fp, r3, ip
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006486:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800648a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800648e:	ebb2 040a 	subs.w	r4, r2, sl
 8006492:	eb63 050b 	sbc.w	r5, r3, fp
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	00eb      	lsls	r3, r5, #3
 80064a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064a4:	00e2      	lsls	r2, r4, #3
 80064a6:	4614      	mov	r4, r2
 80064a8:	461d      	mov	r5, r3
 80064aa:	4603      	mov	r3, r0
 80064ac:	18e3      	adds	r3, r4, r3
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	460b      	mov	r3, r1
 80064b2:	eb45 0303 	adc.w	r3, r5, r3
 80064b6:	607b      	str	r3, [r7, #4]
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	f04f 0300 	mov.w	r3, #0
 80064c0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064c4:	4629      	mov	r1, r5
 80064c6:	028b      	lsls	r3, r1, #10
 80064c8:	4620      	mov	r0, r4
 80064ca:	4629      	mov	r1, r5
 80064cc:	4604      	mov	r4, r0
 80064ce:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80064d2:	4601      	mov	r1, r0
 80064d4:	028a      	lsls	r2, r1, #10
 80064d6:	4610      	mov	r0, r2
 80064d8:	4619      	mov	r1, r3
 80064da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064dc:	2200      	movs	r2, #0
 80064de:	61bb      	str	r3, [r7, #24]
 80064e0:	61fa      	str	r2, [r7, #28]
 80064e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064e6:	f7fa f959 	bl	800079c <__aeabi_uldivmod>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4613      	mov	r3, r2
 80064f0:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 80064f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064f4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80064f6:	e00d      	b.n	8006514 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80064f8:	4b09      	ldr	r3, [pc, #36]	@ (8006520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	0b5b      	lsrs	r3, r3, #13
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006506:	3301      	adds	r3, #1
 8006508:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8006512:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8006516:	4618      	mov	r0, r3
 8006518:	3748      	adds	r7, #72	@ 0x48
 800651a:	46bd      	mov	sp, r7
 800651c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006520:	40023800 	.word	0x40023800
 8006524:	00f42400 	.word	0x00f42400
 8006528:	007a1200 	.word	0x007a1200
 800652c:	0800a4b0 	.word	0x0800a4b0

08006530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006534:	4b02      	ldr	r3, [pc, #8]	@ (8006540 <HAL_RCC_GetHCLKFreq+0x10>)
 8006536:	681b      	ldr	r3, [r3, #0]
}
 8006538:	4618      	mov	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr
 8006540:	20000000 	.word	0x20000000

08006544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006548:	f7ff fff2 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 800654c:	4602      	mov	r2, r0
 800654e:	4b05      	ldr	r3, [pc, #20]	@ (8006564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	0a1b      	lsrs	r3, r3, #8
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	4903      	ldr	r1, [pc, #12]	@ (8006568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800655a:	5ccb      	ldrb	r3, [r1, r3]
 800655c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006560:	4618      	mov	r0, r3
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40023800 	.word	0x40023800
 8006568:	0800a4cc 	.word	0x0800a4cc

0800656c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006570:	f7ff ffde 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b05      	ldr	r3, [pc, #20]	@ (800658c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	0adb      	lsrs	r3, r3, #11
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	4903      	ldr	r1, [pc, #12]	@ (8006590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006588:	4618      	mov	r0, r3
 800658a:	bd80      	pop	{r7, pc}
 800658c:	40023800 	.word	0x40023800
 8006590:	0800a4cc 	.word	0x0800a4cc

08006594 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800659c:	2300      	movs	r3, #0
 800659e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80065a0:	4b29      	ldr	r3, [pc, #164]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d12c      	bne.n	8006606 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80065ac:	4b26      	ldr	r3, [pc, #152]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80065ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d005      	beq.n	80065c4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80065b8:	4b24      	ldr	r3, [pc, #144]	@ (800664c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	e016      	b.n	80065f2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065c4:	4b20      	ldr	r3, [pc, #128]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80065c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80065ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ce:	6253      	str	r3, [r2, #36]	@ 0x24
 80065d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80065d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80065dc:	4b1b      	ldr	r3, [pc, #108]	@ (800664c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80065e4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80065e6:	4b18      	ldr	r3, [pc, #96]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80065e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ea:	4a17      	ldr	r2, [pc, #92]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80065ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065f0:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80065f8:	d105      	bne.n	8006606 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006600:	d101      	bne.n	8006606 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8006602:	2301      	movs	r3, #1
 8006604:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d105      	bne.n	8006618 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800660c:	4b10      	ldr	r3, [pc, #64]	@ (8006650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a0f      	ldr	r2, [pc, #60]	@ (8006650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006612:	f043 0304 	orr.w	r3, r3, #4
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	4b0d      	ldr	r3, [pc, #52]	@ (8006650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f023 0201 	bic.w	r2, r3, #1
 8006620:	490b      	ldr	r1, [pc, #44]	@ (8006650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006628:	4b09      	ldr	r3, [pc, #36]	@ (8006650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	429a      	cmp	r2, r3
 8006634:	d001      	beq.n	800663a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	371c      	adds	r7, #28
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40023800 	.word	0x40023800
 800664c:	40007000 	.word	0x40007000
 8006650:	40023c00 	.word	0x40023c00

08006654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e0bf      	b.n	80067e6 <HAL_TIM_Base_Init+0x192>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800666e:	d02c      	beq.n	80066ca <HAL_TIM_Base_Init+0x76>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a5e      	ldr	r2, [pc, #376]	@ (80067f0 <HAL_TIM_Base_Init+0x19c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d027      	beq.n	80066ca <HAL_TIM_Base_Init+0x76>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a5d      	ldr	r2, [pc, #372]	@ (80067f4 <HAL_TIM_Base_Init+0x1a0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d022      	beq.n	80066ca <HAL_TIM_Base_Init+0x76>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a5b      	ldr	r2, [pc, #364]	@ (80067f8 <HAL_TIM_Base_Init+0x1a4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d01d      	beq.n	80066ca <HAL_TIM_Base_Init+0x76>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a5a      	ldr	r2, [pc, #360]	@ (80067fc <HAL_TIM_Base_Init+0x1a8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d018      	beq.n	80066ca <HAL_TIM_Base_Init+0x76>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a58      	ldr	r2, [pc, #352]	@ (8006800 <HAL_TIM_Base_Init+0x1ac>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d013      	beq.n	80066ca <HAL_TIM_Base_Init+0x76>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a57      	ldr	r2, [pc, #348]	@ (8006804 <HAL_TIM_Base_Init+0x1b0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00e      	beq.n	80066ca <HAL_TIM_Base_Init+0x76>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a55      	ldr	r2, [pc, #340]	@ (8006808 <HAL_TIM_Base_Init+0x1b4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d009      	beq.n	80066ca <HAL_TIM_Base_Init+0x76>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a54      	ldr	r2, [pc, #336]	@ (800680c <HAL_TIM_Base_Init+0x1b8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <HAL_TIM_Base_Init+0x76>
 80066c0:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80066c4:	4852      	ldr	r0, [pc, #328]	@ (8006810 <HAL_TIM_Base_Init+0x1bc>)
 80066c6:	f7fa ff4f 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d014      	beq.n	80066fc <HAL_TIM_Base_Init+0xa8>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b10      	cmp	r3, #16
 80066d8:	d010      	beq.n	80066fc <HAL_TIM_Base_Init+0xa8>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2b20      	cmp	r3, #32
 80066e0:	d00c      	beq.n	80066fc <HAL_TIM_Base_Init+0xa8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b40      	cmp	r3, #64	@ 0x40
 80066e8:	d008      	beq.n	80066fc <HAL_TIM_Base_Init+0xa8>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b60      	cmp	r3, #96	@ 0x60
 80066f0:	d004      	beq.n	80066fc <HAL_TIM_Base_Init+0xa8>
 80066f2:	f240 1117 	movw	r1, #279	@ 0x117
 80066f6:	4846      	ldr	r0, [pc, #280]	@ (8006810 <HAL_TIM_Base_Init+0x1bc>)
 80066f8:	f7fa ff36 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00e      	beq.n	8006722 <HAL_TIM_Base_Init+0xce>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800670c:	d009      	beq.n	8006722 <HAL_TIM_Base_Init+0xce>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006716:	d004      	beq.n	8006722 <HAL_TIM_Base_Init+0xce>
 8006718:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800671c:	483c      	ldr	r0, [pc, #240]	@ (8006810 <HAL_TIM_Base_Init+0x1bc>)
 800671e:	f7fa ff23 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a34      	ldr	r2, [pc, #208]	@ (80067f8 <HAL_TIM_Base_Init+0x1a4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d00f      	beq.n	800674c <HAL_TIM_Base_Init+0xf8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <HAL_TIM_Base_Init+0xee>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800673c:	d201      	bcs.n	8006742 <HAL_TIM_Base_Init+0xee>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <HAL_TIM_Base_Init+0xf0>
 8006742:	2300      	movs	r3, #0
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	b2db      	uxtb	r3, r3
 800674a:	e006      	b.n	800675a <HAL_TIM_Base_Init+0x106>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf14      	ite	ne
 8006754:	2301      	movne	r3, #1
 8006756:	2300      	moveq	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <HAL_TIM_Base_Init+0x114>
 800675e:	f240 1119 	movw	r1, #281	@ 0x119
 8006762:	482b      	ldr	r0, [pc, #172]	@ (8006810 <HAL_TIM_Base_Init+0x1bc>)
 8006764:	f7fa ff00 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <HAL_TIM_Base_Init+0x12e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	2b80      	cmp	r3, #128	@ 0x80
 8006776:	d004      	beq.n	8006782 <HAL_TIM_Base_Init+0x12e>
 8006778:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800677c:	4824      	ldr	r0, [pc, #144]	@ (8006810 <HAL_TIM_Base_Init+0x1bc>)
 800677e:	f7fa fef3 	bl	8001568 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <HAL_TIM_Base_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7fa ff82 	bl	80016a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	4619      	mov	r1, r3
 80067ae:	4610      	mov	r0, r2
 80067b0:	f001 f840 	bl	8007834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	40000400 	.word	0x40000400
 80067f4:	40000800 	.word	0x40000800
 80067f8:	40000c00 	.word	0x40000c00
 80067fc:	40001000 	.word	0x40001000
 8006800:	40001400 	.word	0x40001400
 8006804:	40010800 	.word	0x40010800
 8006808:	40010c00 	.word	0x40010c00
 800680c:	40011000 	.word	0x40011000
 8006810:	0800a400 	.word	0x0800a400

08006814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006824:	d02c      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x6c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a39      	ldr	r2, [pc, #228]	@ (8006910 <HAL_TIM_Base_Start_IT+0xfc>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d027      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x6c>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a37      	ldr	r2, [pc, #220]	@ (8006914 <HAL_TIM_Base_Start_IT+0x100>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d022      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x6c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a36      	ldr	r2, [pc, #216]	@ (8006918 <HAL_TIM_Base_Start_IT+0x104>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d01d      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x6c>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a34      	ldr	r2, [pc, #208]	@ (800691c <HAL_TIM_Base_Start_IT+0x108>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d018      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x6c>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a33      	ldr	r2, [pc, #204]	@ (8006920 <HAL_TIM_Base_Start_IT+0x10c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d013      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x6c>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a31      	ldr	r2, [pc, #196]	@ (8006924 <HAL_TIM_Base_Start_IT+0x110>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d00e      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x6c>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a30      	ldr	r2, [pc, #192]	@ (8006928 <HAL_TIM_Base_Start_IT+0x114>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d009      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x6c>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a2e      	ldr	r2, [pc, #184]	@ (800692c <HAL_TIM_Base_Start_IT+0x118>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d004      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x6c>
 8006876:	f240 11d1 	movw	r1, #465	@ 0x1d1
 800687a:	482d      	ldr	r0, [pc, #180]	@ (8006930 <HAL_TIM_Base_Start_IT+0x11c>)
 800687c:	f7fa fe74 	bl	8001568 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b01      	cmp	r3, #1
 800688a:	d001      	beq.n	8006890 <HAL_TIM_Base_Start_IT+0x7c>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e03a      	b.n	8006906 <HAL_TIM_Base_Start_IT+0xf2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b0:	d00e      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0xbc>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a16      	ldr	r2, [pc, #88]	@ (8006910 <HAL_TIM_Base_Start_IT+0xfc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d009      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0xbc>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a14      	ldr	r2, [pc, #80]	@ (8006914 <HAL_TIM_Base_Start_IT+0x100>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d004      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0xbc>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a16      	ldr	r2, [pc, #88]	@ (8006924 <HAL_TIM_Base_Start_IT+0x110>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d111      	bne.n	80068f4 <HAL_TIM_Base_Start_IT+0xe0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b06      	cmp	r3, #6
 80068e0:	d010      	beq.n	8006904 <HAL_TIM_Base_Start_IT+0xf0>
    {
      __HAL_TIM_ENABLE(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0201 	orr.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f2:	e007      	b.n	8006904 <HAL_TIM_Base_Start_IT+0xf0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0201 	orr.w	r2, r2, #1
 8006902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40000400 	.word	0x40000400
 8006914:	40000800 	.word	0x40000800
 8006918:	40000c00 	.word	0x40000c00
 800691c:	40001000 	.word	0x40001000
 8006920:	40001400 	.word	0x40001400
 8006924:	40010800 	.word	0x40010800
 8006928:	40010c00 	.word	0x40010c00
 800692c:	40011000 	.word	0x40011000
 8006930:	0800a400 	.word	0x0800a400

08006934 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e0bf      	b.n	8006ac6 <HAL_TIM_PWM_Init+0x192>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800694e:	d02c      	beq.n	80069aa <HAL_TIM_PWM_Init+0x76>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a5e      	ldr	r2, [pc, #376]	@ (8006ad0 <HAL_TIM_PWM_Init+0x19c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d027      	beq.n	80069aa <HAL_TIM_PWM_Init+0x76>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a5d      	ldr	r2, [pc, #372]	@ (8006ad4 <HAL_TIM_PWM_Init+0x1a0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d022      	beq.n	80069aa <HAL_TIM_PWM_Init+0x76>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a5b      	ldr	r2, [pc, #364]	@ (8006ad8 <HAL_TIM_PWM_Init+0x1a4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01d      	beq.n	80069aa <HAL_TIM_PWM_Init+0x76>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a5a      	ldr	r2, [pc, #360]	@ (8006adc <HAL_TIM_PWM_Init+0x1a8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d018      	beq.n	80069aa <HAL_TIM_PWM_Init+0x76>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a58      	ldr	r2, [pc, #352]	@ (8006ae0 <HAL_TIM_PWM_Init+0x1ac>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d013      	beq.n	80069aa <HAL_TIM_PWM_Init+0x76>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a57      	ldr	r2, [pc, #348]	@ (8006ae4 <HAL_TIM_PWM_Init+0x1b0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00e      	beq.n	80069aa <HAL_TIM_PWM_Init+0x76>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a55      	ldr	r2, [pc, #340]	@ (8006ae8 <HAL_TIM_PWM_Init+0x1b4>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d009      	beq.n	80069aa <HAL_TIM_PWM_Init+0x76>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a54      	ldr	r2, [pc, #336]	@ (8006aec <HAL_TIM_PWM_Init+0x1b8>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d004      	beq.n	80069aa <HAL_TIM_PWM_Init+0x76>
 80069a0:	f240 5107 	movw	r1, #1287	@ 0x507
 80069a4:	4852      	ldr	r0, [pc, #328]	@ (8006af0 <HAL_TIM_PWM_Init+0x1bc>)
 80069a6:	f7fa fddf 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d014      	beq.n	80069dc <HAL_TIM_PWM_Init+0xa8>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b10      	cmp	r3, #16
 80069b8:	d010      	beq.n	80069dc <HAL_TIM_PWM_Init+0xa8>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	2b20      	cmp	r3, #32
 80069c0:	d00c      	beq.n	80069dc <HAL_TIM_PWM_Init+0xa8>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2b40      	cmp	r3, #64	@ 0x40
 80069c8:	d008      	beq.n	80069dc <HAL_TIM_PWM_Init+0xa8>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	2b60      	cmp	r3, #96	@ 0x60
 80069d0:	d004      	beq.n	80069dc <HAL_TIM_PWM_Init+0xa8>
 80069d2:	f44f 61a1 	mov.w	r1, #1288	@ 0x508
 80069d6:	4846      	ldr	r0, [pc, #280]	@ (8006af0 <HAL_TIM_PWM_Init+0x1bc>)
 80069d8:	f7fa fdc6 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00e      	beq.n	8006a02 <HAL_TIM_PWM_Init+0xce>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ec:	d009      	beq.n	8006a02 <HAL_TIM_PWM_Init+0xce>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069f6:	d004      	beq.n	8006a02 <HAL_TIM_PWM_Init+0xce>
 80069f8:	f240 5109 	movw	r1, #1289	@ 0x509
 80069fc:	483c      	ldr	r0, [pc, #240]	@ (8006af0 <HAL_TIM_PWM_Init+0x1bc>)
 80069fe:	f7fa fdb3 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a34      	ldr	r2, [pc, #208]	@ (8006ad8 <HAL_TIM_PWM_Init+0x1a4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00f      	beq.n	8006a2c <HAL_TIM_PWM_Init+0xf8>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <HAL_TIM_PWM_Init+0xee>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a1c:	d201      	bcs.n	8006a22 <HAL_TIM_PWM_Init+0xee>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <HAL_TIM_PWM_Init+0xf0>
 8006a22:	2300      	movs	r3, #0
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	e006      	b.n	8006a3a <HAL_TIM_PWM_Init+0x106>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bf14      	ite	ne
 8006a34:	2301      	movne	r3, #1
 8006a36:	2300      	moveq	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <HAL_TIM_PWM_Init+0x114>
 8006a3e:	f240 510a 	movw	r1, #1290	@ 0x50a
 8006a42:	482b      	ldr	r0, [pc, #172]	@ (8006af0 <HAL_TIM_PWM_Init+0x1bc>)
 8006a44:	f7fa fd90 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d008      	beq.n	8006a62 <HAL_TIM_PWM_Init+0x12e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	2b80      	cmp	r3, #128	@ 0x80
 8006a56:	d004      	beq.n	8006a62 <HAL_TIM_PWM_Init+0x12e>
 8006a58:	f240 510b 	movw	r1, #1291	@ 0x50b
 8006a5c:	4824      	ldr	r0, [pc, #144]	@ (8006af0 <HAL_TIM_PWM_Init+0x1bc>)
 8006a5e:	f7fa fd83 	bl	8001568 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_TIM_PWM_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f83c 	bl	8006af4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	f000 fed0 	bl	8007834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40000400 	.word	0x40000400
 8006ad4:	40000800 	.word	0x40000800
 8006ad8:	40000c00 	.word	0x40000c00
 8006adc:	40001000 	.word	0x40001000
 8006ae0:	40001400 	.word	0x40001400
 8006ae4:	40010800 	.word	0x40010800
 8006ae8:	40010c00 	.word	0x40010c00
 8006aec:	40011000 	.word	0x40011000
 8006af0:	0800a400 	.word	0x0800a400

08006af4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr
	...

08006b08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b1a:	d10b      	bne.n	8006b34 <HAL_TIM_PWM_Start+0x2c>
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d05b      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	d058      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b08      	cmp	r3, #8
 8006b2c:	d055      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b0c      	cmp	r3, #12
 8006b32:	d052      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a6d      	ldr	r2, [pc, #436]	@ (8006cf0 <HAL_TIM_PWM_Start+0x1e8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d10b      	bne.n	8006b56 <HAL_TIM_PWM_Start+0x4e>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d04a      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d047      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d044      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b0c      	cmp	r3, #12
 8006b54:	d041      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a66      	ldr	r2, [pc, #408]	@ (8006cf4 <HAL_TIM_PWM_Start+0x1ec>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d10b      	bne.n	8006b78 <HAL_TIM_PWM_Start+0x70>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d039      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d036      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b08      	cmp	r3, #8
 8006b70:	d033      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b0c      	cmp	r3, #12
 8006b76:	d030      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a5e      	ldr	r2, [pc, #376]	@ (8006cf8 <HAL_TIM_PWM_Start+0x1f0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d10b      	bne.n	8006b9a <HAL_TIM_PWM_Start+0x92>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d028      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d025      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d022      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b0c      	cmp	r3, #12
 8006b98:	d01f      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a57      	ldr	r2, [pc, #348]	@ (8006cfc <HAL_TIM_PWM_Start+0x1f4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d105      	bne.n	8006bb0 <HAL_TIM_PWM_Start+0xa8>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d017      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d014      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a52      	ldr	r2, [pc, #328]	@ (8006d00 <HAL_TIM_PWM_Start+0x1f8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d102      	bne.n	8006bc0 <HAL_TIM_PWM_Start+0xb8>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00c      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a4f      	ldr	r2, [pc, #316]	@ (8006d04 <HAL_TIM_PWM_Start+0x1fc>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d102      	bne.n	8006bd0 <HAL_TIM_PWM_Start+0xc8>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <HAL_TIM_PWM_Start+0xd2>
 8006bd0:	f240 518c 	movw	r1, #1420	@ 0x58c
 8006bd4:	484c      	ldr	r0, [pc, #304]	@ (8006d08 <HAL_TIM_PWM_Start+0x200>)
 8006bd6:	f7fa fcc7 	bl	8001568 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d109      	bne.n	8006bf4 <HAL_TIM_PWM_Start+0xec>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	bf14      	ite	ne
 8006bec:	2301      	movne	r3, #1
 8006bee:	2300      	moveq	r3, #0
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	e022      	b.n	8006c3a <HAL_TIM_PWM_Start+0x132>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d109      	bne.n	8006c0e <HAL_TIM_PWM_Start+0x106>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	bf14      	ite	ne
 8006c06:	2301      	movne	r3, #1
 8006c08:	2300      	moveq	r3, #0
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	e015      	b.n	8006c3a <HAL_TIM_PWM_Start+0x132>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d109      	bne.n	8006c28 <HAL_TIM_PWM_Start+0x120>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	bf14      	ite	ne
 8006c20:	2301      	movne	r3, #1
 8006c22:	2300      	moveq	r3, #0
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	e008      	b.n	8006c3a <HAL_TIM_PWM_Start+0x132>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	bf14      	ite	ne
 8006c34:	2301      	movne	r3, #1
 8006c36:	2300      	moveq	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <HAL_TIM_PWM_Start+0x13a>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e051      	b.n	8006ce6 <HAL_TIM_PWM_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d104      	bne.n	8006c52 <HAL_TIM_PWM_Start+0x14a>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8006c50:	e013      	b.n	8006c7a <HAL_TIM_PWM_Start+0x172>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	d104      	bne.n	8006c62 <HAL_TIM_PWM_Start+0x15a>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8006c60:	e00b      	b.n	8006c7a <HAL_TIM_PWM_Start+0x172>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d104      	bne.n	8006c72 <HAL_TIM_PWM_Start+0x16a>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006c70:	e003      	b.n	8006c7a <HAL_TIM_PWM_Start+0x172>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 ffd2 	bl	8007c2c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c90:	d00e      	beq.n	8006cb0 <HAL_TIM_PWM_Start+0x1a8>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a16      	ldr	r2, [pc, #88]	@ (8006cf0 <HAL_TIM_PWM_Start+0x1e8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d009      	beq.n	8006cb0 <HAL_TIM_PWM_Start+0x1a8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a14      	ldr	r2, [pc, #80]	@ (8006cf4 <HAL_TIM_PWM_Start+0x1ec>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d004      	beq.n	8006cb0 <HAL_TIM_PWM_Start+0x1a8>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a14      	ldr	r2, [pc, #80]	@ (8006cfc <HAL_TIM_PWM_Start+0x1f4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d111      	bne.n	8006cd4 <HAL_TIM_PWM_Start+0x1cc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b06      	cmp	r3, #6
 8006cc0:	d010      	beq.n	8006ce4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f042 0201 	orr.w	r2, r2, #1
 8006cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cd2:	e007      	b.n	8006ce4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40000c00 	.word	0x40000c00
 8006cfc:	40010800 	.word	0x40010800
 8006d00:	40010c00 	.word	0x40010c00
 8006d04:	40011000 	.word	0x40011000
 8006d08:	0800a400 	.word	0x0800a400

08006d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d122      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d11b      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f06f 0202 	mvn.w	r2, #2
 8006d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fd55 	bl	80077fe <HAL_TIM_IC_CaptureCallback>
 8006d54:	e005      	b.n	8006d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fd48 	bl	80077ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fd57 	bl	8007810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f003 0304 	and.w	r3, r3, #4
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d122      	bne.n	8006dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d11b      	bne.n	8006dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f06f 0204 	mvn.w	r2, #4
 8006d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2202      	movs	r2, #2
 8006d92:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fd2b 	bl	80077fe <HAL_TIM_IC_CaptureCallback>
 8006da8:	e005      	b.n	8006db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fd1e 	bl	80077ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fd2d 	bl	8007810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	d122      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f003 0308 	and.w	r3, r3, #8
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d11b      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f06f 0208 	mvn.w	r2, #8
 8006de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2204      	movs	r2, #4
 8006de6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f003 0303 	and.w	r3, r3, #3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fd01 	bl	80077fe <HAL_TIM_IC_CaptureCallback>
 8006dfc:	e005      	b.n	8006e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fcf4 	bl	80077ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fd03 	bl	8007810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f003 0310 	and.w	r3, r3, #16
 8006e1a:	2b10      	cmp	r3, #16
 8006e1c:	d122      	bne.n	8006e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b10      	cmp	r3, #16
 8006e2a:	d11b      	bne.n	8006e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0210 	mvn.w	r2, #16
 8006e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2208      	movs	r2, #8
 8006e3a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fcd7 	bl	80077fe <HAL_TIM_IC_CaptureCallback>
 8006e50:	e005      	b.n	8006e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fcca 	bl	80077ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fcd9 	bl	8007810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d10e      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d107      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f06f 0201 	mvn.w	r2, #1
 8006e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7f9 ff84 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e9a:	2b40      	cmp	r3, #64	@ 0x40
 8006e9c:	d10e      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea8:	2b40      	cmp	r3, #64	@ 0x40
 8006eaa:	d107      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fcb3 	bl	8007822 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d010      	beq.n	8006efc <HAL_TIM_PWM_ConfigChannel+0x38>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d00d      	beq.n	8006efc <HAL_TIM_PWM_ConfigChannel+0x38>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	d00a      	beq.n	8006efc <HAL_TIM_PWM_ConfigChannel+0x38>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b0c      	cmp	r3, #12
 8006eea:	d007      	beq.n	8006efc <HAL_TIM_PWM_ConfigChannel+0x38>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b3c      	cmp	r3, #60	@ 0x3c
 8006ef0:	d004      	beq.n	8006efc <HAL_TIM_PWM_ConfigChannel+0x38>
 8006ef2:	f640 71af 	movw	r1, #4015	@ 0xfaf
 8006ef6:	488b      	ldr	r0, [pc, #556]	@ (8007124 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8006ef8:	f7fa fb36 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b60      	cmp	r3, #96	@ 0x60
 8006f02:	d008      	beq.n	8006f16 <HAL_TIM_PWM_ConfigChannel+0x52>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b70      	cmp	r3, #112	@ 0x70
 8006f0a:	d004      	beq.n	8006f16 <HAL_TIM_PWM_ConfigChannel+0x52>
 8006f0c:	f44f 617b 	mov.w	r1, #4016	@ 0xfb0
 8006f10:	4884      	ldr	r0, [pc, #528]	@ (8007124 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8006f12:	f7fa fb29 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d008      	beq.n	8006f30 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d004      	beq.n	8006f30 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8006f26:	f640 71b1 	movw	r1, #4017	@ 0xfb1
 8006f2a:	487e      	ldr	r0, [pc, #504]	@ (8007124 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8006f2c:	f7fa fb1c 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d008      	beq.n	8006f4a <HAL_TIM_PWM_ConfigChannel+0x86>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d004      	beq.n	8006f4a <HAL_TIM_PWM_ConfigChannel+0x86>
 8006f40:	f640 71b2 	movw	r1, #4018	@ 0xfb2
 8006f44:	4877      	ldr	r0, [pc, #476]	@ (8007124 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8006f46:	f7fa fb0f 	bl	8001568 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d101      	bne.n	8006f58 <HAL_TIM_PWM_ConfigChannel+0x94>
 8006f54:	2302      	movs	r3, #2
 8006f56:	e135      	b.n	80071c4 <HAL_TIM_PWM_ConfigChannel+0x300>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b0c      	cmp	r3, #12
 8006f64:	f200 8126 	bhi.w	80071b4 <HAL_TIM_PWM_ConfigChannel+0x2f0>
 8006f68:	a201      	add	r2, pc, #4	@ (adr r2, 8006f70 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006fa5 	.word	0x08006fa5
 8006f74:	080071b5 	.word	0x080071b5
 8006f78:	080071b5 	.word	0x080071b5
 8006f7c:	080071b5 	.word	0x080071b5
 8006f80:	08007035 	.word	0x08007035
 8006f84:	080071b5 	.word	0x080071b5
 8006f88:	080071b5 	.word	0x080071b5
 8006f8c:	080071b5 	.word	0x080071b5
 8006f90:	080070b3 	.word	0x080070b3
 8006f94:	080071b5 	.word	0x080071b5
 8006f98:	080071b5 	.word	0x080071b5
 8006f9c:	080071b5 	.word	0x080071b5
 8006fa0:	08007141 	.word	0x08007141
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fac:	d022      	beq.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x130>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a5d      	ldr	r2, [pc, #372]	@ (8007128 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d01d      	beq.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x130>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a5b      	ldr	r2, [pc, #364]	@ (800712c <HAL_TIM_PWM_ConfigChannel+0x268>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d018      	beq.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x130>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a5a      	ldr	r2, [pc, #360]	@ (8007130 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d013      	beq.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x130>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a58      	ldr	r2, [pc, #352]	@ (8007134 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00e      	beq.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x130>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a57      	ldr	r2, [pc, #348]	@ (8007138 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d009      	beq.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x130>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a55      	ldr	r2, [pc, #340]	@ (800713c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d004      	beq.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x130>
 8006fea:	f640 71bc 	movw	r1, #4028	@ 0xfbc
 8006fee:	484d      	ldr	r0, [pc, #308]	@ (8007124 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8006ff0:	f7fa faba 	bl	8001568 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68b9      	ldr	r1, [r7, #8]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 fc8a 	bl	8007914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699a      	ldr	r2, [r3, #24]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f042 0208 	orr.w	r2, r2, #8
 800700e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699a      	ldr	r2, [r3, #24]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0204 	bic.w	r2, r2, #4
 800701e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6999      	ldr	r1, [r3, #24]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	619a      	str	r2, [r3, #24]
      break;
 8007032:	e0c2      	b.n	80071ba <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703c:	d018      	beq.n	8007070 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a39      	ldr	r2, [pc, #228]	@ (8007128 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d013      	beq.n	8007070 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a37      	ldr	r2, [pc, #220]	@ (800712c <HAL_TIM_PWM_ConfigChannel+0x268>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00e      	beq.n	8007070 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a36      	ldr	r2, [pc, #216]	@ (8007130 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d009      	beq.n	8007070 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a34      	ldr	r2, [pc, #208]	@ (8007134 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d004      	beq.n	8007070 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007066:	f640 71cd 	movw	r1, #4045	@ 0xfcd
 800706a:	482e      	ldr	r0, [pc, #184]	@ (8007124 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800706c:	f7fa fa7c 	bl	8001568 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68b9      	ldr	r1, [r7, #8]
 8007076:	4618      	mov	r0, r3
 8007078:	f000 fc88 	bl	800798c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699a      	ldr	r2, [r3, #24]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800708a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699a      	ldr	r2, [r3, #24]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800709a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6999      	ldr	r1, [r3, #24]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	021a      	lsls	r2, r3, #8
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	619a      	str	r2, [r3, #24]
      break;
 80070b0:	e083      	b.n	80071ba <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ba:	d013      	beq.n	80070e4 <HAL_TIM_PWM_ConfigChannel+0x220>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a19      	ldr	r2, [pc, #100]	@ (8007128 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00e      	beq.n	80070e4 <HAL_TIM_PWM_ConfigChannel+0x220>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a18      	ldr	r2, [pc, #96]	@ (800712c <HAL_TIM_PWM_ConfigChannel+0x268>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d009      	beq.n	80070e4 <HAL_TIM_PWM_ConfigChannel+0x220>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a16      	ldr	r2, [pc, #88]	@ (8007130 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d004      	beq.n	80070e4 <HAL_TIM_PWM_ConfigChannel+0x220>
 80070da:	f640 71de 	movw	r1, #4062	@ 0xfde
 80070de:	4811      	ldr	r0, [pc, #68]	@ (8007124 <HAL_TIM_PWM_ConfigChannel+0x260>)
 80070e0:	f7fa fa42 	bl	8001568 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fc8c 	bl	8007a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69da      	ldr	r2, [r3, #28]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0208 	orr.w	r2, r2, #8
 80070fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69da      	ldr	r2, [r3, #28]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0204 	bic.w	r2, r2, #4
 800710e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69d9      	ldr	r1, [r3, #28]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	61da      	str	r2, [r3, #28]
      break;
 8007122:	e04a      	b.n	80071ba <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8007124:	0800a400 	.word	0x0800a400
 8007128:	40000400 	.word	0x40000400
 800712c:	40000800 	.word	0x40000800
 8007130:	40000c00 	.word	0x40000c00
 8007134:	40010800 	.word	0x40010800
 8007138:	40010c00 	.word	0x40010c00
 800713c:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007148:	d013      	beq.n	8007172 <HAL_TIM_PWM_ConfigChannel+0x2ae>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a1f      	ldr	r2, [pc, #124]	@ (80071cc <HAL_TIM_PWM_ConfigChannel+0x308>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00e      	beq.n	8007172 <HAL_TIM_PWM_ConfigChannel+0x2ae>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a1d      	ldr	r2, [pc, #116]	@ (80071d0 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d009      	beq.n	8007172 <HAL_TIM_PWM_ConfigChannel+0x2ae>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a1c      	ldr	r2, [pc, #112]	@ (80071d4 <HAL_TIM_PWM_ConfigChannel+0x310>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d004      	beq.n	8007172 <HAL_TIM_PWM_ConfigChannel+0x2ae>
 8007168:	f640 71ef 	movw	r1, #4079	@ 0xfef
 800716c:	481a      	ldr	r0, [pc, #104]	@ (80071d8 <HAL_TIM_PWM_ConfigChannel+0x314>)
 800716e:	f7fa f9fb 	bl	8001568 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fc82 	bl	8007a82 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69da      	ldr	r2, [r3, #28]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800718c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800719c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	69d9      	ldr	r1, [r3, #28]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	021a      	lsls	r2, r3, #8
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	61da      	str	r2, [r3, #28]
      break;
 80071b2:	e002      	b.n	80071ba <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      status = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	75fb      	strb	r3, [r7, #23]
      break;
 80071b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	40000400 	.word	0x40000400
 80071d0:	40000800 	.word	0x40000800
 80071d4:	40000c00 	.word	0x40000c00
 80071d8:	0800a400 	.word	0x0800a400

080071dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_TIM_ConfigClockSource+0x1c>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e2ea      	b.n	80077ce <HAL_TIM_ConfigClockSource+0x5f2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007210:	d029      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x8a>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b70      	cmp	r3, #112	@ 0x70
 8007218:	d025      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x8a>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007222:	d020      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x8a>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b40      	cmp	r3, #64	@ 0x40
 800722a:	d01c      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x8a>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b50      	cmp	r3, #80	@ 0x50
 8007232:	d018      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x8a>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b60      	cmp	r3, #96	@ 0x60
 800723a:	d014      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x8a>
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d010      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x8a>
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b10      	cmp	r3, #16
 800724a:	d00c      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x8a>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b20      	cmp	r3, #32
 8007252:	d008      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x8a>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b30      	cmp	r3, #48	@ 0x30
 800725a:	d004      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x8a>
 800725c:	f241 31ba 	movw	r1, #5050	@ 0x13ba
 8007260:	487c      	ldr	r0, [pc, #496]	@ (8007454 <HAL_TIM_ConfigClockSource+0x278>)
 8007262:	f7fa f981 	bl	8001568 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007274:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800727c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800728e:	f000 80f3 	beq.w	8007478 <HAL_TIM_ConfigClockSource+0x29c>
 8007292:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007296:	f200 828d 	bhi.w	80077b4 <HAL_TIM_ConfigClockSource+0x5d8>
 800729a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800729e:	d02d      	beq.n	80072fc <HAL_TIM_ConfigClockSource+0x120>
 80072a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072a4:	f200 8286 	bhi.w	80077b4 <HAL_TIM_ConfigClockSource+0x5d8>
 80072a8:	2b70      	cmp	r3, #112	@ 0x70
 80072aa:	d063      	beq.n	8007374 <HAL_TIM_ConfigClockSource+0x198>
 80072ac:	2b70      	cmp	r3, #112	@ 0x70
 80072ae:	f200 8281 	bhi.w	80077b4 <HAL_TIM_ConfigClockSource+0x5d8>
 80072b2:	2b60      	cmp	r3, #96	@ 0x60
 80072b4:	f000 81a7 	beq.w	8007606 <HAL_TIM_ConfigClockSource+0x42a>
 80072b8:	2b60      	cmp	r3, #96	@ 0x60
 80072ba:	f200 827b 	bhi.w	80077b4 <HAL_TIM_ConfigClockSource+0x5d8>
 80072be:	2b50      	cmp	r3, #80	@ 0x50
 80072c0:	f000 8150 	beq.w	8007564 <HAL_TIM_ConfigClockSource+0x388>
 80072c4:	2b50      	cmp	r3, #80	@ 0x50
 80072c6:	f200 8275 	bhi.w	80077b4 <HAL_TIM_ConfigClockSource+0x5d8>
 80072ca:	2b40      	cmp	r3, #64	@ 0x40
 80072cc:	f000 81fa 	beq.w	80076c4 <HAL_TIM_ConfigClockSource+0x4e8>
 80072d0:	2b40      	cmp	r3, #64	@ 0x40
 80072d2:	f200 826f 	bhi.w	80077b4 <HAL_TIM_ConfigClockSource+0x5d8>
 80072d6:	2b30      	cmp	r3, #48	@ 0x30
 80072d8:	f000 8245 	beq.w	8007766 <HAL_TIM_ConfigClockSource+0x58a>
 80072dc:	2b30      	cmp	r3, #48	@ 0x30
 80072de:	f200 8269 	bhi.w	80077b4 <HAL_TIM_ConfigClockSource+0x5d8>
 80072e2:	2b20      	cmp	r3, #32
 80072e4:	f000 823f 	beq.w	8007766 <HAL_TIM_ConfigClockSource+0x58a>
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	f200 8263 	bhi.w	80077b4 <HAL_TIM_ConfigClockSource+0x5d8>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 8239 	beq.w	8007766 <HAL_TIM_ConfigClockSource+0x58a>
 80072f4:	2b10      	cmp	r3, #16
 80072f6:	f000 8236 	beq.w	8007766 <HAL_TIM_ConfigClockSource+0x58a>
 80072fa:	e25b      	b.n	80077b4 <HAL_TIM_ConfigClockSource+0x5d8>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007304:	f000 8259 	beq.w	80077ba <HAL_TIM_ConfigClockSource+0x5de>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a52      	ldr	r2, [pc, #328]	@ (8007458 <HAL_TIM_ConfigClockSource+0x27c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	f000 8253 	beq.w	80077ba <HAL_TIM_ConfigClockSource+0x5de>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a50      	ldr	r2, [pc, #320]	@ (800745c <HAL_TIM_ConfigClockSource+0x280>)
 800731a:	4293      	cmp	r3, r2
 800731c:	f000 824d 	beq.w	80077ba <HAL_TIM_ConfigClockSource+0x5de>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a4e      	ldr	r2, [pc, #312]	@ (8007460 <HAL_TIM_ConfigClockSource+0x284>)
 8007326:	4293      	cmp	r3, r2
 8007328:	f000 8247 	beq.w	80077ba <HAL_TIM_ConfigClockSource+0x5de>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a4c      	ldr	r2, [pc, #304]	@ (8007464 <HAL_TIM_ConfigClockSource+0x288>)
 8007332:	4293      	cmp	r3, r2
 8007334:	f000 8241 	beq.w	80077ba <HAL_TIM_ConfigClockSource+0x5de>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a4a      	ldr	r2, [pc, #296]	@ (8007468 <HAL_TIM_ConfigClockSource+0x28c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	f000 823b 	beq.w	80077ba <HAL_TIM_ConfigClockSource+0x5de>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a48      	ldr	r2, [pc, #288]	@ (800746c <HAL_TIM_ConfigClockSource+0x290>)
 800734a:	4293      	cmp	r3, r2
 800734c:	f000 8235 	beq.w	80077ba <HAL_TIM_ConfigClockSource+0x5de>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a46      	ldr	r2, [pc, #280]	@ (8007470 <HAL_TIM_ConfigClockSource+0x294>)
 8007356:	4293      	cmp	r3, r2
 8007358:	f000 822f 	beq.w	80077ba <HAL_TIM_ConfigClockSource+0x5de>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a44      	ldr	r2, [pc, #272]	@ (8007474 <HAL_TIM_ConfigClockSource+0x298>)
 8007362:	4293      	cmp	r3, r2
 8007364:	f000 8229 	beq.w	80077ba <HAL_TIM_ConfigClockSource+0x5de>
 8007368:	f241 31c6 	movw	r1, #5062	@ 0x13c6
 800736c:	4839      	ldr	r0, [pc, #228]	@ (8007454 <HAL_TIM_ConfigClockSource+0x278>)
 800736e:	f7fa f8fb 	bl	8001568 <assert_failed>
      break;
 8007372:	e222      	b.n	80077ba <HAL_TIM_ConfigClockSource+0x5de>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800737c:	d018      	beq.n	80073b0 <HAL_TIM_ConfigClockSource+0x1d4>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a35      	ldr	r2, [pc, #212]	@ (8007458 <HAL_TIM_ConfigClockSource+0x27c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d013      	beq.n	80073b0 <HAL_TIM_ConfigClockSource+0x1d4>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a33      	ldr	r2, [pc, #204]	@ (800745c <HAL_TIM_ConfigClockSource+0x280>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d00e      	beq.n	80073b0 <HAL_TIM_ConfigClockSource+0x1d4>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a32      	ldr	r2, [pc, #200]	@ (8007460 <HAL_TIM_ConfigClockSource+0x284>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d009      	beq.n	80073b0 <HAL_TIM_ConfigClockSource+0x1d4>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a32      	ldr	r2, [pc, #200]	@ (800746c <HAL_TIM_ConfigClockSource+0x290>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d004      	beq.n	80073b0 <HAL_TIM_ConfigClockSource+0x1d4>
 80073a6:	f241 31cd 	movw	r1, #5069	@ 0x13cd
 80073aa:	482a      	ldr	r0, [pc, #168]	@ (8007454 <HAL_TIM_ConfigClockSource+0x278>)
 80073ac:	f7fa f8dc 	bl	8001568 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d013      	beq.n	80073e0 <HAL_TIM_ConfigClockSource+0x204>
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073c0:	d00e      	beq.n	80073e0 <HAL_TIM_ConfigClockSource+0x204>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ca:	d009      	beq.n	80073e0 <HAL_TIM_ConfigClockSource+0x204>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073d4:	d004      	beq.n	80073e0 <HAL_TIM_ConfigClockSource+0x204>
 80073d6:	f241 31d0 	movw	r1, #5072	@ 0x13d0
 80073da:	481e      	ldr	r0, [pc, #120]	@ (8007454 <HAL_TIM_ConfigClockSource+0x278>)
 80073dc:	f7fa f8c4 	bl	8001568 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073e8:	d014      	beq.n	8007414 <HAL_TIM_ConfigClockSource+0x238>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d010      	beq.n	8007414 <HAL_TIM_ConfigClockSource+0x238>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00c      	beq.n	8007414 <HAL_TIM_ConfigClockSource+0x238>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d008      	beq.n	8007414 <HAL_TIM_ConfigClockSource+0x238>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2b0a      	cmp	r3, #10
 8007408:	d004      	beq.n	8007414 <HAL_TIM_ConfigClockSource+0x238>
 800740a:	f241 31d1 	movw	r1, #5073	@ 0x13d1
 800740e:	4811      	ldr	r0, [pc, #68]	@ (8007454 <HAL_TIM_ConfigClockSource+0x278>)
 8007410:	f7fa f8aa 	bl	8001568 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	2b0f      	cmp	r3, #15
 800741a:	d904      	bls.n	8007426 <HAL_TIM_ConfigClockSource+0x24a>
 800741c:	f241 31d2 	movw	r1, #5074	@ 0x13d2
 8007420:	480c      	ldr	r0, [pc, #48]	@ (8007454 <HAL_TIM_ConfigClockSource+0x278>)
 8007422:	f7fa f8a1 	bl	8001568 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007436:	f000 fbd9 	bl	8007bec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007448:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	609a      	str	r2, [r3, #8]
      break;
 8007452:	e1b3      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x5e0>
 8007454:	0800a400 	.word	0x0800a400
 8007458:	40000400 	.word	0x40000400
 800745c:	40000800 	.word	0x40000800
 8007460:	40000c00 	.word	0x40000c00
 8007464:	40001000 	.word	0x40001000
 8007468:	40001400 	.word	0x40001400
 800746c:	40010800 	.word	0x40010800
 8007470:	40010c00 	.word	0x40010c00
 8007474:	40011000 	.word	0x40011000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007480:	d022      	beq.n	80074c8 <HAL_TIM_ConfigClockSource+0x2ec>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a88      	ldr	r2, [pc, #544]	@ (80076a8 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d01d      	beq.n	80074c8 <HAL_TIM_ConfigClockSource+0x2ec>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a86      	ldr	r2, [pc, #536]	@ (80076ac <HAL_TIM_ConfigClockSource+0x4d0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d018      	beq.n	80074c8 <HAL_TIM_ConfigClockSource+0x2ec>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a85      	ldr	r2, [pc, #532]	@ (80076b0 <HAL_TIM_ConfigClockSource+0x4d4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d013      	beq.n	80074c8 <HAL_TIM_ConfigClockSource+0x2ec>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a83      	ldr	r2, [pc, #524]	@ (80076b4 <HAL_TIM_ConfigClockSource+0x4d8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00e      	beq.n	80074c8 <HAL_TIM_ConfigClockSource+0x2ec>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a82      	ldr	r2, [pc, #520]	@ (80076b8 <HAL_TIM_ConfigClockSource+0x4dc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d009      	beq.n	80074c8 <HAL_TIM_ConfigClockSource+0x2ec>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a80      	ldr	r2, [pc, #512]	@ (80076bc <HAL_TIM_ConfigClockSource+0x4e0>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d004      	beq.n	80074c8 <HAL_TIM_ConfigClockSource+0x2ec>
 80074be:	f241 31e5 	movw	r1, #5093	@ 0x13e5
 80074c2:	487f      	ldr	r0, [pc, #508]	@ (80076c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 80074c4:	f7fa f850 	bl	8001568 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d013      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0x31c>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074d8:	d00e      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0x31c>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074e2:	d009      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0x31c>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074ec:	d004      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0x31c>
 80074ee:	f241 31e8 	movw	r1, #5096	@ 0x13e8
 80074f2:	4873      	ldr	r0, [pc, #460]	@ (80076c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 80074f4:	f7fa f838 	bl	8001568 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007500:	d014      	beq.n	800752c <HAL_TIM_ConfigClockSource+0x350>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d010      	beq.n	800752c <HAL_TIM_ConfigClockSource+0x350>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00c      	beq.n	800752c <HAL_TIM_ConfigClockSource+0x350>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d008      	beq.n	800752c <HAL_TIM_ConfigClockSource+0x350>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b0a      	cmp	r3, #10
 8007520:	d004      	beq.n	800752c <HAL_TIM_ConfigClockSource+0x350>
 8007522:	f241 31e9 	movw	r1, #5097	@ 0x13e9
 8007526:	4866      	ldr	r0, [pc, #408]	@ (80076c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007528:	f7fa f81e 	bl	8001568 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	2b0f      	cmp	r3, #15
 8007532:	d904      	bls.n	800753e <HAL_TIM_ConfigClockSource+0x362>
 8007534:	f241 31ea 	movw	r1, #5098	@ 0x13ea
 8007538:	4861      	ldr	r0, [pc, #388]	@ (80076c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 800753a:	f7fa f815 	bl	8001568 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800754e:	f000 fb4d 	bl	8007bec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007560:	609a      	str	r2, [r3, #8]
      break;
 8007562:	e12b      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x5e0>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756c:	d018      	beq.n	80075a0 <HAL_TIM_ConfigClockSource+0x3c4>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a4d      	ldr	r2, [pc, #308]	@ (80076a8 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d013      	beq.n	80075a0 <HAL_TIM_ConfigClockSource+0x3c4>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a4b      	ldr	r2, [pc, #300]	@ (80076ac <HAL_TIM_ConfigClockSource+0x4d0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00e      	beq.n	80075a0 <HAL_TIM_ConfigClockSource+0x3c4>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a4a      	ldr	r2, [pc, #296]	@ (80076b0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d009      	beq.n	80075a0 <HAL_TIM_ConfigClockSource+0x3c4>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a48      	ldr	r2, [pc, #288]	@ (80076b4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d004      	beq.n	80075a0 <HAL_TIM_ConfigClockSource+0x3c4>
 8007596:	f241 31f9 	movw	r1, #5113	@ 0x13f9
 800759a:	4849      	ldr	r0, [pc, #292]	@ (80076c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 800759c:	f7f9 ffe4 	bl	8001568 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075a8:	d014      	beq.n	80075d4 <HAL_TIM_ConfigClockSource+0x3f8>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d010      	beq.n	80075d4 <HAL_TIM_ConfigClockSource+0x3f8>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00c      	beq.n	80075d4 <HAL_TIM_ConfigClockSource+0x3f8>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d008      	beq.n	80075d4 <HAL_TIM_ConfigClockSource+0x3f8>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	2b0a      	cmp	r3, #10
 80075c8:	d004      	beq.n	80075d4 <HAL_TIM_ConfigClockSource+0x3f8>
 80075ca:	f241 31fc 	movw	r1, #5116	@ 0x13fc
 80075ce:	483c      	ldr	r0, [pc, #240]	@ (80076c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 80075d0:	f7f9 ffca 	bl	8001568 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	2b0f      	cmp	r3, #15
 80075da:	d904      	bls.n	80075e6 <HAL_TIM_ConfigClockSource+0x40a>
 80075dc:	f241 31fd 	movw	r1, #5117	@ 0x13fd
 80075e0:	4837      	ldr	r0, [pc, #220]	@ (80076c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 80075e2:	f7f9 ffc1 	bl	8001568 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075f2:	461a      	mov	r2, r3
 80075f4:	f000 fa83 	bl	8007afe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2150      	movs	r1, #80	@ 0x50
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fada 	bl	8007bb8 <TIM_ITRx_SetConfig>
      break;
 8007604:	e0da      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x5e0>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800760e:	d018      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x466>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a24      	ldr	r2, [pc, #144]	@ (80076a8 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d013      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x466>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a23      	ldr	r2, [pc, #140]	@ (80076ac <HAL_TIM_ConfigClockSource+0x4d0>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d00e      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x466>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a21      	ldr	r2, [pc, #132]	@ (80076b0 <HAL_TIM_ConfigClockSource+0x4d4>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d009      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x466>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a20      	ldr	r2, [pc, #128]	@ (80076b4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d004      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x466>
 8007638:	f241 4109 	movw	r1, #5129	@ 0x1409
 800763c:	4820      	ldr	r0, [pc, #128]	@ (80076c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 800763e:	f7f9 ff93 	bl	8001568 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800764a:	d014      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x49a>
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d010      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x49a>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00c      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x49a>
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d008      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x49a>
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2b0a      	cmp	r3, #10
 800766a:	d004      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x49a>
 800766c:	f241 410c 	movw	r1, #5132	@ 0x140c
 8007670:	4813      	ldr	r0, [pc, #76]	@ (80076c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007672:	f7f9 ff79 	bl	8001568 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	2b0f      	cmp	r3, #15
 800767c:	d904      	bls.n	8007688 <HAL_TIM_ConfigClockSource+0x4ac>
 800767e:	f241 410d 	movw	r1, #5133	@ 0x140d
 8007682:	480f      	ldr	r0, [pc, #60]	@ (80076c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007684:	f7f9 ff70 	bl	8001568 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007694:	461a      	mov	r2, r3
 8007696:	f000 fa60 	bl	8007b5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2160      	movs	r1, #96	@ 0x60
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 fa89 	bl	8007bb8 <TIM_ITRx_SetConfig>
      break;
 80076a6:	e089      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x5e0>
 80076a8:	40000400 	.word	0x40000400
 80076ac:	40000800 	.word	0x40000800
 80076b0:	40000c00 	.word	0x40000c00
 80076b4:	40010800 	.word	0x40010800
 80076b8:	40010c00 	.word	0x40010c00
 80076bc:	40011000 	.word	0x40011000
 80076c0:	0800a400 	.word	0x0800a400
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076cc:	d018      	beq.n	8007700 <HAL_TIM_ConfigClockSource+0x524>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a41      	ldr	r2, [pc, #260]	@ (80077d8 <HAL_TIM_ConfigClockSource+0x5fc>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <HAL_TIM_ConfigClockSource+0x524>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a3f      	ldr	r2, [pc, #252]	@ (80077dc <HAL_TIM_ConfigClockSource+0x600>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00e      	beq.n	8007700 <HAL_TIM_ConfigClockSource+0x524>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a3e      	ldr	r2, [pc, #248]	@ (80077e0 <HAL_TIM_ConfigClockSource+0x604>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d009      	beq.n	8007700 <HAL_TIM_ConfigClockSource+0x524>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a3c      	ldr	r2, [pc, #240]	@ (80077e4 <HAL_TIM_ConfigClockSource+0x608>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d004      	beq.n	8007700 <HAL_TIM_ConfigClockSource+0x524>
 80076f6:	f241 4119 	movw	r1, #5145	@ 0x1419
 80076fa:	483b      	ldr	r0, [pc, #236]	@ (80077e8 <HAL_TIM_ConfigClockSource+0x60c>)
 80076fc:	f7f9 ff34 	bl	8001568 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007708:	d014      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x558>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d010      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x558>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x558>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d008      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x558>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2b0a      	cmp	r3, #10
 8007728:	d004      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x558>
 800772a:	f241 411c 	movw	r1, #5148	@ 0x141c
 800772e:	482e      	ldr	r0, [pc, #184]	@ (80077e8 <HAL_TIM_ConfigClockSource+0x60c>)
 8007730:	f7f9 ff1a 	bl	8001568 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b0f      	cmp	r3, #15
 800773a:	d904      	bls.n	8007746 <HAL_TIM_ConfigClockSource+0x56a>
 800773c:	f241 411d 	movw	r1, #5149	@ 0x141d
 8007740:	4829      	ldr	r0, [pc, #164]	@ (80077e8 <HAL_TIM_ConfigClockSource+0x60c>)
 8007742:	f7f9 ff11 	bl	8001568 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007752:	461a      	mov	r2, r3
 8007754:	f000 f9d3 	bl	8007afe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2140      	movs	r1, #64	@ 0x40
 800775e:	4618      	mov	r0, r3
 8007760:	f000 fa2a 	bl	8007bb8 <TIM_ITRx_SetConfig>
      break;
 8007764:	e02a      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x5e0>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800776e:	d018      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x5c6>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a18      	ldr	r2, [pc, #96]	@ (80077d8 <HAL_TIM_ConfigClockSource+0x5fc>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x5c6>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a17      	ldr	r2, [pc, #92]	@ (80077dc <HAL_TIM_ConfigClockSource+0x600>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00e      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x5c6>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a15      	ldr	r2, [pc, #84]	@ (80077e0 <HAL_TIM_ConfigClockSource+0x604>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d009      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x5c6>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a14      	ldr	r2, [pc, #80]	@ (80077e4 <HAL_TIM_ConfigClockSource+0x608>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d004      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x5c6>
 8007798:	f241 412c 	movw	r1, #5164	@ 0x142c
 800779c:	4812      	ldr	r0, [pc, #72]	@ (80077e8 <HAL_TIM_ConfigClockSource+0x60c>)
 800779e:	f7f9 fee3 	bl	8001568 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4619      	mov	r1, r3
 80077ac:	4610      	mov	r0, r2
 80077ae:	f000 fa03 	bl	8007bb8 <TIM_ITRx_SetConfig>
      break;
 80077b2:	e003      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x5e0>
    }

    default:
      status = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]
      break;
 80077b8:	e000      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x5e0>
      break;
 80077ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40000400 	.word	0x40000400
 80077dc:	40000800 	.word	0x40000800
 80077e0:	40000c00 	.word	0x40000c00
 80077e4:	40010800 	.word	0x40010800
 80077e8:	0800a400 	.word	0x0800a400

080077ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bc80      	pop	{r7}
 80077fc:	4770      	bx	lr

080077fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr

08007810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr

08007822 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	bc80      	pop	{r7}
 8007832:	4770      	bx	lr

08007834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800784a:	d00f      	beq.n	800786c <TIM_Base_SetConfig+0x38>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a2b      	ldr	r2, [pc, #172]	@ (80078fc <TIM_Base_SetConfig+0xc8>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00b      	beq.n	800786c <TIM_Base_SetConfig+0x38>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a2a      	ldr	r2, [pc, #168]	@ (8007900 <TIM_Base_SetConfig+0xcc>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d007      	beq.n	800786c <TIM_Base_SetConfig+0x38>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a29      	ldr	r2, [pc, #164]	@ (8007904 <TIM_Base_SetConfig+0xd0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d003      	beq.n	800786c <TIM_Base_SetConfig+0x38>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a28      	ldr	r2, [pc, #160]	@ (8007908 <TIM_Base_SetConfig+0xd4>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d108      	bne.n	800787e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007884:	d017      	beq.n	80078b6 <TIM_Base_SetConfig+0x82>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a1c      	ldr	r2, [pc, #112]	@ (80078fc <TIM_Base_SetConfig+0xc8>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d013      	beq.n	80078b6 <TIM_Base_SetConfig+0x82>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a1b      	ldr	r2, [pc, #108]	@ (8007900 <TIM_Base_SetConfig+0xcc>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00f      	beq.n	80078b6 <TIM_Base_SetConfig+0x82>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a1a      	ldr	r2, [pc, #104]	@ (8007904 <TIM_Base_SetConfig+0xd0>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00b      	beq.n	80078b6 <TIM_Base_SetConfig+0x82>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a19      	ldr	r2, [pc, #100]	@ (8007908 <TIM_Base_SetConfig+0xd4>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d007      	beq.n	80078b6 <TIM_Base_SetConfig+0x82>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a18      	ldr	r2, [pc, #96]	@ (800790c <TIM_Base_SetConfig+0xd8>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d003      	beq.n	80078b6 <TIM_Base_SetConfig+0x82>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a17      	ldr	r2, [pc, #92]	@ (8007910 <TIM_Base_SetConfig+0xdc>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d108      	bne.n	80078c8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689a      	ldr	r2, [r3, #8]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	615a      	str	r2, [r3, #20]
}
 80078f2:	bf00      	nop
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bc80      	pop	{r7}
 80078fa:	4770      	bx	lr
 80078fc:	40000400 	.word	0x40000400
 8007900:	40000800 	.word	0x40000800
 8007904:	40000c00 	.word	0x40000c00
 8007908:	40010800 	.word	0x40010800
 800790c:	40010c00 	.word	0x40010c00
 8007910:	40011000 	.word	0x40011000

08007914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	f023 0201 	bic.w	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0303 	bic.w	r3, r3, #3
 800794a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f023 0302 	bic.w	r3, r3, #2
 800795c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4313      	orrs	r3, r2
 8007966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	621a      	str	r2, [r3, #32]
}
 8007982:	bf00      	nop
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	bc80      	pop	{r7}
 800798a:	4770      	bx	lr

0800798c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	f023 0210 	bic.w	r2, r3, #16
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f023 0320 	bic.w	r3, r3, #32
 80079d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	011b      	lsls	r3, r3, #4
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	621a      	str	r2, [r3, #32]
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bc80      	pop	{r7}
 8007a06:	4770      	bx	lr

08007a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0303 	bic.w	r3, r3, #3
 8007a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	021b      	lsls	r3, r3, #8
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	621a      	str	r2, [r3, #32]
}
 8007a78:	bf00      	nop
 8007a7a:	371c      	adds	r7, #28
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr

08007a82 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b087      	sub	sp, #28
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ab0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	021b      	lsls	r3, r3, #8
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	031b      	lsls	r3, r3, #12
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	621a      	str	r2, [r3, #32]
}
 8007af4:	bf00      	nop
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bc80      	pop	{r7}
 8007afc:	4770      	bx	lr

08007afe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b087      	sub	sp, #28
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a1b      	ldr	r3, [r3, #32]
 8007b14:	f023 0201 	bic.w	r2, r3, #1
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f023 030a 	bic.w	r3, r3, #10
 8007b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	621a      	str	r2, [r3, #32]
}
 8007b50:	bf00      	nop
 8007b52:	371c      	adds	r7, #28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bc80      	pop	{r7}
 8007b58:	4770      	bx	lr

08007b5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b087      	sub	sp, #28
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	f023 0210 	bic.w	r2, r3, #16
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	031b      	lsls	r3, r3, #12
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	621a      	str	r2, [r3, #32]
}
 8007bae:	bf00      	nop
 8007bb0:	371c      	adds	r7, #28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bc80      	pop	{r7}
 8007bb6:	4770      	bx	lr

08007bb8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	f043 0307 	orr.w	r3, r3, #7
 8007bda:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	609a      	str	r2, [r3, #8]
}
 8007be2:	bf00      	nop
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr

08007bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	021a      	lsls	r2, r3, #8
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	609a      	str	r2, [r3, #8]
}
 8007c20:	bf00      	nop
 8007c22:	371c      	adds	r7, #28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc80      	pop	{r7}
 8007c28:	4770      	bx	lr
	...

08007c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c3e:	d01c      	beq.n	8007c7a <TIM_CCxChannelCmd+0x4e>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4a26      	ldr	r2, [pc, #152]	@ (8007cdc <TIM_CCxChannelCmd+0xb0>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d018      	beq.n	8007c7a <TIM_CCxChannelCmd+0x4e>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4a25      	ldr	r2, [pc, #148]	@ (8007ce0 <TIM_CCxChannelCmd+0xb4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d014      	beq.n	8007c7a <TIM_CCxChannelCmd+0x4e>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4a24      	ldr	r2, [pc, #144]	@ (8007ce4 <TIM_CCxChannelCmd+0xb8>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d010      	beq.n	8007c7a <TIM_CCxChannelCmd+0x4e>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4a23      	ldr	r2, [pc, #140]	@ (8007ce8 <TIM_CCxChannelCmd+0xbc>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d00c      	beq.n	8007c7a <TIM_CCxChannelCmd+0x4e>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4a22      	ldr	r2, [pc, #136]	@ (8007cec <TIM_CCxChannelCmd+0xc0>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d008      	beq.n	8007c7a <TIM_CCxChannelCmd+0x4e>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4a21      	ldr	r2, [pc, #132]	@ (8007cf0 <TIM_CCxChannelCmd+0xc4>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d004      	beq.n	8007c7a <TIM_CCxChannelCmd+0x4e>
 8007c70:	f641 31de 	movw	r1, #7134	@ 0x1bde
 8007c74:	481f      	ldr	r0, [pc, #124]	@ (8007cf4 <TIM_CCxChannelCmd+0xc8>)
 8007c76:	f7f9 fc77 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d010      	beq.n	8007ca2 <TIM_CCxChannelCmd+0x76>
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2b04      	cmp	r3, #4
 8007c84:	d00d      	beq.n	8007ca2 <TIM_CCxChannelCmd+0x76>
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b08      	cmp	r3, #8
 8007c8a:	d00a      	beq.n	8007ca2 <TIM_CCxChannelCmd+0x76>
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b0c      	cmp	r3, #12
 8007c90:	d007      	beq.n	8007ca2 <TIM_CCxChannelCmd+0x76>
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b3c      	cmp	r3, #60	@ 0x3c
 8007c96:	d004      	beq.n	8007ca2 <TIM_CCxChannelCmd+0x76>
 8007c98:	f641 31df 	movw	r1, #7135	@ 0x1bdf
 8007c9c:	4815      	ldr	r0, [pc, #84]	@ (8007cf4 <TIM_CCxChannelCmd+0xc8>)
 8007c9e:	f7f9 fc63 	bl	8001568 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f003 031f 	and.w	r3, r3, #31
 8007ca8:	2201      	movs	r2, #1
 8007caa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a1a      	ldr	r2, [r3, #32]
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	43db      	mvns	r3, r3
 8007cb8:	401a      	ands	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a1a      	ldr	r2, [r3, #32]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f003 031f 	and.w	r3, r3, #31
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	fa01 f303 	lsl.w	r3, r1, r3
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	621a      	str	r2, [r3, #32]
}
 8007cd4:	bf00      	nop
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	40000400 	.word	0x40000400
 8007ce0:	40000800 	.word	0x40000800
 8007ce4:	40000c00 	.word	0x40000c00
 8007ce8:	40010800 	.word	0x40010800
 8007cec:	40010c00 	.word	0x40010c00
 8007cf0:	40011000 	.word	0x40011000
 8007cf4:	0800a400 	.word	0x0800a400

08007cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d0a:	d021      	beq.n	8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a50      	ldr	r2, [pc, #320]	@ (8007e54 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d01c      	beq.n	8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a4f      	ldr	r2, [pc, #316]	@ (8007e58 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d017      	beq.n	8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a4d      	ldr	r2, [pc, #308]	@ (8007e5c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d012      	beq.n	8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a4c      	ldr	r2, [pc, #304]	@ (8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d00d      	beq.n	8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a4a      	ldr	r2, [pc, #296]	@ (8007e64 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d008      	beq.n	8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a49      	ldr	r2, [pc, #292]	@ (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d003      	beq.n	8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8007d48:	215a      	movs	r1, #90	@ 0x5a
 8007d4a:	4848      	ldr	r0, [pc, #288]	@ (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007d4c:	f7f9 fc0c 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01f      	beq.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b10      	cmp	r3, #16
 8007d5e:	d01b      	beq.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	d017      	beq.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b30      	cmp	r3, #48	@ 0x30
 8007d6e:	d013      	beq.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b40      	cmp	r3, #64	@ 0x40
 8007d76:	d00f      	beq.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b50      	cmp	r3, #80	@ 0x50
 8007d7e:	d00b      	beq.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b60      	cmp	r3, #96	@ 0x60
 8007d86:	d007      	beq.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b70      	cmp	r3, #112	@ 0x70
 8007d8e:	d003      	beq.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007d90:	215b      	movs	r1, #91	@ 0x5b
 8007d92:	4836      	ldr	r0, [pc, #216]	@ (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007d94:	f7f9 fbe8 	bl	8001568 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	2b80      	cmp	r3, #128	@ 0x80
 8007d9e:	d007      	beq.n	8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007da8:	215c      	movs	r1, #92	@ 0x5c
 8007daa:	4830      	ldr	r0, [pc, #192]	@ (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007dac:	f7f9 fbdc 	bl	8001568 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d101      	bne.n	8007dbe <HAL_TIMEx_MasterConfigSynchronization+0xc6>
 8007dba:	2302      	movs	r3, #2
 8007dbc:	e046      	b.n	8007e4c <HAL_TIMEx_MasterConfigSynchronization+0x154>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007de4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e00:	d00e      	beq.n	8007e20 <HAL_TIMEx_MasterConfigSynchronization+0x128>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a13      	ldr	r2, [pc, #76]	@ (8007e54 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d009      	beq.n	8007e20 <HAL_TIMEx_MasterConfigSynchronization+0x128>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a11      	ldr	r2, [pc, #68]	@ (8007e58 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d004      	beq.n	8007e20 <HAL_TIMEx_MasterConfigSynchronization+0x128>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a13      	ldr	r2, [pc, #76]	@ (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d10c      	bne.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0x142>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	40000400 	.word	0x40000400
 8007e58:	40000800 	.word	0x40000800
 8007e5c:	40000c00 	.word	0x40000c00
 8007e60:	40001000 	.word	0x40001000
 8007e64:	40001400 	.word	0x40001400
 8007e68:	40010800 	.word	0x40010800
 8007e6c:	0800a438 	.word	0x0800a438

08007e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e0ad      	b.n	8007fde <HAL_UART_Init+0x16e>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d02c      	beq.n	8007ee4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a56      	ldr	r2, [pc, #344]	@ (8007fe8 <HAL_UART_Init+0x178>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d00e      	beq.n	8007eb2 <HAL_UART_Init+0x42>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a54      	ldr	r2, [pc, #336]	@ (8007fec <HAL_UART_Init+0x17c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d009      	beq.n	8007eb2 <HAL_UART_Init+0x42>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a53      	ldr	r2, [pc, #332]	@ (8007ff0 <HAL_UART_Init+0x180>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d004      	beq.n	8007eb2 <HAL_UART_Init+0x42>
 8007ea8:	f240 116d 	movw	r1, #365	@ 0x16d
 8007eac:	4851      	ldr	r0, [pc, #324]	@ (8007ff4 <HAL_UART_Init+0x184>)
 8007eae:	f7f9 fb5b 	bl	8001568 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d032      	beq.n	8007f20 <HAL_UART_Init+0xb0>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec2:	d02d      	beq.n	8007f20 <HAL_UART_Init+0xb0>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ecc:	d028      	beq.n	8007f20 <HAL_UART_Init+0xb0>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ed6:	d023      	beq.n	8007f20 <HAL_UART_Init+0xb0>
 8007ed8:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8007edc:	4845      	ldr	r0, [pc, #276]	@ (8007ff4 <HAL_UART_Init+0x184>)
 8007ede:	f7f9 fb43 	bl	8001568 <assert_failed>
 8007ee2:	e01d      	b.n	8007f20 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a3f      	ldr	r2, [pc, #252]	@ (8007fe8 <HAL_UART_Init+0x178>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d018      	beq.n	8007f20 <HAL_UART_Init+0xb0>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a3e      	ldr	r2, [pc, #248]	@ (8007fec <HAL_UART_Init+0x17c>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d013      	beq.n	8007f20 <HAL_UART_Init+0xb0>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a3c      	ldr	r2, [pc, #240]	@ (8007ff0 <HAL_UART_Init+0x180>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d00e      	beq.n	8007f20 <HAL_UART_Init+0xb0>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a3c      	ldr	r2, [pc, #240]	@ (8007ff8 <HAL_UART_Init+0x188>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d009      	beq.n	8007f20 <HAL_UART_Init+0xb0>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a3a      	ldr	r2, [pc, #232]	@ (8007ffc <HAL_UART_Init+0x18c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d004      	beq.n	8007f20 <HAL_UART_Init+0xb0>
 8007f16:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 8007f1a:	4836      	ldr	r0, [pc, #216]	@ (8007ff4 <HAL_UART_Init+0x184>)
 8007f1c:	f7f9 fb24 	bl	8001568 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d009      	beq.n	8007f3c <HAL_UART_Init+0xcc>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f30:	d004      	beq.n	8007f3c <HAL_UART_Init+0xcc>
 8007f32:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8007f36:	482f      	ldr	r0, [pc, #188]	@ (8007ff4 <HAL_UART_Init+0x184>)
 8007f38:	f7f9 fb16 	bl	8001568 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	69db      	ldr	r3, [r3, #28]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d009      	beq.n	8007f58 <HAL_UART_Init+0xe8>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f4c:	d004      	beq.n	8007f58 <HAL_UART_Init+0xe8>
 8007f4e:	f240 1175 	movw	r1, #373	@ 0x175
 8007f52:	4828      	ldr	r0, [pc, #160]	@ (8007ff4 <HAL_UART_Init+0x184>)
 8007f54:	f7f9 fb08 	bl	8001568 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d106      	bne.n	8007f72 <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7f9 fc0f 	bl	8001790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2224      	movs	r2, #36	@ 0x24
 8007f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f88:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fdd2 	bl	8008b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691a      	ldr	r2, [r3, #16]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f9e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	695a      	ldr	r2, [r3, #20]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007fae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fbe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2220      	movs	r2, #32
 8007fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	40013800 	.word	0x40013800
 8007fec:	40004400 	.word	0x40004400
 8007ff0:	40004800 	.word	0x40004800
 8007ff4:	0800a474 	.word	0x0800a474
 8007ff8:	40004c00 	.word	0x40004c00
 8007ffc:	40005000 	.word	0x40005000

08008000 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08a      	sub	sp, #40	@ 0x28
 8008004:	af02      	add	r7, sp, #8
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	4613      	mov	r3, r2
 800800e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b20      	cmp	r3, #32
 800801e:	d16d      	bne.n	80080fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <HAL_UART_Transmit+0x2c>
 8008026:	88fb      	ldrh	r3, [r7, #6]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e066      	b.n	80080fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2221      	movs	r2, #33	@ 0x21
 800803a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800803e:	f7fa faa5 	bl	800258c <HAL_GetTick>
 8008042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	88fa      	ldrh	r2, [r7, #6]
 8008048:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	88fa      	ldrh	r2, [r7, #6]
 800804e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008058:	d108      	bne.n	800806c <HAL_UART_Transmit+0x6c>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d104      	bne.n	800806c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008062:	2300      	movs	r3, #0
 8008064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	61bb      	str	r3, [r7, #24]
 800806a:	e003      	b.n	8008074 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008070:	2300      	movs	r3, #0
 8008072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008074:	e02a      	b.n	80080cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2200      	movs	r2, #0
 800807e:	2180      	movs	r1, #128	@ 0x80
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 fb14 	bl	80086ae <UART_WaitOnFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e036      	b.n	80080fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10b      	bne.n	80080ae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	3302      	adds	r3, #2
 80080aa:	61bb      	str	r3, [r7, #24]
 80080ac:	e007      	b.n	80080be <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	781a      	ldrb	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	3301      	adds	r3, #1
 80080bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	3b01      	subs	r3, #1
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1cf      	bne.n	8008076 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2200      	movs	r2, #0
 80080de:	2140      	movs	r1, #64	@ 0x40
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 fae4 	bl	80086ae <UART_WaitOnFlagUntilTimeout>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e006      	b.n	80080fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e000      	b.n	80080fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80080fc:	2302      	movs	r3, #2
  }
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3720      	adds	r7, #32
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	4613      	mov	r3, r2
 8008112:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b20      	cmp	r3, #32
 800811e:	d112      	bne.n	8008146 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <HAL_UART_Receive_IT+0x26>
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e00b      	b.n	8008148 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008136:	88fb      	ldrh	r3, [r7, #6]
 8008138:	461a      	mov	r2, r3
 800813a:	68b9      	ldr	r1, [r7, #8]
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 fb24 	bl	800878a <UART_Start_Receive_IT>
 8008142:	4603      	mov	r3, r0
 8008144:	e000      	b.n	8008148 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008146:	2302      	movs	r3, #2
  }
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b0ba      	sub	sp, #232	@ 0xe8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008176:	2300      	movs	r3, #0
 8008178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800817c:	2300      	movs	r3, #0
 800817e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800818e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10f      	bne.n	80081b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800819a:	f003 0320 	and.w	r3, r3, #32
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d009      	beq.n	80081b6 <HAL_UART_IRQHandler+0x66>
 80081a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fc01 	bl	80089b6 <UART_Receive_IT>
      return;
 80081b4:	e25b      	b.n	800866e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 80de 	beq.w	800837c <HAL_UART_IRQHandler+0x22c>
 80081c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 80d1 	beq.w	800837c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00b      	beq.n	80081fe <HAL_UART_IRQHandler+0xae>
 80081e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d005      	beq.n	80081fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081f6:	f043 0201 	orr.w	r2, r3, #1
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008202:	f003 0304 	and.w	r3, r3, #4
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00b      	beq.n	8008222 <HAL_UART_IRQHandler+0xd2>
 800820a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	2b00      	cmp	r3, #0
 8008214:	d005      	beq.n	8008222 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800821a:	f043 0202 	orr.w	r2, r3, #2
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00b      	beq.n	8008246 <HAL_UART_IRQHandler+0xf6>
 800822e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d005      	beq.n	8008246 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800823e:	f043 0204 	orr.w	r2, r3, #4
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800824a:	f003 0308 	and.w	r3, r3, #8
 800824e:	2b00      	cmp	r3, #0
 8008250:	d011      	beq.n	8008276 <HAL_UART_IRQHandler+0x126>
 8008252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b00      	cmp	r3, #0
 800825c:	d105      	bne.n	800826a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800825e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d005      	beq.n	8008276 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800826e:	f043 0208 	orr.w	r2, r3, #8
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 81f2 	beq.w	8008664 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008284:	f003 0320 	and.w	r3, r3, #32
 8008288:	2b00      	cmp	r3, #0
 800828a:	d008      	beq.n	800829e <HAL_UART_IRQHandler+0x14e>
 800828c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008290:	f003 0320 	and.w	r3, r3, #32
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fb8c 	bl	80089b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a8:	2b40      	cmp	r3, #64	@ 0x40
 80082aa:	bf0c      	ite	eq
 80082ac:	2301      	moveq	r3, #1
 80082ae:	2300      	movne	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ba:	f003 0308 	and.w	r3, r3, #8
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d103      	bne.n	80082ca <HAL_UART_IRQHandler+0x17a>
 80082c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d04f      	beq.n	800836a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa96 	bl	80087fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082da:	2b40      	cmp	r3, #64	@ 0x40
 80082dc:	d141      	bne.n	8008362 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3314      	adds	r3, #20
 80082e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082ec:	e853 3f00 	ldrex	r3, [r3]
 80082f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80082f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3314      	adds	r3, #20
 8008306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800830a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800830e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800831a:	e841 2300 	strex	r3, r2, [r1]
 800831e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1d9      	bne.n	80082de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d013      	beq.n	800835a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008336:	4a7e      	ldr	r2, [pc, #504]	@ (8008530 <HAL_UART_IRQHandler+0x3e0>)
 8008338:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800833e:	4618      	mov	r0, r3
 8008340:	f7fa fac1 	bl	80028c6 <HAL_DMA_Abort_IT>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d016      	beq.n	8008378 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800834e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008354:	4610      	mov	r0, r2
 8008356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008358:	e00e      	b.n	8008378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f993 	bl	8008686 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008360:	e00a      	b.n	8008378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f98f 	bl	8008686 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008368:	e006      	b.n	8008378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f98b 	bl	8008686 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008376:	e175      	b.n	8008664 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008378:	bf00      	nop
    return;
 800837a:	e173      	b.n	8008664 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008380:	2b01      	cmp	r3, #1
 8008382:	f040 814f 	bne.w	8008624 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800838a:	f003 0310 	and.w	r3, r3, #16
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 8148 	beq.w	8008624 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008398:	f003 0310 	and.w	r3, r3, #16
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 8141 	beq.w	8008624 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083a2:	2300      	movs	r3, #0
 80083a4:	60bb      	str	r3, [r7, #8]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	60bb      	str	r3, [r7, #8]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	60bb      	str	r3, [r7, #8]
 80083b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083c2:	2b40      	cmp	r3, #64	@ 0x40
 80083c4:	f040 80b6 	bne.w	8008534 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 8145 	beq.w	8008668 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80083e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083e6:	429a      	cmp	r2, r3
 80083e8:	f080 813e 	bcs.w	8008668 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	f000 8088 	beq.w	8008510 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	330c      	adds	r3, #12
 8008406:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800841a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800841e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	330c      	adds	r3, #12
 8008428:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800842c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008430:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008438:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800843c:	e841 2300 	strex	r3, r2, [r1]
 8008440:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008444:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1d9      	bne.n	8008400 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3314      	adds	r3, #20
 8008452:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008456:	e853 3f00 	ldrex	r3, [r3]
 800845a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800845c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800845e:	f023 0301 	bic.w	r3, r3, #1
 8008462:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3314      	adds	r3, #20
 800846c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008470:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008474:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008478:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008482:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e1      	bne.n	800844c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3314      	adds	r3, #20
 800848e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800849a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800849e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3314      	adds	r3, #20
 80084a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80084ac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084b4:	e841 2300 	strex	r3, r2, [r1]
 80084b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80084ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1e3      	bne.n	8008488 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2220      	movs	r2, #32
 80084c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	330c      	adds	r3, #12
 80084d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084e0:	f023 0310 	bic.w	r3, r3, #16
 80084e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	330c      	adds	r3, #12
 80084ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80084f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80084f4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008500:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e3      	bne.n	80084ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800850a:	4618      	mov	r0, r3
 800850c:	f7fa f99e 	bl	800284c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2202      	movs	r2, #2
 8008514:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800851e:	b29b      	uxth	r3, r3
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	b29b      	uxth	r3, r3
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f8b6 	bl	8008698 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800852c:	e09c      	b.n	8008668 <HAL_UART_IRQHandler+0x518>
 800852e:	bf00      	nop
 8008530:	080088c1 	.word	0x080088c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800853c:	b29b      	uxth	r3, r3
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008548:	b29b      	uxth	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 808e 	beq.w	800866c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8089 	beq.w	800866c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	330c      	adds	r3, #12
 8008560:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800856a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800856c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008570:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	330c      	adds	r3, #12
 800857a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800857e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008580:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800858c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e3      	bne.n	800855a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3314      	adds	r3, #20
 8008598:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	623b      	str	r3, [r7, #32]
   return(result);
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3314      	adds	r3, #20
 80085b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80085b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80085b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e3      	bne.n	8008592 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	330c      	adds	r3, #12
 80085de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	e853 3f00 	ldrex	r3, [r3]
 80085e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0310 	bic.w	r3, r3, #16
 80085ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	330c      	adds	r3, #12
 80085f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80085fc:	61fa      	str	r2, [r7, #28]
 80085fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	69b9      	ldr	r1, [r7, #24]
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	617b      	str	r3, [r7, #20]
   return(result);
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e3      	bne.n	80085d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008616:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f83b 	bl	8008698 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008622:	e023      	b.n	800866c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800862c:	2b00      	cmp	r3, #0
 800862e:	d009      	beq.n	8008644 <HAL_UART_IRQHandler+0x4f4>
 8008630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f953 	bl	80088e8 <UART_Transmit_IT>
    return;
 8008642:	e014      	b.n	800866e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00e      	beq.n	800866e <HAL_UART_IRQHandler+0x51e>
 8008650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d008      	beq.n	800866e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f992 	bl	8008986 <UART_EndTransmit_IT>
    return;
 8008662:	e004      	b.n	800866e <HAL_UART_IRQHandler+0x51e>
    return;
 8008664:	bf00      	nop
 8008666:	e002      	b.n	800866e <HAL_UART_IRQHandler+0x51e>
      return;
 8008668:	bf00      	nop
 800866a:	e000      	b.n	800866e <HAL_UART_IRQHandler+0x51e>
      return;
 800866c:	bf00      	nop
  }
}
 800866e:	37e8      	adds	r7, #232	@ 0xe8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr

08008686 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	bc80      	pop	{r7}
 8008696:	4770      	bx	lr

08008698 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr

080086ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b090      	sub	sp, #64	@ 0x40
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	60b9      	str	r1, [r7, #8]
 80086b8:	603b      	str	r3, [r7, #0]
 80086ba:	4613      	mov	r3, r2
 80086bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086be:	e050      	b.n	8008762 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d04c      	beq.n	8008762 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80086c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d007      	beq.n	80086de <UART_WaitOnFlagUntilTimeout+0x30>
 80086ce:	f7f9 ff5d 	bl	800258c <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086da:	429a      	cmp	r2, r3
 80086dc:	d241      	bcs.n	8008762 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	330c      	adds	r3, #12
 80086e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80086f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	330c      	adds	r3, #12
 80086fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80086fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8008700:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008702:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008704:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800870c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e5      	bne.n	80086de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3314      	adds	r3, #20
 8008718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	613b      	str	r3, [r7, #16]
   return(result);
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f023 0301 	bic.w	r3, r3, #1
 8008728:	63bb      	str	r3, [r7, #56]	@ 0x38
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3314      	adds	r3, #20
 8008730:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008732:	623a      	str	r2, [r7, #32]
 8008734:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008736:	69f9      	ldr	r1, [r7, #28]
 8008738:	6a3a      	ldr	r2, [r7, #32]
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e5      	bne.n	8008712 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2220      	movs	r2, #32
 800874a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2220      	movs	r2, #32
 8008752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e00f      	b.n	8008782 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	4013      	ands	r3, r2
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	429a      	cmp	r2, r3
 8008770:	bf0c      	ite	eq
 8008772:	2301      	moveq	r3, #1
 8008774:	2300      	movne	r3, #0
 8008776:	b2db      	uxtb	r3, r3
 8008778:	461a      	mov	r2, r3
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	429a      	cmp	r2, r3
 800877e:	d09f      	beq.n	80086c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3740      	adds	r7, #64	@ 0x40
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800878a:	b480      	push	{r7}
 800878c:	b085      	sub	sp, #20
 800878e:	af00      	add	r7, sp, #0
 8008790:	60f8      	str	r0, [r7, #12]
 8008792:	60b9      	str	r1, [r7, #8]
 8008794:	4613      	mov	r3, r2
 8008796:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	88fa      	ldrh	r2, [r7, #6]
 80087a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	88fa      	ldrh	r2, [r7, #6]
 80087a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2222      	movs	r2, #34	@ 0x22
 80087b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	695a      	ldr	r2, [r3, #20]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0201 	orr.w	r2, r2, #1
 80087de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0220 	orr.w	r2, r2, #32
 80087ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr

080087fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b095      	sub	sp, #84	@ 0x54
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	330c      	adds	r3, #12
 800880a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880e:	e853 3f00 	ldrex	r3, [r3]
 8008812:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008816:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800881a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	330c      	adds	r3, #12
 8008822:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008824:	643a      	str	r2, [r7, #64]	@ 0x40
 8008826:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008828:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800882a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800882c:	e841 2300 	strex	r3, r2, [r1]
 8008830:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e5      	bne.n	8008804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3314      	adds	r3, #20
 800883e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	61fb      	str	r3, [r7, #28]
   return(result);
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	f023 0301 	bic.w	r3, r3, #1
 800884e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3314      	adds	r3, #20
 8008856:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008858:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800885a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800885e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e5      	bne.n	8008838 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008870:	2b01      	cmp	r3, #1
 8008872:	d119      	bne.n	80088a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	330c      	adds	r3, #12
 800887a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	e853 3f00 	ldrex	r3, [r3]
 8008882:	60bb      	str	r3, [r7, #8]
   return(result);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f023 0310 	bic.w	r3, r3, #16
 800888a:	647b      	str	r3, [r7, #68]	@ 0x44
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	330c      	adds	r3, #12
 8008892:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008894:	61ba      	str	r2, [r7, #24]
 8008896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	6979      	ldr	r1, [r7, #20]
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	e841 2300 	strex	r3, r2, [r1]
 80088a0:	613b      	str	r3, [r7, #16]
   return(result);
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e5      	bne.n	8008874 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2220      	movs	r2, #32
 80088ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80088b6:	bf00      	nop
 80088b8:	3754      	adds	r7, #84	@ 0x54
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bc80      	pop	{r7}
 80088be:	4770      	bx	lr

080088c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f7ff fed3 	bl	8008686 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088e0:	bf00      	nop
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b21      	cmp	r3, #33	@ 0x21
 80088fa:	d13e      	bne.n	800897a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008904:	d114      	bne.n	8008930 <UART_Transmit_IT+0x48>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d110      	bne.n	8008930 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	461a      	mov	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008922:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a1b      	ldr	r3, [r3, #32]
 8008928:	1c9a      	adds	r2, r3, #2
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	621a      	str	r2, [r3, #32]
 800892e:	e008      	b.n	8008942 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	1c59      	adds	r1, r3, #1
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	6211      	str	r1, [r2, #32]
 800893a:	781a      	ldrb	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008946:	b29b      	uxth	r3, r3
 8008948:	3b01      	subs	r3, #1
 800894a:	b29b      	uxth	r3, r3
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	4619      	mov	r1, r3
 8008950:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10f      	bne.n	8008976 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68da      	ldr	r2, [r3, #12]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008964:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68da      	ldr	r2, [r3, #12]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008974:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	e000      	b.n	800897c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800897a:	2302      	movs	r3, #2
  }
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	bc80      	pop	{r7}
 8008984:	4770      	bx	lr

08008986 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b082      	sub	sp, #8
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68da      	ldr	r2, [r3, #12]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800899c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff fe64 	bl	8008674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b08c      	sub	sp, #48	@ 0x30
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b22      	cmp	r3, #34	@ 0x22
 80089c8:	f040 80ae 	bne.w	8008b28 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089d4:	d117      	bne.n	8008a06 <UART_Receive_IT+0x50>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d113      	bne.n	8008a06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089de:	2300      	movs	r3, #0
 80089e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fe:	1c9a      	adds	r2, r3, #2
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a04:	e026      	b.n	8008a54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a18:	d007      	beq.n	8008a2a <UART_Receive_IT+0x74>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10a      	bne.n	8008a38 <UART_Receive_IT+0x82>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d106      	bne.n	8008a38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a34:	701a      	strb	r2, [r3, #0]
 8008a36:	e008      	b.n	8008a4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a4e:	1c5a      	adds	r2, r3, #1
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	4619      	mov	r1, r3
 8008a62:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d15d      	bne.n	8008b24 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0220 	bic.w	r2, r2, #32
 8008a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008a86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	695a      	ldr	r2, [r3, #20]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 0201 	bic.w	r2, r2, #1
 8008a96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d135      	bne.n	8008b1a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	330c      	adds	r3, #12
 8008aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	e853 3f00 	ldrex	r3, [r3]
 8008ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f023 0310 	bic.w	r3, r3, #16
 8008aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	330c      	adds	r3, #12
 8008ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ad4:	623a      	str	r2, [r7, #32]
 8008ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad8:	69f9      	ldr	r1, [r7, #28]
 8008ada:	6a3a      	ldr	r2, [r7, #32]
 8008adc:	e841 2300 	strex	r3, r2, [r1]
 8008ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e5      	bne.n	8008ab4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0310 	and.w	r3, r3, #16
 8008af2:	2b10      	cmp	r3, #16
 8008af4:	d10a      	bne.n	8008b0c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008af6:	2300      	movs	r3, #0
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	60fb      	str	r3, [r7, #12]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7ff fdc0 	bl	8008698 <HAL_UARTEx_RxEventCallback>
 8008b18:	e002      	b.n	8008b20 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7f9 f92e 	bl	8001d7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	e002      	b.n	8008b2a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	e000      	b.n	8008b2a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008b28:	2302      	movs	r3, #2
  }
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3730      	adds	r7, #48	@ 0x30
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
	...

08008b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	4a89      	ldr	r2, [pc, #548]	@ (8008d68 <UART_SetConfig+0x234>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d904      	bls.n	8008b50 <UART_SetConfig+0x1c>
 8008b46:	f640 615d 	movw	r1, #3677	@ 0xe5d
 8008b4a:	4888      	ldr	r0, [pc, #544]	@ (8008d6c <UART_SetConfig+0x238>)
 8008b4c:	f7f8 fd0c 	bl	8001568 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d009      	beq.n	8008b6c <UART_SetConfig+0x38>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b60:	d004      	beq.n	8008b6c <UART_SetConfig+0x38>
 8008b62:	f640 615e 	movw	r1, #3678	@ 0xe5e
 8008b66:	4881      	ldr	r0, [pc, #516]	@ (8008d6c <UART_SetConfig+0x238>)
 8008b68:	f7f8 fcfe 	bl	8001568 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00e      	beq.n	8008b92 <UART_SetConfig+0x5e>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b7c:	d009      	beq.n	8008b92 <UART_SetConfig+0x5e>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008b86:	d004      	beq.n	8008b92 <UART_SetConfig+0x5e>
 8008b88:	f640 615f 	movw	r1, #3679	@ 0xe5f
 8008b8c:	4877      	ldr	r0, [pc, #476]	@ (8008d6c <UART_SetConfig+0x238>)
 8008b8e:	f7f8 fceb 	bl	8001568 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	695a      	ldr	r2, [r3, #20]
 8008b96:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d103      	bne.n	8008ba8 <UART_SetConfig+0x74>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d104      	bne.n	8008bb2 <UART_SetConfig+0x7e>
 8008ba8:	f44f 6166 	mov.w	r1, #3680	@ 0xe60
 8008bac:	486f      	ldr	r0, [pc, #444]	@ (8008d6c <UART_SetConfig+0x238>)
 8008bae:	f7f8 fcdb 	bl	8001568 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689a      	ldr	r2, [r3, #8]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8008bea:	f023 030c 	bic.w	r3, r3, #12
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6812      	ldr	r2, [r2, #0]
 8008bf2:	68b9      	ldr	r1, [r7, #8]
 8008bf4:	430b      	orrs	r3, r1
 8008bf6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	699a      	ldr	r2, [r3, #24]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a57      	ldr	r2, [pc, #348]	@ (8008d70 <UART_SetConfig+0x23c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d103      	bne.n	8008c20 <UART_SetConfig+0xec>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008c18:	f7fd fca8 	bl	800656c <HAL_RCC_GetPCLK2Freq>
 8008c1c:	60f8      	str	r0, [r7, #12]
 8008c1e:	e002      	b.n	8008c26 <UART_SetConfig+0xf2>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008c20:	f7fd fc90 	bl	8006544 <HAL_RCC_GetPCLK1Freq>
 8008c24:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c2e:	d14c      	bne.n	8008cca <UART_SetConfig+0x196>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	4613      	mov	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	009a      	lsls	r2, r3, #2
 8008c3a:	441a      	add	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c46:	4a4b      	ldr	r2, [pc, #300]	@ (8008d74 <UART_SetConfig+0x240>)
 8008c48:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4c:	095b      	lsrs	r3, r3, #5
 8008c4e:	0119      	lsls	r1, r3, #4
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009a      	lsls	r2, r3, #2
 8008c5a:	441a      	add	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	005b      	lsls	r3, r3, #1
 8008c62:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c66:	4b43      	ldr	r3, [pc, #268]	@ (8008d74 <UART_SetConfig+0x240>)
 8008c68:	fba3 0302 	umull	r0, r3, r3, r2
 8008c6c:	095b      	lsrs	r3, r3, #5
 8008c6e:	2064      	movs	r0, #100	@ 0x64
 8008c70:	fb00 f303 	mul.w	r3, r0, r3
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	3332      	adds	r3, #50	@ 0x32
 8008c7a:	4a3e      	ldr	r2, [pc, #248]	@ (8008d74 <UART_SetConfig+0x240>)
 8008c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c80:	095b      	lsrs	r3, r3, #5
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008c88:	4419      	add	r1, r3
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4413      	add	r3, r2
 8008c92:	009a      	lsls	r2, r3, #2
 8008c94:	441a      	add	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ca0:	4b34      	ldr	r3, [pc, #208]	@ (8008d74 <UART_SetConfig+0x240>)
 8008ca2:	fba3 0302 	umull	r0, r3, r3, r2
 8008ca6:	095b      	lsrs	r3, r3, #5
 8008ca8:	2064      	movs	r0, #100	@ 0x64
 8008caa:	fb00 f303 	mul.w	r3, r0, r3
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	3332      	adds	r3, #50	@ 0x32
 8008cb4:	4a2f      	ldr	r2, [pc, #188]	@ (8008d74 <UART_SetConfig+0x240>)
 8008cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cba:	095b      	lsrs	r3, r3, #5
 8008cbc:	f003 0207 	and.w	r2, r3, #7
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	440a      	add	r2, r1
 8008cc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cc8:	e04a      	b.n	8008d60 <UART_SetConfig+0x22c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009a      	lsls	r2, r3, #2
 8008cd4:	441a      	add	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce0:	4a24      	ldr	r2, [pc, #144]	@ (8008d74 <UART_SetConfig+0x240>)
 8008ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce6:	095b      	lsrs	r3, r3, #5
 8008ce8:	0119      	lsls	r1, r3, #4
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	4613      	mov	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009a      	lsls	r2, r3, #2
 8008cf4:	441a      	add	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d00:	4b1c      	ldr	r3, [pc, #112]	@ (8008d74 <UART_SetConfig+0x240>)
 8008d02:	fba3 0302 	umull	r0, r3, r3, r2
 8008d06:	095b      	lsrs	r3, r3, #5
 8008d08:	2064      	movs	r0, #100	@ 0x64
 8008d0a:	fb00 f303 	mul.w	r3, r0, r3
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	011b      	lsls	r3, r3, #4
 8008d12:	3332      	adds	r3, #50	@ 0x32
 8008d14:	4a17      	ldr	r2, [pc, #92]	@ (8008d74 <UART_SetConfig+0x240>)
 8008d16:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1a:	095b      	lsrs	r3, r3, #5
 8008d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d20:	4419      	add	r1, r3
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	4613      	mov	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	009a      	lsls	r2, r3, #2
 8008d2c:	441a      	add	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d38:	4b0e      	ldr	r3, [pc, #56]	@ (8008d74 <UART_SetConfig+0x240>)
 8008d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8008d3e:	095b      	lsrs	r3, r3, #5
 8008d40:	2064      	movs	r0, #100	@ 0x64
 8008d42:	fb00 f303 	mul.w	r3, r0, r3
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	011b      	lsls	r3, r3, #4
 8008d4a:	3332      	adds	r3, #50	@ 0x32
 8008d4c:	4a09      	ldr	r2, [pc, #36]	@ (8008d74 <UART_SetConfig+0x240>)
 8008d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d52:	095b      	lsrs	r3, r3, #5
 8008d54:	f003 020f 	and.w	r2, r3, #15
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	440a      	add	r2, r1
 8008d5e:	609a      	str	r2, [r3, #8]
}
 8008d60:	bf00      	nop
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	003d0900 	.word	0x003d0900
 8008d6c:	0800a474 	.word	0x0800a474
 8008d70:	40013800 	.word	0x40013800
 8008d74:	51eb851f 	.word	0x51eb851f

08008d78 <atoi>:
 8008d78:	220a      	movs	r2, #10
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	f000 b87a 	b.w	8008e74 <strtol>

08008d80 <_strtol_l.constprop.0>:
 8008d80:	2b24      	cmp	r3, #36	@ 0x24
 8008d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d86:	4686      	mov	lr, r0
 8008d88:	4690      	mov	r8, r2
 8008d8a:	d801      	bhi.n	8008d90 <_strtol_l.constprop.0+0x10>
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d106      	bne.n	8008d9e <_strtol_l.constprop.0+0x1e>
 8008d90:	f000 fb2e 	bl	80093f0 <__errno>
 8008d94:	2316      	movs	r3, #22
 8008d96:	6003      	str	r3, [r0, #0]
 8008d98:	2000      	movs	r0, #0
 8008d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9e:	460d      	mov	r5, r1
 8008da0:	4833      	ldr	r0, [pc, #204]	@ (8008e70 <_strtol_l.constprop.0+0xf0>)
 8008da2:	462a      	mov	r2, r5
 8008da4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008da8:	5d06      	ldrb	r6, [r0, r4]
 8008daa:	f016 0608 	ands.w	r6, r6, #8
 8008dae:	d1f8      	bne.n	8008da2 <_strtol_l.constprop.0+0x22>
 8008db0:	2c2d      	cmp	r4, #45	@ 0x2d
 8008db2:	d12d      	bne.n	8008e10 <_strtol_l.constprop.0+0x90>
 8008db4:	2601      	movs	r6, #1
 8008db6:	782c      	ldrb	r4, [r5, #0]
 8008db8:	1c95      	adds	r5, r2, #2
 8008dba:	f033 0210 	bics.w	r2, r3, #16
 8008dbe:	d109      	bne.n	8008dd4 <_strtol_l.constprop.0+0x54>
 8008dc0:	2c30      	cmp	r4, #48	@ 0x30
 8008dc2:	d12a      	bne.n	8008e1a <_strtol_l.constprop.0+0x9a>
 8008dc4:	782a      	ldrb	r2, [r5, #0]
 8008dc6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008dca:	2a58      	cmp	r2, #88	@ 0x58
 8008dcc:	d125      	bne.n	8008e1a <_strtol_l.constprop.0+0x9a>
 8008dce:	2310      	movs	r3, #16
 8008dd0:	786c      	ldrb	r4, [r5, #1]
 8008dd2:	3502      	adds	r5, #2
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008dda:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008dde:	fbbc f9f3 	udiv	r9, ip, r3
 8008de2:	4610      	mov	r0, r2
 8008de4:	fb03 ca19 	mls	sl, r3, r9, ip
 8008de8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008dec:	2f09      	cmp	r7, #9
 8008dee:	d81b      	bhi.n	8008e28 <_strtol_l.constprop.0+0xa8>
 8008df0:	463c      	mov	r4, r7
 8008df2:	42a3      	cmp	r3, r4
 8008df4:	dd27      	ble.n	8008e46 <_strtol_l.constprop.0+0xc6>
 8008df6:	1c57      	adds	r7, r2, #1
 8008df8:	d007      	beq.n	8008e0a <_strtol_l.constprop.0+0x8a>
 8008dfa:	4581      	cmp	r9, r0
 8008dfc:	d320      	bcc.n	8008e40 <_strtol_l.constprop.0+0xc0>
 8008dfe:	d101      	bne.n	8008e04 <_strtol_l.constprop.0+0x84>
 8008e00:	45a2      	cmp	sl, r4
 8008e02:	db1d      	blt.n	8008e40 <_strtol_l.constprop.0+0xc0>
 8008e04:	2201      	movs	r2, #1
 8008e06:	fb00 4003 	mla	r0, r0, r3, r4
 8008e0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e0e:	e7eb      	b.n	8008de8 <_strtol_l.constprop.0+0x68>
 8008e10:	2c2b      	cmp	r4, #43	@ 0x2b
 8008e12:	bf04      	itt	eq
 8008e14:	782c      	ldrbeq	r4, [r5, #0]
 8008e16:	1c95      	addeq	r5, r2, #2
 8008e18:	e7cf      	b.n	8008dba <_strtol_l.constprop.0+0x3a>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1da      	bne.n	8008dd4 <_strtol_l.constprop.0+0x54>
 8008e1e:	2c30      	cmp	r4, #48	@ 0x30
 8008e20:	bf0c      	ite	eq
 8008e22:	2308      	moveq	r3, #8
 8008e24:	230a      	movne	r3, #10
 8008e26:	e7d5      	b.n	8008dd4 <_strtol_l.constprop.0+0x54>
 8008e28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008e2c:	2f19      	cmp	r7, #25
 8008e2e:	d801      	bhi.n	8008e34 <_strtol_l.constprop.0+0xb4>
 8008e30:	3c37      	subs	r4, #55	@ 0x37
 8008e32:	e7de      	b.n	8008df2 <_strtol_l.constprop.0+0x72>
 8008e34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008e38:	2f19      	cmp	r7, #25
 8008e3a:	d804      	bhi.n	8008e46 <_strtol_l.constprop.0+0xc6>
 8008e3c:	3c57      	subs	r4, #87	@ 0x57
 8008e3e:	e7d8      	b.n	8008df2 <_strtol_l.constprop.0+0x72>
 8008e40:	f04f 32ff 	mov.w	r2, #4294967295
 8008e44:	e7e1      	b.n	8008e0a <_strtol_l.constprop.0+0x8a>
 8008e46:	1c53      	adds	r3, r2, #1
 8008e48:	d108      	bne.n	8008e5c <_strtol_l.constprop.0+0xdc>
 8008e4a:	2322      	movs	r3, #34	@ 0x22
 8008e4c:	4660      	mov	r0, ip
 8008e4e:	f8ce 3000 	str.w	r3, [lr]
 8008e52:	f1b8 0f00 	cmp.w	r8, #0
 8008e56:	d0a0      	beq.n	8008d9a <_strtol_l.constprop.0+0x1a>
 8008e58:	1e69      	subs	r1, r5, #1
 8008e5a:	e006      	b.n	8008e6a <_strtol_l.constprop.0+0xea>
 8008e5c:	b106      	cbz	r6, 8008e60 <_strtol_l.constprop.0+0xe0>
 8008e5e:	4240      	negs	r0, r0
 8008e60:	f1b8 0f00 	cmp.w	r8, #0
 8008e64:	d099      	beq.n	8008d9a <_strtol_l.constprop.0+0x1a>
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	d1f6      	bne.n	8008e58 <_strtol_l.constprop.0+0xd8>
 8008e6a:	f8c8 1000 	str.w	r1, [r8]
 8008e6e:	e794      	b.n	8008d9a <_strtol_l.constprop.0+0x1a>
 8008e70:	0800a4d5 	.word	0x0800a4d5

08008e74 <strtol>:
 8008e74:	4613      	mov	r3, r2
 8008e76:	460a      	mov	r2, r1
 8008e78:	4601      	mov	r1, r0
 8008e7a:	4802      	ldr	r0, [pc, #8]	@ (8008e84 <strtol+0x10>)
 8008e7c:	6800      	ldr	r0, [r0, #0]
 8008e7e:	f7ff bf7f 	b.w	8008d80 <_strtol_l.constprop.0>
 8008e82:	bf00      	nop
 8008e84:	20000018 	.word	0x20000018

08008e88 <std>:
 8008e88:	2300      	movs	r3, #0
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e96:	6083      	str	r3, [r0, #8]
 8008e98:	8181      	strh	r1, [r0, #12]
 8008e9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e9c:	81c2      	strh	r2, [r0, #14]
 8008e9e:	6183      	str	r3, [r0, #24]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	2208      	movs	r2, #8
 8008ea4:	305c      	adds	r0, #92	@ 0x5c
 8008ea6:	f000 f9f9 	bl	800929c <memset>
 8008eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee0 <std+0x58>)
 8008eac:	6224      	str	r4, [r4, #32]
 8008eae:	6263      	str	r3, [r4, #36]	@ 0x24
 8008eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee4 <std+0x5c>)
 8008eb2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee8 <std+0x60>)
 8008eb6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8008eec <std+0x64>)
 8008eba:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8008ef0 <std+0x68>)
 8008ebe:	429c      	cmp	r4, r3
 8008ec0:	d006      	beq.n	8008ed0 <std+0x48>
 8008ec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ec6:	4294      	cmp	r4, r2
 8008ec8:	d002      	beq.n	8008ed0 <std+0x48>
 8008eca:	33d0      	adds	r3, #208	@ 0xd0
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	d105      	bne.n	8008edc <std+0x54>
 8008ed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed8:	f000 bab4 	b.w	8009444 <__retarget_lock_init_recursive>
 8008edc:	bd10      	pop	{r4, pc}
 8008ede:	bf00      	nop
 8008ee0:	080090ed 	.word	0x080090ed
 8008ee4:	0800910f 	.word	0x0800910f
 8008ee8:	08009147 	.word	0x08009147
 8008eec:	0800916b 	.word	0x0800916b
 8008ef0:	20000d5c 	.word	0x20000d5c

08008ef4 <stdio_exit_handler>:
 8008ef4:	4a02      	ldr	r2, [pc, #8]	@ (8008f00 <stdio_exit_handler+0xc>)
 8008ef6:	4903      	ldr	r1, [pc, #12]	@ (8008f04 <stdio_exit_handler+0x10>)
 8008ef8:	4803      	ldr	r0, [pc, #12]	@ (8008f08 <stdio_exit_handler+0x14>)
 8008efa:	f000 b869 	b.w	8008fd0 <_fwalk_sglue>
 8008efe:	bf00      	nop
 8008f00:	2000000c 	.word	0x2000000c
 8008f04:	08009d29 	.word	0x08009d29
 8008f08:	2000001c 	.word	0x2000001c

08008f0c <cleanup_stdio>:
 8008f0c:	6841      	ldr	r1, [r0, #4]
 8008f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f40 <cleanup_stdio+0x34>)
 8008f10:	b510      	push	{r4, lr}
 8008f12:	4299      	cmp	r1, r3
 8008f14:	4604      	mov	r4, r0
 8008f16:	d001      	beq.n	8008f1c <cleanup_stdio+0x10>
 8008f18:	f000 ff06 	bl	8009d28 <_fflush_r>
 8008f1c:	68a1      	ldr	r1, [r4, #8]
 8008f1e:	4b09      	ldr	r3, [pc, #36]	@ (8008f44 <cleanup_stdio+0x38>)
 8008f20:	4299      	cmp	r1, r3
 8008f22:	d002      	beq.n	8008f2a <cleanup_stdio+0x1e>
 8008f24:	4620      	mov	r0, r4
 8008f26:	f000 feff 	bl	8009d28 <_fflush_r>
 8008f2a:	68e1      	ldr	r1, [r4, #12]
 8008f2c:	4b06      	ldr	r3, [pc, #24]	@ (8008f48 <cleanup_stdio+0x3c>)
 8008f2e:	4299      	cmp	r1, r3
 8008f30:	d004      	beq.n	8008f3c <cleanup_stdio+0x30>
 8008f32:	4620      	mov	r0, r4
 8008f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f38:	f000 bef6 	b.w	8009d28 <_fflush_r>
 8008f3c:	bd10      	pop	{r4, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000d5c 	.word	0x20000d5c
 8008f44:	20000dc4 	.word	0x20000dc4
 8008f48:	20000e2c 	.word	0x20000e2c

08008f4c <global_stdio_init.part.0>:
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f7c <global_stdio_init.part.0+0x30>)
 8008f50:	4c0b      	ldr	r4, [pc, #44]	@ (8008f80 <global_stdio_init.part.0+0x34>)
 8008f52:	4a0c      	ldr	r2, [pc, #48]	@ (8008f84 <global_stdio_init.part.0+0x38>)
 8008f54:	4620      	mov	r0, r4
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	2104      	movs	r1, #4
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f7ff ff94 	bl	8008e88 <std>
 8008f60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f64:	2201      	movs	r2, #1
 8008f66:	2109      	movs	r1, #9
 8008f68:	f7ff ff8e 	bl	8008e88 <std>
 8008f6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f70:	2202      	movs	r2, #2
 8008f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f76:	2112      	movs	r1, #18
 8008f78:	f7ff bf86 	b.w	8008e88 <std>
 8008f7c:	20000e94 	.word	0x20000e94
 8008f80:	20000d5c 	.word	0x20000d5c
 8008f84:	08008ef5 	.word	0x08008ef5

08008f88 <__sfp_lock_acquire>:
 8008f88:	4801      	ldr	r0, [pc, #4]	@ (8008f90 <__sfp_lock_acquire+0x8>)
 8008f8a:	f000 ba5c 	b.w	8009446 <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	20000e9d 	.word	0x20000e9d

08008f94 <__sfp_lock_release>:
 8008f94:	4801      	ldr	r0, [pc, #4]	@ (8008f9c <__sfp_lock_release+0x8>)
 8008f96:	f000 ba57 	b.w	8009448 <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	20000e9d 	.word	0x20000e9d

08008fa0 <__sinit>:
 8008fa0:	b510      	push	{r4, lr}
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	f7ff fff0 	bl	8008f88 <__sfp_lock_acquire>
 8008fa8:	6a23      	ldr	r3, [r4, #32]
 8008faa:	b11b      	cbz	r3, 8008fb4 <__sinit+0x14>
 8008fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fb0:	f7ff bff0 	b.w	8008f94 <__sfp_lock_release>
 8008fb4:	4b04      	ldr	r3, [pc, #16]	@ (8008fc8 <__sinit+0x28>)
 8008fb6:	6223      	str	r3, [r4, #32]
 8008fb8:	4b04      	ldr	r3, [pc, #16]	@ (8008fcc <__sinit+0x2c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1f5      	bne.n	8008fac <__sinit+0xc>
 8008fc0:	f7ff ffc4 	bl	8008f4c <global_stdio_init.part.0>
 8008fc4:	e7f2      	b.n	8008fac <__sinit+0xc>
 8008fc6:	bf00      	nop
 8008fc8:	08008f0d 	.word	0x08008f0d
 8008fcc:	20000e94 	.word	0x20000e94

08008fd0 <_fwalk_sglue>:
 8008fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd4:	4607      	mov	r7, r0
 8008fd6:	4688      	mov	r8, r1
 8008fd8:	4614      	mov	r4, r2
 8008fda:	2600      	movs	r6, #0
 8008fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8008fe4:	d505      	bpl.n	8008ff2 <_fwalk_sglue+0x22>
 8008fe6:	6824      	ldr	r4, [r4, #0]
 8008fe8:	2c00      	cmp	r4, #0
 8008fea:	d1f7      	bne.n	8008fdc <_fwalk_sglue+0xc>
 8008fec:	4630      	mov	r0, r6
 8008fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff2:	89ab      	ldrh	r3, [r5, #12]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d907      	bls.n	8009008 <_fwalk_sglue+0x38>
 8008ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	d003      	beq.n	8009008 <_fwalk_sglue+0x38>
 8009000:	4629      	mov	r1, r5
 8009002:	4638      	mov	r0, r7
 8009004:	47c0      	blx	r8
 8009006:	4306      	orrs	r6, r0
 8009008:	3568      	adds	r5, #104	@ 0x68
 800900a:	e7e9      	b.n	8008fe0 <_fwalk_sglue+0x10>

0800900c <iprintf>:
 800900c:	b40f      	push	{r0, r1, r2, r3}
 800900e:	b507      	push	{r0, r1, r2, lr}
 8009010:	4906      	ldr	r1, [pc, #24]	@ (800902c <iprintf+0x20>)
 8009012:	ab04      	add	r3, sp, #16
 8009014:	6808      	ldr	r0, [r1, #0]
 8009016:	f853 2b04 	ldr.w	r2, [r3], #4
 800901a:	6881      	ldr	r1, [r0, #8]
 800901c:	9301      	str	r3, [sp, #4]
 800901e:	f000 fb59 	bl	80096d4 <_vfiprintf_r>
 8009022:	b003      	add	sp, #12
 8009024:	f85d eb04 	ldr.w	lr, [sp], #4
 8009028:	b004      	add	sp, #16
 800902a:	4770      	bx	lr
 800902c:	20000018 	.word	0x20000018

08009030 <_puts_r>:
 8009030:	6a03      	ldr	r3, [r0, #32]
 8009032:	b570      	push	{r4, r5, r6, lr}
 8009034:	4605      	mov	r5, r0
 8009036:	460e      	mov	r6, r1
 8009038:	6884      	ldr	r4, [r0, #8]
 800903a:	b90b      	cbnz	r3, 8009040 <_puts_r+0x10>
 800903c:	f7ff ffb0 	bl	8008fa0 <__sinit>
 8009040:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009042:	07db      	lsls	r3, r3, #31
 8009044:	d405      	bmi.n	8009052 <_puts_r+0x22>
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	0598      	lsls	r0, r3, #22
 800904a:	d402      	bmi.n	8009052 <_puts_r+0x22>
 800904c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800904e:	f000 f9fa 	bl	8009446 <__retarget_lock_acquire_recursive>
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	0719      	lsls	r1, r3, #28
 8009056:	d502      	bpl.n	800905e <_puts_r+0x2e>
 8009058:	6923      	ldr	r3, [r4, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d135      	bne.n	80090ca <_puts_r+0x9a>
 800905e:	4621      	mov	r1, r4
 8009060:	4628      	mov	r0, r5
 8009062:	f000 f8c5 	bl	80091f0 <__swsetup_r>
 8009066:	b380      	cbz	r0, 80090ca <_puts_r+0x9a>
 8009068:	f04f 35ff 	mov.w	r5, #4294967295
 800906c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800906e:	07da      	lsls	r2, r3, #31
 8009070:	d405      	bmi.n	800907e <_puts_r+0x4e>
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	059b      	lsls	r3, r3, #22
 8009076:	d402      	bmi.n	800907e <_puts_r+0x4e>
 8009078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800907a:	f000 f9e5 	bl	8009448 <__retarget_lock_release_recursive>
 800907e:	4628      	mov	r0, r5
 8009080:	bd70      	pop	{r4, r5, r6, pc}
 8009082:	2b00      	cmp	r3, #0
 8009084:	da04      	bge.n	8009090 <_puts_r+0x60>
 8009086:	69a2      	ldr	r2, [r4, #24]
 8009088:	429a      	cmp	r2, r3
 800908a:	dc17      	bgt.n	80090bc <_puts_r+0x8c>
 800908c:	290a      	cmp	r1, #10
 800908e:	d015      	beq.n	80090bc <_puts_r+0x8c>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	6022      	str	r2, [r4, #0]
 8009096:	7019      	strb	r1, [r3, #0]
 8009098:	68a3      	ldr	r3, [r4, #8]
 800909a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800909e:	3b01      	subs	r3, #1
 80090a0:	60a3      	str	r3, [r4, #8]
 80090a2:	2900      	cmp	r1, #0
 80090a4:	d1ed      	bne.n	8009082 <_puts_r+0x52>
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	da11      	bge.n	80090ce <_puts_r+0x9e>
 80090aa:	4622      	mov	r2, r4
 80090ac:	210a      	movs	r1, #10
 80090ae:	4628      	mov	r0, r5
 80090b0:	f000 f85f 	bl	8009172 <__swbuf_r>
 80090b4:	3001      	adds	r0, #1
 80090b6:	d0d7      	beq.n	8009068 <_puts_r+0x38>
 80090b8:	250a      	movs	r5, #10
 80090ba:	e7d7      	b.n	800906c <_puts_r+0x3c>
 80090bc:	4622      	mov	r2, r4
 80090be:	4628      	mov	r0, r5
 80090c0:	f000 f857 	bl	8009172 <__swbuf_r>
 80090c4:	3001      	adds	r0, #1
 80090c6:	d1e7      	bne.n	8009098 <_puts_r+0x68>
 80090c8:	e7ce      	b.n	8009068 <_puts_r+0x38>
 80090ca:	3e01      	subs	r6, #1
 80090cc:	e7e4      	b.n	8009098 <_puts_r+0x68>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	6022      	str	r2, [r4, #0]
 80090d4:	220a      	movs	r2, #10
 80090d6:	701a      	strb	r2, [r3, #0]
 80090d8:	e7ee      	b.n	80090b8 <_puts_r+0x88>
	...

080090dc <puts>:
 80090dc:	4b02      	ldr	r3, [pc, #8]	@ (80090e8 <puts+0xc>)
 80090de:	4601      	mov	r1, r0
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	f7ff bfa5 	b.w	8009030 <_puts_r>
 80090e6:	bf00      	nop
 80090e8:	20000018 	.word	0x20000018

080090ec <__sread>:
 80090ec:	b510      	push	{r4, lr}
 80090ee:	460c      	mov	r4, r1
 80090f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f4:	f000 f958 	bl	80093a8 <_read_r>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	bfab      	itete	ge
 80090fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80090fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009100:	181b      	addge	r3, r3, r0
 8009102:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009106:	bfac      	ite	ge
 8009108:	6563      	strge	r3, [r4, #84]	@ 0x54
 800910a:	81a3      	strhlt	r3, [r4, #12]
 800910c:	bd10      	pop	{r4, pc}

0800910e <__swrite>:
 800910e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009112:	461f      	mov	r7, r3
 8009114:	898b      	ldrh	r3, [r1, #12]
 8009116:	4605      	mov	r5, r0
 8009118:	05db      	lsls	r3, r3, #23
 800911a:	460c      	mov	r4, r1
 800911c:	4616      	mov	r6, r2
 800911e:	d505      	bpl.n	800912c <__swrite+0x1e>
 8009120:	2302      	movs	r3, #2
 8009122:	2200      	movs	r2, #0
 8009124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009128:	f000 f92c 	bl	8009384 <_lseek_r>
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	4632      	mov	r2, r6
 8009130:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009134:	81a3      	strh	r3, [r4, #12]
 8009136:	4628      	mov	r0, r5
 8009138:	463b      	mov	r3, r7
 800913a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800913e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009142:	f000 b943 	b.w	80093cc <_write_r>

08009146 <__sseek>:
 8009146:	b510      	push	{r4, lr}
 8009148:	460c      	mov	r4, r1
 800914a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914e:	f000 f919 	bl	8009384 <_lseek_r>
 8009152:	1c43      	adds	r3, r0, #1
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	bf15      	itete	ne
 8009158:	6560      	strne	r0, [r4, #84]	@ 0x54
 800915a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800915e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009162:	81a3      	strheq	r3, [r4, #12]
 8009164:	bf18      	it	ne
 8009166:	81a3      	strhne	r3, [r4, #12]
 8009168:	bd10      	pop	{r4, pc}

0800916a <__sclose>:
 800916a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800916e:	f000 b8f9 	b.w	8009364 <_close_r>

08009172 <__swbuf_r>:
 8009172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009174:	460e      	mov	r6, r1
 8009176:	4614      	mov	r4, r2
 8009178:	4605      	mov	r5, r0
 800917a:	b118      	cbz	r0, 8009184 <__swbuf_r+0x12>
 800917c:	6a03      	ldr	r3, [r0, #32]
 800917e:	b90b      	cbnz	r3, 8009184 <__swbuf_r+0x12>
 8009180:	f7ff ff0e 	bl	8008fa0 <__sinit>
 8009184:	69a3      	ldr	r3, [r4, #24]
 8009186:	60a3      	str	r3, [r4, #8]
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	071a      	lsls	r2, r3, #28
 800918c:	d501      	bpl.n	8009192 <__swbuf_r+0x20>
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	b943      	cbnz	r3, 80091a4 <__swbuf_r+0x32>
 8009192:	4621      	mov	r1, r4
 8009194:	4628      	mov	r0, r5
 8009196:	f000 f82b 	bl	80091f0 <__swsetup_r>
 800919a:	b118      	cbz	r0, 80091a4 <__swbuf_r+0x32>
 800919c:	f04f 37ff 	mov.w	r7, #4294967295
 80091a0:	4638      	mov	r0, r7
 80091a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	6922      	ldr	r2, [r4, #16]
 80091a8:	b2f6      	uxtb	r6, r6
 80091aa:	1a98      	subs	r0, r3, r2
 80091ac:	6963      	ldr	r3, [r4, #20]
 80091ae:	4637      	mov	r7, r6
 80091b0:	4283      	cmp	r3, r0
 80091b2:	dc05      	bgt.n	80091c0 <__swbuf_r+0x4e>
 80091b4:	4621      	mov	r1, r4
 80091b6:	4628      	mov	r0, r5
 80091b8:	f000 fdb6 	bl	8009d28 <_fflush_r>
 80091bc:	2800      	cmp	r0, #0
 80091be:	d1ed      	bne.n	800919c <__swbuf_r+0x2a>
 80091c0:	68a3      	ldr	r3, [r4, #8]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	60a3      	str	r3, [r4, #8]
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	1c5a      	adds	r2, r3, #1
 80091ca:	6022      	str	r2, [r4, #0]
 80091cc:	701e      	strb	r6, [r3, #0]
 80091ce:	6962      	ldr	r2, [r4, #20]
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d004      	beq.n	80091e0 <__swbuf_r+0x6e>
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	07db      	lsls	r3, r3, #31
 80091da:	d5e1      	bpl.n	80091a0 <__swbuf_r+0x2e>
 80091dc:	2e0a      	cmp	r6, #10
 80091de:	d1df      	bne.n	80091a0 <__swbuf_r+0x2e>
 80091e0:	4621      	mov	r1, r4
 80091e2:	4628      	mov	r0, r5
 80091e4:	f000 fda0 	bl	8009d28 <_fflush_r>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d0d9      	beq.n	80091a0 <__swbuf_r+0x2e>
 80091ec:	e7d6      	b.n	800919c <__swbuf_r+0x2a>
	...

080091f0 <__swsetup_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4b29      	ldr	r3, [pc, #164]	@ (8009298 <__swsetup_r+0xa8>)
 80091f4:	4605      	mov	r5, r0
 80091f6:	6818      	ldr	r0, [r3, #0]
 80091f8:	460c      	mov	r4, r1
 80091fa:	b118      	cbz	r0, 8009204 <__swsetup_r+0x14>
 80091fc:	6a03      	ldr	r3, [r0, #32]
 80091fe:	b90b      	cbnz	r3, 8009204 <__swsetup_r+0x14>
 8009200:	f7ff fece 	bl	8008fa0 <__sinit>
 8009204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009208:	0719      	lsls	r1, r3, #28
 800920a:	d422      	bmi.n	8009252 <__swsetup_r+0x62>
 800920c:	06da      	lsls	r2, r3, #27
 800920e:	d407      	bmi.n	8009220 <__swsetup_r+0x30>
 8009210:	2209      	movs	r2, #9
 8009212:	602a      	str	r2, [r5, #0]
 8009214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	81a3      	strh	r3, [r4, #12]
 800921e:	e033      	b.n	8009288 <__swsetup_r+0x98>
 8009220:	0758      	lsls	r0, r3, #29
 8009222:	d512      	bpl.n	800924a <__swsetup_r+0x5a>
 8009224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009226:	b141      	cbz	r1, 800923a <__swsetup_r+0x4a>
 8009228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800922c:	4299      	cmp	r1, r3
 800922e:	d002      	beq.n	8009236 <__swsetup_r+0x46>
 8009230:	4628      	mov	r0, r5
 8009232:	f000 f929 	bl	8009488 <_free_r>
 8009236:	2300      	movs	r3, #0
 8009238:	6363      	str	r3, [r4, #52]	@ 0x34
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	2300      	movs	r3, #0
 8009244:	6063      	str	r3, [r4, #4]
 8009246:	6923      	ldr	r3, [r4, #16]
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	f043 0308 	orr.w	r3, r3, #8
 8009250:	81a3      	strh	r3, [r4, #12]
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	b94b      	cbnz	r3, 800926a <__swsetup_r+0x7a>
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800925c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009260:	d003      	beq.n	800926a <__swsetup_r+0x7a>
 8009262:	4621      	mov	r1, r4
 8009264:	4628      	mov	r0, r5
 8009266:	f000 fdbe 	bl	8009de6 <__smakebuf_r>
 800926a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800926e:	f013 0201 	ands.w	r2, r3, #1
 8009272:	d00a      	beq.n	800928a <__swsetup_r+0x9a>
 8009274:	2200      	movs	r2, #0
 8009276:	60a2      	str	r2, [r4, #8]
 8009278:	6962      	ldr	r2, [r4, #20]
 800927a:	4252      	negs	r2, r2
 800927c:	61a2      	str	r2, [r4, #24]
 800927e:	6922      	ldr	r2, [r4, #16]
 8009280:	b942      	cbnz	r2, 8009294 <__swsetup_r+0xa4>
 8009282:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009286:	d1c5      	bne.n	8009214 <__swsetup_r+0x24>
 8009288:	bd38      	pop	{r3, r4, r5, pc}
 800928a:	0799      	lsls	r1, r3, #30
 800928c:	bf58      	it	pl
 800928e:	6962      	ldrpl	r2, [r4, #20]
 8009290:	60a2      	str	r2, [r4, #8]
 8009292:	e7f4      	b.n	800927e <__swsetup_r+0x8e>
 8009294:	2000      	movs	r0, #0
 8009296:	e7f7      	b.n	8009288 <__swsetup_r+0x98>
 8009298:	20000018 	.word	0x20000018

0800929c <memset>:
 800929c:	4603      	mov	r3, r0
 800929e:	4402      	add	r2, r0
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d100      	bne.n	80092a6 <memset+0xa>
 80092a4:	4770      	bx	lr
 80092a6:	f803 1b01 	strb.w	r1, [r3], #1
 80092aa:	e7f9      	b.n	80092a0 <memset+0x4>

080092ac <strtok>:
 80092ac:	4b16      	ldr	r3, [pc, #88]	@ (8009308 <strtok+0x5c>)
 80092ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b2:	681f      	ldr	r7, [r3, #0]
 80092b4:	4605      	mov	r5, r0
 80092b6:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80092b8:	460e      	mov	r6, r1
 80092ba:	b9ec      	cbnz	r4, 80092f8 <strtok+0x4c>
 80092bc:	2050      	movs	r0, #80	@ 0x50
 80092be:	f000 f92b 	bl	8009518 <malloc>
 80092c2:	4602      	mov	r2, r0
 80092c4:	6478      	str	r0, [r7, #68]	@ 0x44
 80092c6:	b920      	cbnz	r0, 80092d2 <strtok+0x26>
 80092c8:	215b      	movs	r1, #91	@ 0x5b
 80092ca:	4b10      	ldr	r3, [pc, #64]	@ (800930c <strtok+0x60>)
 80092cc:	4810      	ldr	r0, [pc, #64]	@ (8009310 <strtok+0x64>)
 80092ce:	f000 f8bd 	bl	800944c <__assert_func>
 80092d2:	e9c0 4400 	strd	r4, r4, [r0]
 80092d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80092da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80092de:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80092e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80092e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80092ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80092ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80092f2:	6184      	str	r4, [r0, #24]
 80092f4:	7704      	strb	r4, [r0, #28]
 80092f6:	6244      	str	r4, [r0, #36]	@ 0x24
 80092f8:	4631      	mov	r1, r6
 80092fa:	4628      	mov	r0, r5
 80092fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092fe:	2301      	movs	r3, #1
 8009300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009304:	f000 b806 	b.w	8009314 <__strtok_r>
 8009308:	20000018 	.word	0x20000018
 800930c:	0800a5d5 	.word	0x0800a5d5
 8009310:	0800a5ec 	.word	0x0800a5ec

08009314 <__strtok_r>:
 8009314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009316:	4604      	mov	r4, r0
 8009318:	b908      	cbnz	r0, 800931e <__strtok_r+0xa>
 800931a:	6814      	ldr	r4, [r2, #0]
 800931c:	b144      	cbz	r4, 8009330 <__strtok_r+0x1c>
 800931e:	460f      	mov	r7, r1
 8009320:	4620      	mov	r0, r4
 8009322:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009326:	f817 6b01 	ldrb.w	r6, [r7], #1
 800932a:	b91e      	cbnz	r6, 8009334 <__strtok_r+0x20>
 800932c:	b965      	cbnz	r5, 8009348 <__strtok_r+0x34>
 800932e:	6015      	str	r5, [r2, #0]
 8009330:	2000      	movs	r0, #0
 8009332:	e005      	b.n	8009340 <__strtok_r+0x2c>
 8009334:	42b5      	cmp	r5, r6
 8009336:	d1f6      	bne.n	8009326 <__strtok_r+0x12>
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1f0      	bne.n	800931e <__strtok_r+0xa>
 800933c:	6014      	str	r4, [r2, #0]
 800933e:	7003      	strb	r3, [r0, #0]
 8009340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009342:	461c      	mov	r4, r3
 8009344:	e00c      	b.n	8009360 <__strtok_r+0x4c>
 8009346:	b915      	cbnz	r5, 800934e <__strtok_r+0x3a>
 8009348:	460e      	mov	r6, r1
 800934a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800934e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009352:	42ab      	cmp	r3, r5
 8009354:	d1f7      	bne.n	8009346 <__strtok_r+0x32>
 8009356:	2b00      	cmp	r3, #0
 8009358:	d0f3      	beq.n	8009342 <__strtok_r+0x2e>
 800935a:	2300      	movs	r3, #0
 800935c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009360:	6014      	str	r4, [r2, #0]
 8009362:	e7ed      	b.n	8009340 <__strtok_r+0x2c>

08009364 <_close_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	2300      	movs	r3, #0
 8009368:	4d05      	ldr	r5, [pc, #20]	@ (8009380 <_close_r+0x1c>)
 800936a:	4604      	mov	r4, r0
 800936c:	4608      	mov	r0, r1
 800936e:	602b      	str	r3, [r5, #0]
 8009370:	f7f8 fbc1 	bl	8001af6 <_close>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d102      	bne.n	800937e <_close_r+0x1a>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	b103      	cbz	r3, 800937e <_close_r+0x1a>
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	20000e98 	.word	0x20000e98

08009384 <_lseek_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4604      	mov	r4, r0
 8009388:	4608      	mov	r0, r1
 800938a:	4611      	mov	r1, r2
 800938c:	2200      	movs	r2, #0
 800938e:	4d05      	ldr	r5, [pc, #20]	@ (80093a4 <_lseek_r+0x20>)
 8009390:	602a      	str	r2, [r5, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	f7f8 fbd3 	bl	8001b3e <_lseek>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_lseek_r+0x1e>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_lseek_r+0x1e>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	20000e98 	.word	0x20000e98

080093a8 <_read_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4604      	mov	r4, r0
 80093ac:	4608      	mov	r0, r1
 80093ae:	4611      	mov	r1, r2
 80093b0:	2200      	movs	r2, #0
 80093b2:	4d05      	ldr	r5, [pc, #20]	@ (80093c8 <_read_r+0x20>)
 80093b4:	602a      	str	r2, [r5, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	f7f8 fb80 	bl	8001abc <_read>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d102      	bne.n	80093c6 <_read_r+0x1e>
 80093c0:	682b      	ldr	r3, [r5, #0]
 80093c2:	b103      	cbz	r3, 80093c6 <_read_r+0x1e>
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	bd38      	pop	{r3, r4, r5, pc}
 80093c8:	20000e98 	.word	0x20000e98

080093cc <_write_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	4604      	mov	r4, r0
 80093d0:	4608      	mov	r0, r1
 80093d2:	4611      	mov	r1, r2
 80093d4:	2200      	movs	r2, #0
 80093d6:	4d05      	ldr	r5, [pc, #20]	@ (80093ec <_write_r+0x20>)
 80093d8:	602a      	str	r2, [r5, #0]
 80093da:	461a      	mov	r2, r3
 80093dc:	f7f7 fc8c 	bl	8000cf8 <_write>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_write_r+0x1e>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_write_r+0x1e>
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	20000e98 	.word	0x20000e98

080093f0 <__errno>:
 80093f0:	4b01      	ldr	r3, [pc, #4]	@ (80093f8 <__errno+0x8>)
 80093f2:	6818      	ldr	r0, [r3, #0]
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	20000018 	.word	0x20000018

080093fc <__libc_init_array>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	2600      	movs	r6, #0
 8009400:	4d0c      	ldr	r5, [pc, #48]	@ (8009434 <__libc_init_array+0x38>)
 8009402:	4c0d      	ldr	r4, [pc, #52]	@ (8009438 <__libc_init_array+0x3c>)
 8009404:	1b64      	subs	r4, r4, r5
 8009406:	10a4      	asrs	r4, r4, #2
 8009408:	42a6      	cmp	r6, r4
 800940a:	d109      	bne.n	8009420 <__libc_init_array+0x24>
 800940c:	f000 fdb4 	bl	8009f78 <_init>
 8009410:	2600      	movs	r6, #0
 8009412:	4d0a      	ldr	r5, [pc, #40]	@ (800943c <__libc_init_array+0x40>)
 8009414:	4c0a      	ldr	r4, [pc, #40]	@ (8009440 <__libc_init_array+0x44>)
 8009416:	1b64      	subs	r4, r4, r5
 8009418:	10a4      	asrs	r4, r4, #2
 800941a:	42a6      	cmp	r6, r4
 800941c:	d105      	bne.n	800942a <__libc_init_array+0x2e>
 800941e:	bd70      	pop	{r4, r5, r6, pc}
 8009420:	f855 3b04 	ldr.w	r3, [r5], #4
 8009424:	4798      	blx	r3
 8009426:	3601      	adds	r6, #1
 8009428:	e7ee      	b.n	8009408 <__libc_init_array+0xc>
 800942a:	f855 3b04 	ldr.w	r3, [r5], #4
 800942e:	4798      	blx	r3
 8009430:	3601      	adds	r6, #1
 8009432:	e7f2      	b.n	800941a <__libc_init_array+0x1e>
 8009434:	0800a6c0 	.word	0x0800a6c0
 8009438:	0800a6c0 	.word	0x0800a6c0
 800943c:	0800a6c0 	.word	0x0800a6c0
 8009440:	0800a6c4 	.word	0x0800a6c4

08009444 <__retarget_lock_init_recursive>:
 8009444:	4770      	bx	lr

08009446 <__retarget_lock_acquire_recursive>:
 8009446:	4770      	bx	lr

08009448 <__retarget_lock_release_recursive>:
 8009448:	4770      	bx	lr
	...

0800944c <__assert_func>:
 800944c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800944e:	4614      	mov	r4, r2
 8009450:	461a      	mov	r2, r3
 8009452:	4b09      	ldr	r3, [pc, #36]	@ (8009478 <__assert_func+0x2c>)
 8009454:	4605      	mov	r5, r0
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68d8      	ldr	r0, [r3, #12]
 800945a:	b954      	cbnz	r4, 8009472 <__assert_func+0x26>
 800945c:	4b07      	ldr	r3, [pc, #28]	@ (800947c <__assert_func+0x30>)
 800945e:	461c      	mov	r4, r3
 8009460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009464:	9100      	str	r1, [sp, #0]
 8009466:	462b      	mov	r3, r5
 8009468:	4905      	ldr	r1, [pc, #20]	@ (8009480 <__assert_func+0x34>)
 800946a:	f000 fc85 	bl	8009d78 <fiprintf>
 800946e:	f000 fd37 	bl	8009ee0 <abort>
 8009472:	4b04      	ldr	r3, [pc, #16]	@ (8009484 <__assert_func+0x38>)
 8009474:	e7f4      	b.n	8009460 <__assert_func+0x14>
 8009476:	bf00      	nop
 8009478:	20000018 	.word	0x20000018
 800947c:	0800a681 	.word	0x0800a681
 8009480:	0800a653 	.word	0x0800a653
 8009484:	0800a646 	.word	0x0800a646

08009488 <_free_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4605      	mov	r5, r0
 800948c:	2900      	cmp	r1, #0
 800948e:	d040      	beq.n	8009512 <_free_r+0x8a>
 8009490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009494:	1f0c      	subs	r4, r1, #4
 8009496:	2b00      	cmp	r3, #0
 8009498:	bfb8      	it	lt
 800949a:	18e4      	addlt	r4, r4, r3
 800949c:	f000 f8e6 	bl	800966c <__malloc_lock>
 80094a0:	4a1c      	ldr	r2, [pc, #112]	@ (8009514 <_free_r+0x8c>)
 80094a2:	6813      	ldr	r3, [r2, #0]
 80094a4:	b933      	cbnz	r3, 80094b4 <_free_r+0x2c>
 80094a6:	6063      	str	r3, [r4, #4]
 80094a8:	6014      	str	r4, [r2, #0]
 80094aa:	4628      	mov	r0, r5
 80094ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094b0:	f000 b8e2 	b.w	8009678 <__malloc_unlock>
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	d908      	bls.n	80094ca <_free_r+0x42>
 80094b8:	6820      	ldr	r0, [r4, #0]
 80094ba:	1821      	adds	r1, r4, r0
 80094bc:	428b      	cmp	r3, r1
 80094be:	bf01      	itttt	eq
 80094c0:	6819      	ldreq	r1, [r3, #0]
 80094c2:	685b      	ldreq	r3, [r3, #4]
 80094c4:	1809      	addeq	r1, r1, r0
 80094c6:	6021      	streq	r1, [r4, #0]
 80094c8:	e7ed      	b.n	80094a6 <_free_r+0x1e>
 80094ca:	461a      	mov	r2, r3
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	b10b      	cbz	r3, 80094d4 <_free_r+0x4c>
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	d9fa      	bls.n	80094ca <_free_r+0x42>
 80094d4:	6811      	ldr	r1, [r2, #0]
 80094d6:	1850      	adds	r0, r2, r1
 80094d8:	42a0      	cmp	r0, r4
 80094da:	d10b      	bne.n	80094f4 <_free_r+0x6c>
 80094dc:	6820      	ldr	r0, [r4, #0]
 80094de:	4401      	add	r1, r0
 80094e0:	1850      	adds	r0, r2, r1
 80094e2:	4283      	cmp	r3, r0
 80094e4:	6011      	str	r1, [r2, #0]
 80094e6:	d1e0      	bne.n	80094aa <_free_r+0x22>
 80094e8:	6818      	ldr	r0, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	4408      	add	r0, r1
 80094ee:	6010      	str	r0, [r2, #0]
 80094f0:	6053      	str	r3, [r2, #4]
 80094f2:	e7da      	b.n	80094aa <_free_r+0x22>
 80094f4:	d902      	bls.n	80094fc <_free_r+0x74>
 80094f6:	230c      	movs	r3, #12
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	e7d6      	b.n	80094aa <_free_r+0x22>
 80094fc:	6820      	ldr	r0, [r4, #0]
 80094fe:	1821      	adds	r1, r4, r0
 8009500:	428b      	cmp	r3, r1
 8009502:	bf01      	itttt	eq
 8009504:	6819      	ldreq	r1, [r3, #0]
 8009506:	685b      	ldreq	r3, [r3, #4]
 8009508:	1809      	addeq	r1, r1, r0
 800950a:	6021      	streq	r1, [r4, #0]
 800950c:	6063      	str	r3, [r4, #4]
 800950e:	6054      	str	r4, [r2, #4]
 8009510:	e7cb      	b.n	80094aa <_free_r+0x22>
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	20000ea4 	.word	0x20000ea4

08009518 <malloc>:
 8009518:	4b02      	ldr	r3, [pc, #8]	@ (8009524 <malloc+0xc>)
 800951a:	4601      	mov	r1, r0
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	f000 b825 	b.w	800956c <_malloc_r>
 8009522:	bf00      	nop
 8009524:	20000018 	.word	0x20000018

08009528 <sbrk_aligned>:
 8009528:	b570      	push	{r4, r5, r6, lr}
 800952a:	4e0f      	ldr	r6, [pc, #60]	@ (8009568 <sbrk_aligned+0x40>)
 800952c:	460c      	mov	r4, r1
 800952e:	6831      	ldr	r1, [r6, #0]
 8009530:	4605      	mov	r5, r0
 8009532:	b911      	cbnz	r1, 800953a <sbrk_aligned+0x12>
 8009534:	f000 fcb6 	bl	8009ea4 <_sbrk_r>
 8009538:	6030      	str	r0, [r6, #0]
 800953a:	4621      	mov	r1, r4
 800953c:	4628      	mov	r0, r5
 800953e:	f000 fcb1 	bl	8009ea4 <_sbrk_r>
 8009542:	1c43      	adds	r3, r0, #1
 8009544:	d103      	bne.n	800954e <sbrk_aligned+0x26>
 8009546:	f04f 34ff 	mov.w	r4, #4294967295
 800954a:	4620      	mov	r0, r4
 800954c:	bd70      	pop	{r4, r5, r6, pc}
 800954e:	1cc4      	adds	r4, r0, #3
 8009550:	f024 0403 	bic.w	r4, r4, #3
 8009554:	42a0      	cmp	r0, r4
 8009556:	d0f8      	beq.n	800954a <sbrk_aligned+0x22>
 8009558:	1a21      	subs	r1, r4, r0
 800955a:	4628      	mov	r0, r5
 800955c:	f000 fca2 	bl	8009ea4 <_sbrk_r>
 8009560:	3001      	adds	r0, #1
 8009562:	d1f2      	bne.n	800954a <sbrk_aligned+0x22>
 8009564:	e7ef      	b.n	8009546 <sbrk_aligned+0x1e>
 8009566:	bf00      	nop
 8009568:	20000ea0 	.word	0x20000ea0

0800956c <_malloc_r>:
 800956c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009570:	1ccd      	adds	r5, r1, #3
 8009572:	f025 0503 	bic.w	r5, r5, #3
 8009576:	3508      	adds	r5, #8
 8009578:	2d0c      	cmp	r5, #12
 800957a:	bf38      	it	cc
 800957c:	250c      	movcc	r5, #12
 800957e:	2d00      	cmp	r5, #0
 8009580:	4606      	mov	r6, r0
 8009582:	db01      	blt.n	8009588 <_malloc_r+0x1c>
 8009584:	42a9      	cmp	r1, r5
 8009586:	d904      	bls.n	8009592 <_malloc_r+0x26>
 8009588:	230c      	movs	r3, #12
 800958a:	6033      	str	r3, [r6, #0]
 800958c:	2000      	movs	r0, #0
 800958e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009592:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009668 <_malloc_r+0xfc>
 8009596:	f000 f869 	bl	800966c <__malloc_lock>
 800959a:	f8d8 3000 	ldr.w	r3, [r8]
 800959e:	461c      	mov	r4, r3
 80095a0:	bb44      	cbnz	r4, 80095f4 <_malloc_r+0x88>
 80095a2:	4629      	mov	r1, r5
 80095a4:	4630      	mov	r0, r6
 80095a6:	f7ff ffbf 	bl	8009528 <sbrk_aligned>
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	4604      	mov	r4, r0
 80095ae:	d158      	bne.n	8009662 <_malloc_r+0xf6>
 80095b0:	f8d8 4000 	ldr.w	r4, [r8]
 80095b4:	4627      	mov	r7, r4
 80095b6:	2f00      	cmp	r7, #0
 80095b8:	d143      	bne.n	8009642 <_malloc_r+0xd6>
 80095ba:	2c00      	cmp	r4, #0
 80095bc:	d04b      	beq.n	8009656 <_malloc_r+0xea>
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	4639      	mov	r1, r7
 80095c2:	4630      	mov	r0, r6
 80095c4:	eb04 0903 	add.w	r9, r4, r3
 80095c8:	f000 fc6c 	bl	8009ea4 <_sbrk_r>
 80095cc:	4581      	cmp	r9, r0
 80095ce:	d142      	bne.n	8009656 <_malloc_r+0xea>
 80095d0:	6821      	ldr	r1, [r4, #0]
 80095d2:	4630      	mov	r0, r6
 80095d4:	1a6d      	subs	r5, r5, r1
 80095d6:	4629      	mov	r1, r5
 80095d8:	f7ff ffa6 	bl	8009528 <sbrk_aligned>
 80095dc:	3001      	adds	r0, #1
 80095de:	d03a      	beq.n	8009656 <_malloc_r+0xea>
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	442b      	add	r3, r5
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	f8d8 3000 	ldr.w	r3, [r8]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	bb62      	cbnz	r2, 8009648 <_malloc_r+0xdc>
 80095ee:	f8c8 7000 	str.w	r7, [r8]
 80095f2:	e00f      	b.n	8009614 <_malloc_r+0xa8>
 80095f4:	6822      	ldr	r2, [r4, #0]
 80095f6:	1b52      	subs	r2, r2, r5
 80095f8:	d420      	bmi.n	800963c <_malloc_r+0xd0>
 80095fa:	2a0b      	cmp	r2, #11
 80095fc:	d917      	bls.n	800962e <_malloc_r+0xc2>
 80095fe:	1961      	adds	r1, r4, r5
 8009600:	42a3      	cmp	r3, r4
 8009602:	6025      	str	r5, [r4, #0]
 8009604:	bf18      	it	ne
 8009606:	6059      	strne	r1, [r3, #4]
 8009608:	6863      	ldr	r3, [r4, #4]
 800960a:	bf08      	it	eq
 800960c:	f8c8 1000 	streq.w	r1, [r8]
 8009610:	5162      	str	r2, [r4, r5]
 8009612:	604b      	str	r3, [r1, #4]
 8009614:	4630      	mov	r0, r6
 8009616:	f000 f82f 	bl	8009678 <__malloc_unlock>
 800961a:	f104 000b 	add.w	r0, r4, #11
 800961e:	1d23      	adds	r3, r4, #4
 8009620:	f020 0007 	bic.w	r0, r0, #7
 8009624:	1ac2      	subs	r2, r0, r3
 8009626:	bf1c      	itt	ne
 8009628:	1a1b      	subne	r3, r3, r0
 800962a:	50a3      	strne	r3, [r4, r2]
 800962c:	e7af      	b.n	800958e <_malloc_r+0x22>
 800962e:	6862      	ldr	r2, [r4, #4]
 8009630:	42a3      	cmp	r3, r4
 8009632:	bf0c      	ite	eq
 8009634:	f8c8 2000 	streq.w	r2, [r8]
 8009638:	605a      	strne	r2, [r3, #4]
 800963a:	e7eb      	b.n	8009614 <_malloc_r+0xa8>
 800963c:	4623      	mov	r3, r4
 800963e:	6864      	ldr	r4, [r4, #4]
 8009640:	e7ae      	b.n	80095a0 <_malloc_r+0x34>
 8009642:	463c      	mov	r4, r7
 8009644:	687f      	ldr	r7, [r7, #4]
 8009646:	e7b6      	b.n	80095b6 <_malloc_r+0x4a>
 8009648:	461a      	mov	r2, r3
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	42a3      	cmp	r3, r4
 800964e:	d1fb      	bne.n	8009648 <_malloc_r+0xdc>
 8009650:	2300      	movs	r3, #0
 8009652:	6053      	str	r3, [r2, #4]
 8009654:	e7de      	b.n	8009614 <_malloc_r+0xa8>
 8009656:	230c      	movs	r3, #12
 8009658:	4630      	mov	r0, r6
 800965a:	6033      	str	r3, [r6, #0]
 800965c:	f000 f80c 	bl	8009678 <__malloc_unlock>
 8009660:	e794      	b.n	800958c <_malloc_r+0x20>
 8009662:	6005      	str	r5, [r0, #0]
 8009664:	e7d6      	b.n	8009614 <_malloc_r+0xa8>
 8009666:	bf00      	nop
 8009668:	20000ea4 	.word	0x20000ea4

0800966c <__malloc_lock>:
 800966c:	4801      	ldr	r0, [pc, #4]	@ (8009674 <__malloc_lock+0x8>)
 800966e:	f7ff beea 	b.w	8009446 <__retarget_lock_acquire_recursive>
 8009672:	bf00      	nop
 8009674:	20000e9c 	.word	0x20000e9c

08009678 <__malloc_unlock>:
 8009678:	4801      	ldr	r0, [pc, #4]	@ (8009680 <__malloc_unlock+0x8>)
 800967a:	f7ff bee5 	b.w	8009448 <__retarget_lock_release_recursive>
 800967e:	bf00      	nop
 8009680:	20000e9c 	.word	0x20000e9c

08009684 <__sfputc_r>:
 8009684:	6893      	ldr	r3, [r2, #8]
 8009686:	b410      	push	{r4}
 8009688:	3b01      	subs	r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	6093      	str	r3, [r2, #8]
 800968e:	da07      	bge.n	80096a0 <__sfputc_r+0x1c>
 8009690:	6994      	ldr	r4, [r2, #24]
 8009692:	42a3      	cmp	r3, r4
 8009694:	db01      	blt.n	800969a <__sfputc_r+0x16>
 8009696:	290a      	cmp	r1, #10
 8009698:	d102      	bne.n	80096a0 <__sfputc_r+0x1c>
 800969a:	bc10      	pop	{r4}
 800969c:	f7ff bd69 	b.w	8009172 <__swbuf_r>
 80096a0:	6813      	ldr	r3, [r2, #0]
 80096a2:	1c58      	adds	r0, r3, #1
 80096a4:	6010      	str	r0, [r2, #0]
 80096a6:	7019      	strb	r1, [r3, #0]
 80096a8:	4608      	mov	r0, r1
 80096aa:	bc10      	pop	{r4}
 80096ac:	4770      	bx	lr

080096ae <__sfputs_r>:
 80096ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b0:	4606      	mov	r6, r0
 80096b2:	460f      	mov	r7, r1
 80096b4:	4614      	mov	r4, r2
 80096b6:	18d5      	adds	r5, r2, r3
 80096b8:	42ac      	cmp	r4, r5
 80096ba:	d101      	bne.n	80096c0 <__sfputs_r+0x12>
 80096bc:	2000      	movs	r0, #0
 80096be:	e007      	b.n	80096d0 <__sfputs_r+0x22>
 80096c0:	463a      	mov	r2, r7
 80096c2:	4630      	mov	r0, r6
 80096c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c8:	f7ff ffdc 	bl	8009684 <__sfputc_r>
 80096cc:	1c43      	adds	r3, r0, #1
 80096ce:	d1f3      	bne.n	80096b8 <__sfputs_r+0xa>
 80096d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096d4 <_vfiprintf_r>:
 80096d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	460d      	mov	r5, r1
 80096da:	4614      	mov	r4, r2
 80096dc:	4698      	mov	r8, r3
 80096de:	4606      	mov	r6, r0
 80096e0:	b09d      	sub	sp, #116	@ 0x74
 80096e2:	b118      	cbz	r0, 80096ec <_vfiprintf_r+0x18>
 80096e4:	6a03      	ldr	r3, [r0, #32]
 80096e6:	b90b      	cbnz	r3, 80096ec <_vfiprintf_r+0x18>
 80096e8:	f7ff fc5a 	bl	8008fa0 <__sinit>
 80096ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096ee:	07d9      	lsls	r1, r3, #31
 80096f0:	d405      	bmi.n	80096fe <_vfiprintf_r+0x2a>
 80096f2:	89ab      	ldrh	r3, [r5, #12]
 80096f4:	059a      	lsls	r2, r3, #22
 80096f6:	d402      	bmi.n	80096fe <_vfiprintf_r+0x2a>
 80096f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096fa:	f7ff fea4 	bl	8009446 <__retarget_lock_acquire_recursive>
 80096fe:	89ab      	ldrh	r3, [r5, #12]
 8009700:	071b      	lsls	r3, r3, #28
 8009702:	d501      	bpl.n	8009708 <_vfiprintf_r+0x34>
 8009704:	692b      	ldr	r3, [r5, #16]
 8009706:	b99b      	cbnz	r3, 8009730 <_vfiprintf_r+0x5c>
 8009708:	4629      	mov	r1, r5
 800970a:	4630      	mov	r0, r6
 800970c:	f7ff fd70 	bl	80091f0 <__swsetup_r>
 8009710:	b170      	cbz	r0, 8009730 <_vfiprintf_r+0x5c>
 8009712:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009714:	07dc      	lsls	r4, r3, #31
 8009716:	d504      	bpl.n	8009722 <_vfiprintf_r+0x4e>
 8009718:	f04f 30ff 	mov.w	r0, #4294967295
 800971c:	b01d      	add	sp, #116	@ 0x74
 800971e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009722:	89ab      	ldrh	r3, [r5, #12]
 8009724:	0598      	lsls	r0, r3, #22
 8009726:	d4f7      	bmi.n	8009718 <_vfiprintf_r+0x44>
 8009728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800972a:	f7ff fe8d 	bl	8009448 <__retarget_lock_release_recursive>
 800972e:	e7f3      	b.n	8009718 <_vfiprintf_r+0x44>
 8009730:	2300      	movs	r3, #0
 8009732:	9309      	str	r3, [sp, #36]	@ 0x24
 8009734:	2320      	movs	r3, #32
 8009736:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800973a:	2330      	movs	r3, #48	@ 0x30
 800973c:	f04f 0901 	mov.w	r9, #1
 8009740:	f8cd 800c 	str.w	r8, [sp, #12]
 8009744:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80098f0 <_vfiprintf_r+0x21c>
 8009748:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800974c:	4623      	mov	r3, r4
 800974e:	469a      	mov	sl, r3
 8009750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009754:	b10a      	cbz	r2, 800975a <_vfiprintf_r+0x86>
 8009756:	2a25      	cmp	r2, #37	@ 0x25
 8009758:	d1f9      	bne.n	800974e <_vfiprintf_r+0x7a>
 800975a:	ebba 0b04 	subs.w	fp, sl, r4
 800975e:	d00b      	beq.n	8009778 <_vfiprintf_r+0xa4>
 8009760:	465b      	mov	r3, fp
 8009762:	4622      	mov	r2, r4
 8009764:	4629      	mov	r1, r5
 8009766:	4630      	mov	r0, r6
 8009768:	f7ff ffa1 	bl	80096ae <__sfputs_r>
 800976c:	3001      	adds	r0, #1
 800976e:	f000 80a7 	beq.w	80098c0 <_vfiprintf_r+0x1ec>
 8009772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009774:	445a      	add	r2, fp
 8009776:	9209      	str	r2, [sp, #36]	@ 0x24
 8009778:	f89a 3000 	ldrb.w	r3, [sl]
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 809f 	beq.w	80098c0 <_vfiprintf_r+0x1ec>
 8009782:	2300      	movs	r3, #0
 8009784:	f04f 32ff 	mov.w	r2, #4294967295
 8009788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800978c:	f10a 0a01 	add.w	sl, sl, #1
 8009790:	9304      	str	r3, [sp, #16]
 8009792:	9307      	str	r3, [sp, #28]
 8009794:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009798:	931a      	str	r3, [sp, #104]	@ 0x68
 800979a:	4654      	mov	r4, sl
 800979c:	2205      	movs	r2, #5
 800979e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a2:	4853      	ldr	r0, [pc, #332]	@ (80098f0 <_vfiprintf_r+0x21c>)
 80097a4:	f000 fb8e 	bl	8009ec4 <memchr>
 80097a8:	9a04      	ldr	r2, [sp, #16]
 80097aa:	b9d8      	cbnz	r0, 80097e4 <_vfiprintf_r+0x110>
 80097ac:	06d1      	lsls	r1, r2, #27
 80097ae:	bf44      	itt	mi
 80097b0:	2320      	movmi	r3, #32
 80097b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097b6:	0713      	lsls	r3, r2, #28
 80097b8:	bf44      	itt	mi
 80097ba:	232b      	movmi	r3, #43	@ 0x2b
 80097bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097c0:	f89a 3000 	ldrb.w	r3, [sl]
 80097c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80097c6:	d015      	beq.n	80097f4 <_vfiprintf_r+0x120>
 80097c8:	4654      	mov	r4, sl
 80097ca:	2000      	movs	r0, #0
 80097cc:	f04f 0c0a 	mov.w	ip, #10
 80097d0:	9a07      	ldr	r2, [sp, #28]
 80097d2:	4621      	mov	r1, r4
 80097d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097d8:	3b30      	subs	r3, #48	@ 0x30
 80097da:	2b09      	cmp	r3, #9
 80097dc:	d94b      	bls.n	8009876 <_vfiprintf_r+0x1a2>
 80097de:	b1b0      	cbz	r0, 800980e <_vfiprintf_r+0x13a>
 80097e0:	9207      	str	r2, [sp, #28]
 80097e2:	e014      	b.n	800980e <_vfiprintf_r+0x13a>
 80097e4:	eba0 0308 	sub.w	r3, r0, r8
 80097e8:	fa09 f303 	lsl.w	r3, r9, r3
 80097ec:	4313      	orrs	r3, r2
 80097ee:	46a2      	mov	sl, r4
 80097f0:	9304      	str	r3, [sp, #16]
 80097f2:	e7d2      	b.n	800979a <_vfiprintf_r+0xc6>
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	1d19      	adds	r1, r3, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	9103      	str	r1, [sp, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bfbb      	ittet	lt
 8009800:	425b      	neglt	r3, r3
 8009802:	f042 0202 	orrlt.w	r2, r2, #2
 8009806:	9307      	strge	r3, [sp, #28]
 8009808:	9307      	strlt	r3, [sp, #28]
 800980a:	bfb8      	it	lt
 800980c:	9204      	strlt	r2, [sp, #16]
 800980e:	7823      	ldrb	r3, [r4, #0]
 8009810:	2b2e      	cmp	r3, #46	@ 0x2e
 8009812:	d10a      	bne.n	800982a <_vfiprintf_r+0x156>
 8009814:	7863      	ldrb	r3, [r4, #1]
 8009816:	2b2a      	cmp	r3, #42	@ 0x2a
 8009818:	d132      	bne.n	8009880 <_vfiprintf_r+0x1ac>
 800981a:	9b03      	ldr	r3, [sp, #12]
 800981c:	3402      	adds	r4, #2
 800981e:	1d1a      	adds	r2, r3, #4
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	9203      	str	r2, [sp, #12]
 8009824:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009828:	9305      	str	r3, [sp, #20]
 800982a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80098f4 <_vfiprintf_r+0x220>
 800982e:	2203      	movs	r2, #3
 8009830:	4650      	mov	r0, sl
 8009832:	7821      	ldrb	r1, [r4, #0]
 8009834:	f000 fb46 	bl	8009ec4 <memchr>
 8009838:	b138      	cbz	r0, 800984a <_vfiprintf_r+0x176>
 800983a:	2240      	movs	r2, #64	@ 0x40
 800983c:	9b04      	ldr	r3, [sp, #16]
 800983e:	eba0 000a 	sub.w	r0, r0, sl
 8009842:	4082      	lsls	r2, r0
 8009844:	4313      	orrs	r3, r2
 8009846:	3401      	adds	r4, #1
 8009848:	9304      	str	r3, [sp, #16]
 800984a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984e:	2206      	movs	r2, #6
 8009850:	4829      	ldr	r0, [pc, #164]	@ (80098f8 <_vfiprintf_r+0x224>)
 8009852:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009856:	f000 fb35 	bl	8009ec4 <memchr>
 800985a:	2800      	cmp	r0, #0
 800985c:	d03f      	beq.n	80098de <_vfiprintf_r+0x20a>
 800985e:	4b27      	ldr	r3, [pc, #156]	@ (80098fc <_vfiprintf_r+0x228>)
 8009860:	bb1b      	cbnz	r3, 80098aa <_vfiprintf_r+0x1d6>
 8009862:	9b03      	ldr	r3, [sp, #12]
 8009864:	3307      	adds	r3, #7
 8009866:	f023 0307 	bic.w	r3, r3, #7
 800986a:	3308      	adds	r3, #8
 800986c:	9303      	str	r3, [sp, #12]
 800986e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009870:	443b      	add	r3, r7
 8009872:	9309      	str	r3, [sp, #36]	@ 0x24
 8009874:	e76a      	b.n	800974c <_vfiprintf_r+0x78>
 8009876:	460c      	mov	r4, r1
 8009878:	2001      	movs	r0, #1
 800987a:	fb0c 3202 	mla	r2, ip, r2, r3
 800987e:	e7a8      	b.n	80097d2 <_vfiprintf_r+0xfe>
 8009880:	2300      	movs	r3, #0
 8009882:	f04f 0c0a 	mov.w	ip, #10
 8009886:	4619      	mov	r1, r3
 8009888:	3401      	adds	r4, #1
 800988a:	9305      	str	r3, [sp, #20]
 800988c:	4620      	mov	r0, r4
 800988e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009892:	3a30      	subs	r2, #48	@ 0x30
 8009894:	2a09      	cmp	r2, #9
 8009896:	d903      	bls.n	80098a0 <_vfiprintf_r+0x1cc>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d0c6      	beq.n	800982a <_vfiprintf_r+0x156>
 800989c:	9105      	str	r1, [sp, #20]
 800989e:	e7c4      	b.n	800982a <_vfiprintf_r+0x156>
 80098a0:	4604      	mov	r4, r0
 80098a2:	2301      	movs	r3, #1
 80098a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80098a8:	e7f0      	b.n	800988c <_vfiprintf_r+0x1b8>
 80098aa:	ab03      	add	r3, sp, #12
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	462a      	mov	r2, r5
 80098b0:	4630      	mov	r0, r6
 80098b2:	4b13      	ldr	r3, [pc, #76]	@ (8009900 <_vfiprintf_r+0x22c>)
 80098b4:	a904      	add	r1, sp, #16
 80098b6:	f3af 8000 	nop.w
 80098ba:	4607      	mov	r7, r0
 80098bc:	1c78      	adds	r0, r7, #1
 80098be:	d1d6      	bne.n	800986e <_vfiprintf_r+0x19a>
 80098c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098c2:	07d9      	lsls	r1, r3, #31
 80098c4:	d405      	bmi.n	80098d2 <_vfiprintf_r+0x1fe>
 80098c6:	89ab      	ldrh	r3, [r5, #12]
 80098c8:	059a      	lsls	r2, r3, #22
 80098ca:	d402      	bmi.n	80098d2 <_vfiprintf_r+0x1fe>
 80098cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098ce:	f7ff fdbb 	bl	8009448 <__retarget_lock_release_recursive>
 80098d2:	89ab      	ldrh	r3, [r5, #12]
 80098d4:	065b      	lsls	r3, r3, #25
 80098d6:	f53f af1f 	bmi.w	8009718 <_vfiprintf_r+0x44>
 80098da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098dc:	e71e      	b.n	800971c <_vfiprintf_r+0x48>
 80098de:	ab03      	add	r3, sp, #12
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	462a      	mov	r2, r5
 80098e4:	4630      	mov	r0, r6
 80098e6:	4b06      	ldr	r3, [pc, #24]	@ (8009900 <_vfiprintf_r+0x22c>)
 80098e8:	a904      	add	r1, sp, #16
 80098ea:	f000 f87d 	bl	80099e8 <_printf_i>
 80098ee:	e7e4      	b.n	80098ba <_vfiprintf_r+0x1e6>
 80098f0:	0800a682 	.word	0x0800a682
 80098f4:	0800a688 	.word	0x0800a688
 80098f8:	0800a68c 	.word	0x0800a68c
 80098fc:	00000000 	.word	0x00000000
 8009900:	080096af 	.word	0x080096af

08009904 <_printf_common>:
 8009904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009908:	4616      	mov	r6, r2
 800990a:	4698      	mov	r8, r3
 800990c:	688a      	ldr	r2, [r1, #8]
 800990e:	690b      	ldr	r3, [r1, #16]
 8009910:	4607      	mov	r7, r0
 8009912:	4293      	cmp	r3, r2
 8009914:	bfb8      	it	lt
 8009916:	4613      	movlt	r3, r2
 8009918:	6033      	str	r3, [r6, #0]
 800991a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800991e:	460c      	mov	r4, r1
 8009920:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009924:	b10a      	cbz	r2, 800992a <_printf_common+0x26>
 8009926:	3301      	adds	r3, #1
 8009928:	6033      	str	r3, [r6, #0]
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	0699      	lsls	r1, r3, #26
 800992e:	bf42      	ittt	mi
 8009930:	6833      	ldrmi	r3, [r6, #0]
 8009932:	3302      	addmi	r3, #2
 8009934:	6033      	strmi	r3, [r6, #0]
 8009936:	6825      	ldr	r5, [r4, #0]
 8009938:	f015 0506 	ands.w	r5, r5, #6
 800993c:	d106      	bne.n	800994c <_printf_common+0x48>
 800993e:	f104 0a19 	add.w	sl, r4, #25
 8009942:	68e3      	ldr	r3, [r4, #12]
 8009944:	6832      	ldr	r2, [r6, #0]
 8009946:	1a9b      	subs	r3, r3, r2
 8009948:	42ab      	cmp	r3, r5
 800994a:	dc2b      	bgt.n	80099a4 <_printf_common+0xa0>
 800994c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009950:	6822      	ldr	r2, [r4, #0]
 8009952:	3b00      	subs	r3, #0
 8009954:	bf18      	it	ne
 8009956:	2301      	movne	r3, #1
 8009958:	0692      	lsls	r2, r2, #26
 800995a:	d430      	bmi.n	80099be <_printf_common+0xba>
 800995c:	4641      	mov	r1, r8
 800995e:	4638      	mov	r0, r7
 8009960:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009964:	47c8      	blx	r9
 8009966:	3001      	adds	r0, #1
 8009968:	d023      	beq.n	80099b2 <_printf_common+0xae>
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	6922      	ldr	r2, [r4, #16]
 800996e:	f003 0306 	and.w	r3, r3, #6
 8009972:	2b04      	cmp	r3, #4
 8009974:	bf14      	ite	ne
 8009976:	2500      	movne	r5, #0
 8009978:	6833      	ldreq	r3, [r6, #0]
 800997a:	f04f 0600 	mov.w	r6, #0
 800997e:	bf08      	it	eq
 8009980:	68e5      	ldreq	r5, [r4, #12]
 8009982:	f104 041a 	add.w	r4, r4, #26
 8009986:	bf08      	it	eq
 8009988:	1aed      	subeq	r5, r5, r3
 800998a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800998e:	bf08      	it	eq
 8009990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009994:	4293      	cmp	r3, r2
 8009996:	bfc4      	itt	gt
 8009998:	1a9b      	subgt	r3, r3, r2
 800999a:	18ed      	addgt	r5, r5, r3
 800999c:	42b5      	cmp	r5, r6
 800999e:	d11a      	bne.n	80099d6 <_printf_common+0xd2>
 80099a0:	2000      	movs	r0, #0
 80099a2:	e008      	b.n	80099b6 <_printf_common+0xb2>
 80099a4:	2301      	movs	r3, #1
 80099a6:	4652      	mov	r2, sl
 80099a8:	4641      	mov	r1, r8
 80099aa:	4638      	mov	r0, r7
 80099ac:	47c8      	blx	r9
 80099ae:	3001      	adds	r0, #1
 80099b0:	d103      	bne.n	80099ba <_printf_common+0xb6>
 80099b2:	f04f 30ff 	mov.w	r0, #4294967295
 80099b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ba:	3501      	adds	r5, #1
 80099bc:	e7c1      	b.n	8009942 <_printf_common+0x3e>
 80099be:	2030      	movs	r0, #48	@ 0x30
 80099c0:	18e1      	adds	r1, r4, r3
 80099c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80099cc:	4422      	add	r2, r4
 80099ce:	3302      	adds	r3, #2
 80099d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099d4:	e7c2      	b.n	800995c <_printf_common+0x58>
 80099d6:	2301      	movs	r3, #1
 80099d8:	4622      	mov	r2, r4
 80099da:	4641      	mov	r1, r8
 80099dc:	4638      	mov	r0, r7
 80099de:	47c8      	blx	r9
 80099e0:	3001      	adds	r0, #1
 80099e2:	d0e6      	beq.n	80099b2 <_printf_common+0xae>
 80099e4:	3601      	adds	r6, #1
 80099e6:	e7d9      	b.n	800999c <_printf_common+0x98>

080099e8 <_printf_i>:
 80099e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099ec:	7e0f      	ldrb	r7, [r1, #24]
 80099ee:	4691      	mov	r9, r2
 80099f0:	2f78      	cmp	r7, #120	@ 0x78
 80099f2:	4680      	mov	r8, r0
 80099f4:	460c      	mov	r4, r1
 80099f6:	469a      	mov	sl, r3
 80099f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099fe:	d807      	bhi.n	8009a10 <_printf_i+0x28>
 8009a00:	2f62      	cmp	r7, #98	@ 0x62
 8009a02:	d80a      	bhi.n	8009a1a <_printf_i+0x32>
 8009a04:	2f00      	cmp	r7, #0
 8009a06:	f000 80d3 	beq.w	8009bb0 <_printf_i+0x1c8>
 8009a0a:	2f58      	cmp	r7, #88	@ 0x58
 8009a0c:	f000 80ba 	beq.w	8009b84 <_printf_i+0x19c>
 8009a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a18:	e03a      	b.n	8009a90 <_printf_i+0xa8>
 8009a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a1e:	2b15      	cmp	r3, #21
 8009a20:	d8f6      	bhi.n	8009a10 <_printf_i+0x28>
 8009a22:	a101      	add	r1, pc, #4	@ (adr r1, 8009a28 <_printf_i+0x40>)
 8009a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a28:	08009a81 	.word	0x08009a81
 8009a2c:	08009a95 	.word	0x08009a95
 8009a30:	08009a11 	.word	0x08009a11
 8009a34:	08009a11 	.word	0x08009a11
 8009a38:	08009a11 	.word	0x08009a11
 8009a3c:	08009a11 	.word	0x08009a11
 8009a40:	08009a95 	.word	0x08009a95
 8009a44:	08009a11 	.word	0x08009a11
 8009a48:	08009a11 	.word	0x08009a11
 8009a4c:	08009a11 	.word	0x08009a11
 8009a50:	08009a11 	.word	0x08009a11
 8009a54:	08009b97 	.word	0x08009b97
 8009a58:	08009abf 	.word	0x08009abf
 8009a5c:	08009b51 	.word	0x08009b51
 8009a60:	08009a11 	.word	0x08009a11
 8009a64:	08009a11 	.word	0x08009a11
 8009a68:	08009bb9 	.word	0x08009bb9
 8009a6c:	08009a11 	.word	0x08009a11
 8009a70:	08009abf 	.word	0x08009abf
 8009a74:	08009a11 	.word	0x08009a11
 8009a78:	08009a11 	.word	0x08009a11
 8009a7c:	08009b59 	.word	0x08009b59
 8009a80:	6833      	ldr	r3, [r6, #0]
 8009a82:	1d1a      	adds	r2, r3, #4
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6032      	str	r2, [r6, #0]
 8009a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a90:	2301      	movs	r3, #1
 8009a92:	e09e      	b.n	8009bd2 <_printf_i+0x1ea>
 8009a94:	6833      	ldr	r3, [r6, #0]
 8009a96:	6820      	ldr	r0, [r4, #0]
 8009a98:	1d19      	adds	r1, r3, #4
 8009a9a:	6031      	str	r1, [r6, #0]
 8009a9c:	0606      	lsls	r6, r0, #24
 8009a9e:	d501      	bpl.n	8009aa4 <_printf_i+0xbc>
 8009aa0:	681d      	ldr	r5, [r3, #0]
 8009aa2:	e003      	b.n	8009aac <_printf_i+0xc4>
 8009aa4:	0645      	lsls	r5, r0, #25
 8009aa6:	d5fb      	bpl.n	8009aa0 <_printf_i+0xb8>
 8009aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	da03      	bge.n	8009ab8 <_printf_i+0xd0>
 8009ab0:	232d      	movs	r3, #45	@ 0x2d
 8009ab2:	426d      	negs	r5, r5
 8009ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ab8:	230a      	movs	r3, #10
 8009aba:	4859      	ldr	r0, [pc, #356]	@ (8009c20 <_printf_i+0x238>)
 8009abc:	e011      	b.n	8009ae2 <_printf_i+0xfa>
 8009abe:	6821      	ldr	r1, [r4, #0]
 8009ac0:	6833      	ldr	r3, [r6, #0]
 8009ac2:	0608      	lsls	r0, r1, #24
 8009ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ac8:	d402      	bmi.n	8009ad0 <_printf_i+0xe8>
 8009aca:	0649      	lsls	r1, r1, #25
 8009acc:	bf48      	it	mi
 8009ace:	b2ad      	uxthmi	r5, r5
 8009ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ad2:	6033      	str	r3, [r6, #0]
 8009ad4:	bf14      	ite	ne
 8009ad6:	230a      	movne	r3, #10
 8009ad8:	2308      	moveq	r3, #8
 8009ada:	4851      	ldr	r0, [pc, #324]	@ (8009c20 <_printf_i+0x238>)
 8009adc:	2100      	movs	r1, #0
 8009ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ae2:	6866      	ldr	r6, [r4, #4]
 8009ae4:	2e00      	cmp	r6, #0
 8009ae6:	bfa8      	it	ge
 8009ae8:	6821      	ldrge	r1, [r4, #0]
 8009aea:	60a6      	str	r6, [r4, #8]
 8009aec:	bfa4      	itt	ge
 8009aee:	f021 0104 	bicge.w	r1, r1, #4
 8009af2:	6021      	strge	r1, [r4, #0]
 8009af4:	b90d      	cbnz	r5, 8009afa <_printf_i+0x112>
 8009af6:	2e00      	cmp	r6, #0
 8009af8:	d04b      	beq.n	8009b92 <_printf_i+0x1aa>
 8009afa:	4616      	mov	r6, r2
 8009afc:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b00:	fb03 5711 	mls	r7, r3, r1, r5
 8009b04:	5dc7      	ldrb	r7, [r0, r7]
 8009b06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b0a:	462f      	mov	r7, r5
 8009b0c:	42bb      	cmp	r3, r7
 8009b0e:	460d      	mov	r5, r1
 8009b10:	d9f4      	bls.n	8009afc <_printf_i+0x114>
 8009b12:	2b08      	cmp	r3, #8
 8009b14:	d10b      	bne.n	8009b2e <_printf_i+0x146>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	07df      	lsls	r7, r3, #31
 8009b1a:	d508      	bpl.n	8009b2e <_printf_i+0x146>
 8009b1c:	6923      	ldr	r3, [r4, #16]
 8009b1e:	6861      	ldr	r1, [r4, #4]
 8009b20:	4299      	cmp	r1, r3
 8009b22:	bfde      	ittt	le
 8009b24:	2330      	movle	r3, #48	@ 0x30
 8009b26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b2e:	1b92      	subs	r2, r2, r6
 8009b30:	6122      	str	r2, [r4, #16]
 8009b32:	464b      	mov	r3, r9
 8009b34:	4621      	mov	r1, r4
 8009b36:	4640      	mov	r0, r8
 8009b38:	f8cd a000 	str.w	sl, [sp]
 8009b3c:	aa03      	add	r2, sp, #12
 8009b3e:	f7ff fee1 	bl	8009904 <_printf_common>
 8009b42:	3001      	adds	r0, #1
 8009b44:	d14a      	bne.n	8009bdc <_printf_i+0x1f4>
 8009b46:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4a:	b004      	add	sp, #16
 8009b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	f043 0320 	orr.w	r3, r3, #32
 8009b56:	6023      	str	r3, [r4, #0]
 8009b58:	2778      	movs	r7, #120	@ 0x78
 8009b5a:	4832      	ldr	r0, [pc, #200]	@ (8009c24 <_printf_i+0x23c>)
 8009b5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	6831      	ldr	r1, [r6, #0]
 8009b64:	061f      	lsls	r7, r3, #24
 8009b66:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b6a:	d402      	bmi.n	8009b72 <_printf_i+0x18a>
 8009b6c:	065f      	lsls	r7, r3, #25
 8009b6e:	bf48      	it	mi
 8009b70:	b2ad      	uxthmi	r5, r5
 8009b72:	6031      	str	r1, [r6, #0]
 8009b74:	07d9      	lsls	r1, r3, #31
 8009b76:	bf44      	itt	mi
 8009b78:	f043 0320 	orrmi.w	r3, r3, #32
 8009b7c:	6023      	strmi	r3, [r4, #0]
 8009b7e:	b11d      	cbz	r5, 8009b88 <_printf_i+0x1a0>
 8009b80:	2310      	movs	r3, #16
 8009b82:	e7ab      	b.n	8009adc <_printf_i+0xf4>
 8009b84:	4826      	ldr	r0, [pc, #152]	@ (8009c20 <_printf_i+0x238>)
 8009b86:	e7e9      	b.n	8009b5c <_printf_i+0x174>
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	f023 0320 	bic.w	r3, r3, #32
 8009b8e:	6023      	str	r3, [r4, #0]
 8009b90:	e7f6      	b.n	8009b80 <_printf_i+0x198>
 8009b92:	4616      	mov	r6, r2
 8009b94:	e7bd      	b.n	8009b12 <_printf_i+0x12a>
 8009b96:	6833      	ldr	r3, [r6, #0]
 8009b98:	6825      	ldr	r5, [r4, #0]
 8009b9a:	1d18      	adds	r0, r3, #4
 8009b9c:	6961      	ldr	r1, [r4, #20]
 8009b9e:	6030      	str	r0, [r6, #0]
 8009ba0:	062e      	lsls	r6, r5, #24
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	d501      	bpl.n	8009baa <_printf_i+0x1c2>
 8009ba6:	6019      	str	r1, [r3, #0]
 8009ba8:	e002      	b.n	8009bb0 <_printf_i+0x1c8>
 8009baa:	0668      	lsls	r0, r5, #25
 8009bac:	d5fb      	bpl.n	8009ba6 <_printf_i+0x1be>
 8009bae:	8019      	strh	r1, [r3, #0]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4616      	mov	r6, r2
 8009bb4:	6123      	str	r3, [r4, #16]
 8009bb6:	e7bc      	b.n	8009b32 <_printf_i+0x14a>
 8009bb8:	6833      	ldr	r3, [r6, #0]
 8009bba:	2100      	movs	r1, #0
 8009bbc:	1d1a      	adds	r2, r3, #4
 8009bbe:	6032      	str	r2, [r6, #0]
 8009bc0:	681e      	ldr	r6, [r3, #0]
 8009bc2:	6862      	ldr	r2, [r4, #4]
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f000 f97d 	bl	8009ec4 <memchr>
 8009bca:	b108      	cbz	r0, 8009bd0 <_printf_i+0x1e8>
 8009bcc:	1b80      	subs	r0, r0, r6
 8009bce:	6060      	str	r0, [r4, #4]
 8009bd0:	6863      	ldr	r3, [r4, #4]
 8009bd2:	6123      	str	r3, [r4, #16]
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bda:	e7aa      	b.n	8009b32 <_printf_i+0x14a>
 8009bdc:	4632      	mov	r2, r6
 8009bde:	4649      	mov	r1, r9
 8009be0:	4640      	mov	r0, r8
 8009be2:	6923      	ldr	r3, [r4, #16]
 8009be4:	47d0      	blx	sl
 8009be6:	3001      	adds	r0, #1
 8009be8:	d0ad      	beq.n	8009b46 <_printf_i+0x15e>
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	079b      	lsls	r3, r3, #30
 8009bee:	d413      	bmi.n	8009c18 <_printf_i+0x230>
 8009bf0:	68e0      	ldr	r0, [r4, #12]
 8009bf2:	9b03      	ldr	r3, [sp, #12]
 8009bf4:	4298      	cmp	r0, r3
 8009bf6:	bfb8      	it	lt
 8009bf8:	4618      	movlt	r0, r3
 8009bfa:	e7a6      	b.n	8009b4a <_printf_i+0x162>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	4632      	mov	r2, r6
 8009c00:	4649      	mov	r1, r9
 8009c02:	4640      	mov	r0, r8
 8009c04:	47d0      	blx	sl
 8009c06:	3001      	adds	r0, #1
 8009c08:	d09d      	beq.n	8009b46 <_printf_i+0x15e>
 8009c0a:	3501      	adds	r5, #1
 8009c0c:	68e3      	ldr	r3, [r4, #12]
 8009c0e:	9903      	ldr	r1, [sp, #12]
 8009c10:	1a5b      	subs	r3, r3, r1
 8009c12:	42ab      	cmp	r3, r5
 8009c14:	dcf2      	bgt.n	8009bfc <_printf_i+0x214>
 8009c16:	e7eb      	b.n	8009bf0 <_printf_i+0x208>
 8009c18:	2500      	movs	r5, #0
 8009c1a:	f104 0619 	add.w	r6, r4, #25
 8009c1e:	e7f5      	b.n	8009c0c <_printf_i+0x224>
 8009c20:	0800a693 	.word	0x0800a693
 8009c24:	0800a6a4 	.word	0x0800a6a4

08009c28 <__sflush_r>:
 8009c28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	0716      	lsls	r6, r2, #28
 8009c30:	4605      	mov	r5, r0
 8009c32:	460c      	mov	r4, r1
 8009c34:	d454      	bmi.n	8009ce0 <__sflush_r+0xb8>
 8009c36:	684b      	ldr	r3, [r1, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	dc02      	bgt.n	8009c42 <__sflush_r+0x1a>
 8009c3c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	dd48      	ble.n	8009cd4 <__sflush_r+0xac>
 8009c42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c44:	2e00      	cmp	r6, #0
 8009c46:	d045      	beq.n	8009cd4 <__sflush_r+0xac>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c4e:	682f      	ldr	r7, [r5, #0]
 8009c50:	6a21      	ldr	r1, [r4, #32]
 8009c52:	602b      	str	r3, [r5, #0]
 8009c54:	d030      	beq.n	8009cb8 <__sflush_r+0x90>
 8009c56:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	0759      	lsls	r1, r3, #29
 8009c5c:	d505      	bpl.n	8009c6a <__sflush_r+0x42>
 8009c5e:	6863      	ldr	r3, [r4, #4]
 8009c60:	1ad2      	subs	r2, r2, r3
 8009c62:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c64:	b10b      	cbz	r3, 8009c6a <__sflush_r+0x42>
 8009c66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c68:	1ad2      	subs	r2, r2, r3
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c70:	6a21      	ldr	r1, [r4, #32]
 8009c72:	47b0      	blx	r6
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	d106      	bne.n	8009c88 <__sflush_r+0x60>
 8009c7a:	6829      	ldr	r1, [r5, #0]
 8009c7c:	291d      	cmp	r1, #29
 8009c7e:	d82b      	bhi.n	8009cd8 <__sflush_r+0xb0>
 8009c80:	4a28      	ldr	r2, [pc, #160]	@ (8009d24 <__sflush_r+0xfc>)
 8009c82:	410a      	asrs	r2, r1
 8009c84:	07d6      	lsls	r6, r2, #31
 8009c86:	d427      	bmi.n	8009cd8 <__sflush_r+0xb0>
 8009c88:	2200      	movs	r2, #0
 8009c8a:	6062      	str	r2, [r4, #4]
 8009c8c:	6922      	ldr	r2, [r4, #16]
 8009c8e:	04d9      	lsls	r1, r3, #19
 8009c90:	6022      	str	r2, [r4, #0]
 8009c92:	d504      	bpl.n	8009c9e <__sflush_r+0x76>
 8009c94:	1c42      	adds	r2, r0, #1
 8009c96:	d101      	bne.n	8009c9c <__sflush_r+0x74>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	b903      	cbnz	r3, 8009c9e <__sflush_r+0x76>
 8009c9c:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ca0:	602f      	str	r7, [r5, #0]
 8009ca2:	b1b9      	cbz	r1, 8009cd4 <__sflush_r+0xac>
 8009ca4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ca8:	4299      	cmp	r1, r3
 8009caa:	d002      	beq.n	8009cb2 <__sflush_r+0x8a>
 8009cac:	4628      	mov	r0, r5
 8009cae:	f7ff fbeb 	bl	8009488 <_free_r>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cb6:	e00d      	b.n	8009cd4 <__sflush_r+0xac>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	4628      	mov	r0, r5
 8009cbc:	47b0      	blx	r6
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	1c50      	adds	r0, r2, #1
 8009cc2:	d1c9      	bne.n	8009c58 <__sflush_r+0x30>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d0c6      	beq.n	8009c58 <__sflush_r+0x30>
 8009cca:	2b1d      	cmp	r3, #29
 8009ccc:	d001      	beq.n	8009cd2 <__sflush_r+0xaa>
 8009cce:	2b16      	cmp	r3, #22
 8009cd0:	d11d      	bne.n	8009d0e <__sflush_r+0xe6>
 8009cd2:	602f      	str	r7, [r5, #0]
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	e021      	b.n	8009d1c <__sflush_r+0xf4>
 8009cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cdc:	b21b      	sxth	r3, r3
 8009cde:	e01a      	b.n	8009d16 <__sflush_r+0xee>
 8009ce0:	690f      	ldr	r7, [r1, #16]
 8009ce2:	2f00      	cmp	r7, #0
 8009ce4:	d0f6      	beq.n	8009cd4 <__sflush_r+0xac>
 8009ce6:	0793      	lsls	r3, r2, #30
 8009ce8:	bf18      	it	ne
 8009cea:	2300      	movne	r3, #0
 8009cec:	680e      	ldr	r6, [r1, #0]
 8009cee:	bf08      	it	eq
 8009cf0:	694b      	ldreq	r3, [r1, #20]
 8009cf2:	1bf6      	subs	r6, r6, r7
 8009cf4:	600f      	str	r7, [r1, #0]
 8009cf6:	608b      	str	r3, [r1, #8]
 8009cf8:	2e00      	cmp	r6, #0
 8009cfa:	ddeb      	ble.n	8009cd4 <__sflush_r+0xac>
 8009cfc:	4633      	mov	r3, r6
 8009cfe:	463a      	mov	r2, r7
 8009d00:	4628      	mov	r0, r5
 8009d02:	6a21      	ldr	r1, [r4, #32]
 8009d04:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009d08:	47e0      	blx	ip
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	dc07      	bgt.n	8009d1e <__sflush_r+0xf6>
 8009d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d16:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1a:	81a3      	strh	r3, [r4, #12]
 8009d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d1e:	4407      	add	r7, r0
 8009d20:	1a36      	subs	r6, r6, r0
 8009d22:	e7e9      	b.n	8009cf8 <__sflush_r+0xd0>
 8009d24:	dfbffffe 	.word	0xdfbffffe

08009d28 <_fflush_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	690b      	ldr	r3, [r1, #16]
 8009d2c:	4605      	mov	r5, r0
 8009d2e:	460c      	mov	r4, r1
 8009d30:	b913      	cbnz	r3, 8009d38 <_fflush_r+0x10>
 8009d32:	2500      	movs	r5, #0
 8009d34:	4628      	mov	r0, r5
 8009d36:	bd38      	pop	{r3, r4, r5, pc}
 8009d38:	b118      	cbz	r0, 8009d42 <_fflush_r+0x1a>
 8009d3a:	6a03      	ldr	r3, [r0, #32]
 8009d3c:	b90b      	cbnz	r3, 8009d42 <_fflush_r+0x1a>
 8009d3e:	f7ff f92f 	bl	8008fa0 <__sinit>
 8009d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d0f3      	beq.n	8009d32 <_fflush_r+0xa>
 8009d4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d4c:	07d0      	lsls	r0, r2, #31
 8009d4e:	d404      	bmi.n	8009d5a <_fflush_r+0x32>
 8009d50:	0599      	lsls	r1, r3, #22
 8009d52:	d402      	bmi.n	8009d5a <_fflush_r+0x32>
 8009d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d56:	f7ff fb76 	bl	8009446 <__retarget_lock_acquire_recursive>
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	4621      	mov	r1, r4
 8009d5e:	f7ff ff63 	bl	8009c28 <__sflush_r>
 8009d62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d64:	4605      	mov	r5, r0
 8009d66:	07da      	lsls	r2, r3, #31
 8009d68:	d4e4      	bmi.n	8009d34 <_fflush_r+0xc>
 8009d6a:	89a3      	ldrh	r3, [r4, #12]
 8009d6c:	059b      	lsls	r3, r3, #22
 8009d6e:	d4e1      	bmi.n	8009d34 <_fflush_r+0xc>
 8009d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d72:	f7ff fb69 	bl	8009448 <__retarget_lock_release_recursive>
 8009d76:	e7dd      	b.n	8009d34 <_fflush_r+0xc>

08009d78 <fiprintf>:
 8009d78:	b40e      	push	{r1, r2, r3}
 8009d7a:	b503      	push	{r0, r1, lr}
 8009d7c:	4601      	mov	r1, r0
 8009d7e:	ab03      	add	r3, sp, #12
 8009d80:	4805      	ldr	r0, [pc, #20]	@ (8009d98 <fiprintf+0x20>)
 8009d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d86:	6800      	ldr	r0, [r0, #0]
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	f7ff fca3 	bl	80096d4 <_vfiprintf_r>
 8009d8e:	b002      	add	sp, #8
 8009d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d94:	b003      	add	sp, #12
 8009d96:	4770      	bx	lr
 8009d98:	20000018 	.word	0x20000018

08009d9c <__swhatbuf_r>:
 8009d9c:	b570      	push	{r4, r5, r6, lr}
 8009d9e:	460c      	mov	r4, r1
 8009da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da4:	4615      	mov	r5, r2
 8009da6:	2900      	cmp	r1, #0
 8009da8:	461e      	mov	r6, r3
 8009daa:	b096      	sub	sp, #88	@ 0x58
 8009dac:	da0c      	bge.n	8009dc8 <__swhatbuf_r+0x2c>
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	2100      	movs	r1, #0
 8009db2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009db6:	bf14      	ite	ne
 8009db8:	2340      	movne	r3, #64	@ 0x40
 8009dba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	6031      	str	r1, [r6, #0]
 8009dc2:	602b      	str	r3, [r5, #0]
 8009dc4:	b016      	add	sp, #88	@ 0x58
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	466a      	mov	r2, sp
 8009dca:	f000 f849 	bl	8009e60 <_fstat_r>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	dbed      	blt.n	8009dae <__swhatbuf_r+0x12>
 8009dd2:	9901      	ldr	r1, [sp, #4]
 8009dd4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009dd8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ddc:	4259      	negs	r1, r3
 8009dde:	4159      	adcs	r1, r3
 8009de0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009de4:	e7eb      	b.n	8009dbe <__swhatbuf_r+0x22>

08009de6 <__smakebuf_r>:
 8009de6:	898b      	ldrh	r3, [r1, #12]
 8009de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dea:	079d      	lsls	r5, r3, #30
 8009dec:	4606      	mov	r6, r0
 8009dee:	460c      	mov	r4, r1
 8009df0:	d507      	bpl.n	8009e02 <__smakebuf_r+0x1c>
 8009df2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009df6:	6023      	str	r3, [r4, #0]
 8009df8:	6123      	str	r3, [r4, #16]
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	6163      	str	r3, [r4, #20]
 8009dfe:	b003      	add	sp, #12
 8009e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e02:	466a      	mov	r2, sp
 8009e04:	ab01      	add	r3, sp, #4
 8009e06:	f7ff ffc9 	bl	8009d9c <__swhatbuf_r>
 8009e0a:	9f00      	ldr	r7, [sp, #0]
 8009e0c:	4605      	mov	r5, r0
 8009e0e:	4639      	mov	r1, r7
 8009e10:	4630      	mov	r0, r6
 8009e12:	f7ff fbab 	bl	800956c <_malloc_r>
 8009e16:	b948      	cbnz	r0, 8009e2c <__smakebuf_r+0x46>
 8009e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e1c:	059a      	lsls	r2, r3, #22
 8009e1e:	d4ee      	bmi.n	8009dfe <__smakebuf_r+0x18>
 8009e20:	f023 0303 	bic.w	r3, r3, #3
 8009e24:	f043 0302 	orr.w	r3, r3, #2
 8009e28:	81a3      	strh	r3, [r4, #12]
 8009e2a:	e7e2      	b.n	8009df2 <__smakebuf_r+0xc>
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e36:	81a3      	strh	r3, [r4, #12]
 8009e38:	9b01      	ldr	r3, [sp, #4]
 8009e3a:	6020      	str	r0, [r4, #0]
 8009e3c:	b15b      	cbz	r3, 8009e56 <__smakebuf_r+0x70>
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e44:	f000 f81e 	bl	8009e84 <_isatty_r>
 8009e48:	b128      	cbz	r0, 8009e56 <__smakebuf_r+0x70>
 8009e4a:	89a3      	ldrh	r3, [r4, #12]
 8009e4c:	f023 0303 	bic.w	r3, r3, #3
 8009e50:	f043 0301 	orr.w	r3, r3, #1
 8009e54:	81a3      	strh	r3, [r4, #12]
 8009e56:	89a3      	ldrh	r3, [r4, #12]
 8009e58:	431d      	orrs	r5, r3
 8009e5a:	81a5      	strh	r5, [r4, #12]
 8009e5c:	e7cf      	b.n	8009dfe <__smakebuf_r+0x18>
	...

08009e60 <_fstat_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	2300      	movs	r3, #0
 8009e64:	4d06      	ldr	r5, [pc, #24]	@ (8009e80 <_fstat_r+0x20>)
 8009e66:	4604      	mov	r4, r0
 8009e68:	4608      	mov	r0, r1
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	602b      	str	r3, [r5, #0]
 8009e6e:	f7f7 fe4d 	bl	8001b0c <_fstat>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	d102      	bne.n	8009e7c <_fstat_r+0x1c>
 8009e76:	682b      	ldr	r3, [r5, #0]
 8009e78:	b103      	cbz	r3, 8009e7c <_fstat_r+0x1c>
 8009e7a:	6023      	str	r3, [r4, #0]
 8009e7c:	bd38      	pop	{r3, r4, r5, pc}
 8009e7e:	bf00      	nop
 8009e80:	20000e98 	.word	0x20000e98

08009e84 <_isatty_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	2300      	movs	r3, #0
 8009e88:	4d05      	ldr	r5, [pc, #20]	@ (8009ea0 <_isatty_r+0x1c>)
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	4608      	mov	r0, r1
 8009e8e:	602b      	str	r3, [r5, #0]
 8009e90:	f7f7 fe4b 	bl	8001b2a <_isatty>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	d102      	bne.n	8009e9e <_isatty_r+0x1a>
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	b103      	cbz	r3, 8009e9e <_isatty_r+0x1a>
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ea0:	20000e98 	.word	0x20000e98

08009ea4 <_sbrk_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	4d05      	ldr	r5, [pc, #20]	@ (8009ec0 <_sbrk_r+0x1c>)
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	602b      	str	r3, [r5, #0]
 8009eb0:	f7f7 fe52 	bl	8001b58 <_sbrk>
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	d102      	bne.n	8009ebe <_sbrk_r+0x1a>
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	b103      	cbz	r3, 8009ebe <_sbrk_r+0x1a>
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}
 8009ec0:	20000e98 	.word	0x20000e98

08009ec4 <memchr>:
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	b510      	push	{r4, lr}
 8009ec8:	b2c9      	uxtb	r1, r1
 8009eca:	4402      	add	r2, r0
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	4618      	mov	r0, r3
 8009ed0:	d101      	bne.n	8009ed6 <memchr+0x12>
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	e003      	b.n	8009ede <memchr+0x1a>
 8009ed6:	7804      	ldrb	r4, [r0, #0]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	428c      	cmp	r4, r1
 8009edc:	d1f6      	bne.n	8009ecc <memchr+0x8>
 8009ede:	bd10      	pop	{r4, pc}

08009ee0 <abort>:
 8009ee0:	2006      	movs	r0, #6
 8009ee2:	b508      	push	{r3, lr}
 8009ee4:	f000 f82c 	bl	8009f40 <raise>
 8009ee8:	2001      	movs	r0, #1
 8009eea:	f7f7 fddc 	bl	8001aa6 <_exit>

08009eee <_raise_r>:
 8009eee:	291f      	cmp	r1, #31
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	d904      	bls.n	8009f02 <_raise_r+0x14>
 8009ef8:	2316      	movs	r3, #22
 8009efa:	6003      	str	r3, [r0, #0]
 8009efc:	f04f 30ff 	mov.w	r0, #4294967295
 8009f00:	bd38      	pop	{r3, r4, r5, pc}
 8009f02:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f04:	b112      	cbz	r2, 8009f0c <_raise_r+0x1e>
 8009f06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f0a:	b94b      	cbnz	r3, 8009f20 <_raise_r+0x32>
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f000 f831 	bl	8009f74 <_getpid_r>
 8009f12:	4622      	mov	r2, r4
 8009f14:	4601      	mov	r1, r0
 8009f16:	4628      	mov	r0, r5
 8009f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f1c:	f000 b818 	b.w	8009f50 <_kill_r>
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d00a      	beq.n	8009f3a <_raise_r+0x4c>
 8009f24:	1c59      	adds	r1, r3, #1
 8009f26:	d103      	bne.n	8009f30 <_raise_r+0x42>
 8009f28:	2316      	movs	r3, #22
 8009f2a:	6003      	str	r3, [r0, #0]
 8009f2c:	2001      	movs	r0, #1
 8009f2e:	e7e7      	b.n	8009f00 <_raise_r+0x12>
 8009f30:	2100      	movs	r1, #0
 8009f32:	4620      	mov	r0, r4
 8009f34:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f38:	4798      	blx	r3
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	e7e0      	b.n	8009f00 <_raise_r+0x12>
	...

08009f40 <raise>:
 8009f40:	4b02      	ldr	r3, [pc, #8]	@ (8009f4c <raise+0xc>)
 8009f42:	4601      	mov	r1, r0
 8009f44:	6818      	ldr	r0, [r3, #0]
 8009f46:	f7ff bfd2 	b.w	8009eee <_raise_r>
 8009f4a:	bf00      	nop
 8009f4c:	20000018 	.word	0x20000018

08009f50 <_kill_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	2300      	movs	r3, #0
 8009f54:	4d06      	ldr	r5, [pc, #24]	@ (8009f70 <_kill_r+0x20>)
 8009f56:	4604      	mov	r4, r0
 8009f58:	4608      	mov	r0, r1
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	602b      	str	r3, [r5, #0]
 8009f5e:	f7f7 fd92 	bl	8001a86 <_kill>
 8009f62:	1c43      	adds	r3, r0, #1
 8009f64:	d102      	bne.n	8009f6c <_kill_r+0x1c>
 8009f66:	682b      	ldr	r3, [r5, #0]
 8009f68:	b103      	cbz	r3, 8009f6c <_kill_r+0x1c>
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	bd38      	pop	{r3, r4, r5, pc}
 8009f6e:	bf00      	nop
 8009f70:	20000e98 	.word	0x20000e98

08009f74 <_getpid_r>:
 8009f74:	f7f7 bd80 	b.w	8001a78 <_getpid>

08009f78 <_init>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	bf00      	nop
 8009f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f7e:	bc08      	pop	{r3}
 8009f80:	469e      	mov	lr, r3
 8009f82:	4770      	bx	lr

08009f84 <_fini>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	bf00      	nop
 8009f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f8a:	bc08      	pop	{r3}
 8009f8c:	469e      	mov	lr, r3
 8009f8e:	4770      	bx	lr
